/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PRESENTATION_REMOTEPROTOCOL_AST_ASSEMBLER
#define VCZH_PRESENTATION_REMOTEPROTOCOL_AST_ASSEMBLER

#include "GuiRemoteProtocolAst.h"

namespace vl::presentation::remoteprotocol
{
	enum class GuiRemoteProtocolClasses : vl::vint32_t
	{
		ArrayType = 0,
		Attribute = 1,
		Declaration = 2,
		EventDecl = 3,
		EventRequest = 4,
		MessageDecl = 5,
		MessageRequest = 6,
		MessageResponse = 7,
		PrimitiveType = 8,
		Schema = 9,
		StructDecl = 10,
		StructMember = 11,
		Type = 12,
	};

	enum class GuiRemoteProtocolFields : vl::vint32_t
	{
		ArrayType_element = 0,
		Attribute_cppType = 1,
		Attribute_name = 2,
		Declaration_attributes = 3,
		Declaration_name = 4,
		EventDecl_request = 5,
		EventRequest_type = 6,
		MessageDecl_request = 7,
		MessageDecl_response = 8,
		MessageRequest_type = 9,
		MessageResponse_type = 10,
		PrimitiveType_type = 11,
		Schema_declarations = 12,
		StructDecl_members = 13,
		StructMember_name = 14,
		StructMember_type = 15,
	};

	extern const wchar_t* GuiRemoteProtocolTypeName(GuiRemoteProtocolClasses type);
	extern const wchar_t* GuiRemoteProtocolCppTypeName(GuiRemoteProtocolClasses type);
	extern const wchar_t* GuiRemoteProtocolFieldName(GuiRemoteProtocolFields field);
	extern const wchar_t* GuiRemoteProtocolCppFieldName(GuiRemoteProtocolFields field);

	class GuiRemoteProtocolAstInsReceiver : public vl::glr::AstInsReceiverBase
	{
	protected:
		vl::Ptr<vl::glr::ParsingAstBase> CreateAstNode(vl::vint32_t type) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex) override;
		void SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment) override;
		vl::Ptr<vl::glr::ParsingAstBase> ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates) override;
	};
}
#endif