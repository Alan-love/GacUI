/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocol_Lexer.h"

namespace vl::presentation::remoteprotocol
{
	bool GuiRemoteProtocolTokenDeleter(vl::vint token)
	{
		switch((GuiRemoteProtocolTokens)token)
		{
		case GuiRemoteProtocolTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* GuiRemoteProtocolTokenId(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"TYPE",
			L"MESSAGE",
			L"REQUEST",
			L"RESPONSE",
			L"VOID",
			L"BOOLEAN",
			L"INTEGER",
			L"FLOAT",
			L"DOUBLE",
			L"STRING",
			L"CPP_NAME",
			L"NAME",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"COLON",
			L"SEMICOLON",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenDisplayText(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"type",
			L"message",
			L"request",
			L"respond",
			L"void",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			nullptr,
			nullptr,
			L"{",
			L"}",
			L":",
			L";",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenRegex(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"type",
			L"message",
			L"request",
			L"respond",
			L"void",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"(::[a-zA-Z_][a-zA-Z0-9<>]*){1,}",
			L"[a-zA-Z_][a-zA-Z0-9]*",
			L"/{",
			L"/}",
			L":",
			L";",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	void GuiRemoteProtocolLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1160; // 10777 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 136;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\x19\x2A\x00\x00\x80\x04\x00\x00\x43\x00\x01\xA6\x01\x84\x81\x81\x12\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x80\x1C\x81\x1C\x82\x3A\x18\x84\x9B\x1B\x8C\x80\x1E\x8F\x04\xBE\x21\x84\x81\x24\x82\x2C\x82\x5F\x28\x84\x81\x3B\x94\x82\x30\x97\x04\xE3\x31\x84\x84\x34\x98\x83\x32\x37\x84\xA6\x3A\x94\x87\x31\x9E\x82\x68\x40\x84\x89\x33\xA4\x82\x34\x82\x6B\x04\xAC\x2A\xA4\x85\x35\xA6\x82\x6E\x50\x84\x8F\x33\xAC\x80\x38\xAB\x04\xF1\x19\xA4\x82\x3C\xAC\x83\x39\x5F\x84\xB4\x22\xB4\x85\x39\xB2\x82\x76\x68\x84\x97\x34\x80\x3C\x83\x3C\x6F\x84\xBA\x32\xB4\x83\x3D\xBA\x82\x7D\x78\x84\x8F\x0B\xBD\xBD\x80\xBE\x01\xFF\x42\xDF\x7C\x81\x82\x06\x82\x83\x89\xFF\x6B\x04\x84\xC5\x80\xC7\x00\x05\x0D\xC4\x88\x03\xC9\x81\x03\x96\x80\x10\xC6\x09\xC8\xCA\x01\xCE\xA0\x81\x83\x0A\x81\x81\x01\xCC\x02\xA1\x9A\xC4\x8C\x00\x89\xC2\xC5\xD7\xB0\xFF\x51\x08\xC1\xD8\xDB\xD8\xD7\x82\xB7\xC0\x1A\xDC\xDC\x81\xDF\x80\xBF\xBB\xFE\xC3\xE0\xE4\xE2\xE1\xE2\xC8\xC7\xCA\xE1\xE1\xE0\x0A\xE3\xDA\xD0\xB5\xFA\xD1\xEA\xC3\xEB\xC0\xE6\xC6\x92\x06\xF8",
			"\xE9\xE4\xEF\xE5\xED\xE0\xDD\xE1\xEA\xE4\xED\xF3\xEA\xDA\xE6\xD6\xF9\xC3\xFA\xDB\x08\xF7\xF7\xE2\xF1\xDF\xF2\xFE\xE9\xE2\xF3\xF4\xE8\xE5\xEA\xF2\xD0\xFB\xFA\xFF\xFA\xC6\x54\x0D\x7C\x80\xF4\x79\x77\x7E\x74\x06\x91\x7B\x7C\x81\xFF\x43\x83\x79\x05\x0E\x85\x82\x84\x00\x07\x94\x7B\x7E\x85\xF9\x4C\x8A\x85\x7F\x16\x11\x8D\x83\x84\x17\x95\x8F\x69\x88\xD0\x4B\x8E\x87\x86\x01\x57\x07\x8B\x8A\x13\xA2\x85\x89\x82\x2F\xB8\x6C\x7C\x88\x2C\x9F\x80\x00\x06\x35\xA8\x84\x86\x8B\xB1\x64\x88\x82\x8C\x3A\x81\x99\x8E\x71\x19\x35\x8C\x8C\x75\x1A\x30\x87\x93\x92\x4C\x8D\x9E\x93\x92\x3E\xBD\x89\x87\x90\x34\x95\x96\x8E\x90\x32\x8F\x9A\x97\x96\x5C\x9D\x9E\x97\x97\x60\xA1\x92\x9B\x98\x64\xA5\x96\x99\x6D\x1B\x04\x49\x99\x40\x6B\x80\x0D\x9B\x99\x70\xB1\x9C\x95\x94\xB6\x53\x96\x94\x96\x36\x9C\x04\x96\x8D\x5B\xB4\x93\x8A\x9D\x57\xBB\x98\x9F\xA0\x4A\xBC\x8E\x9D\x75\x80\x84\xA7\x9E\x87\x1D\x3B\x9D\x9D\xA1\x75\x80\x92\xA3\xA4\x01\x5E\x06\x73\x07\x8E\x9A\x97\xA1\x62\x26\x8B\xA2\x7E\x44\x9E\x81\xA1\xAB\xA6\xF7\x64\xAB\x7A\xA4\xA3\xBB\x91\x08\xA5",
			"\x7C\x9A\xA0\xA7\x9F\xA8\xA2\xA2\xAE\xA2\xFE\x62\x06\x92\xAB\x59\x8A\x89\xA0\xAB\x0C\xA3\x0C\xAF\x78\x8F\xB9\xA1\x8F\x8E\xA7\xB3\xAF\xAD\xA8\x24\x1E\x81\xB0\xB1\xFA\x7B\xA9\xAB\xB3\xFE\x47\x40\xB6\xA9\x60\x83\x42\x40\x41\xD6\x80\x09\xB7\xB6\xD8\x9D\xB7\xB7\xB7\xDA\x9E\xB1\xB8\xB8\xDC\xA4\xB2\xB9\xB9\xE3\xA9\xB8\xB9\xB6\xD4\x6D\x9E\xBA\x9A\xAF\xB2\x92\xBF\xBC\x3F\x8C\xB8\x85\xAC\xDE\x67\x07\xB2\xB1\xD0\x8B\xB7\x81\xA7\xFC\x81\xC8\x9C\x0A\x99\x8F\x94\xB4\xC0\xB4\x89\xCD\x7D\x0A\xCA\xB8\xA6\xBE\xAE\xF8\xBB\xBC\x82\x0A\x12\xF1\xBF\xBE\xC5\xE7\x51\xC9\x73\x0A\x15\xD3\xBD\xC2\xC1\x18\xC5\xBC\xA5\xC7\x00\x2C\x04\xC8\x83\xFE\xA5\xAE\xB2\xC0\x27\xC5\xCE\x93\xC1\xF9\x6D\x0D\xCA\xC7\xFD\x8E\xC7\xC5\xAC\x2E\x33\xCC\xC9\xCD\x20\xC2\xB5\xBF\xC8\x34\xC0\x0F\x0A\xCE\x3A\x9B\x95\x45\x40\x31\x39\x77\xD0\x00\x4B\xCB\xD9\x61\xD3\x14\x51\xD1\x40\xD4\x53\xD2\xDC\xD2\xD5\x54\xD7\xD5\xD7\xD6\x5A\xDD\xD9\xD7\xD7\x58\xE1\xCD\xB2\xCF\x52\x9A\xCB\xCF\xD9\x0A\xF2\x79\xC8\x7E\x32\xB2\x04\xD3\xDB\xC9\x6B\xD3\xD8\xB3\x0C\xB3\x00\xDC\xDA\xCF",
			"\x76\xCA\xCA\xD9\x69\xF6\x84\x0E\xCE\x72\xF7\xB4\xDF\xDD\x7D\xE8\xCA\xDC\xDB\x83\xC1\xD5\xE0\xAB\x81\xD0\xC9\xE0\xDE\x8A\xE3\x75\x0F\xAD\x3D\xCF\xC3\xB0\xD0\x90\xFE\x76\x0C\xE1\x79\xD5\xE7\xCF\xE3\x8B\xF2\x77\x0F\xDD\x46\xC4\x49\xD2\x8C\x60\xE8\xE1\xD8\xD7\xA9\xDE\xDB\xEA\xEB\xAC\xEF\xED\xEB\xEC\x62\xC7\x88\x0D\xED\xF4\xB9\xE1\x98\xCC\x7C\xFD\x77\x45\xE4\xC0\xE4\x77\xE3\xDC\x98\xE1\xE9\xE5\x46\x3C\xEF\xC2\xD8\xC2\x3A\xDC\x41\xF2\x77\x8D\xD7\xE9\xC5\xE6\xC6\xF4\xA1\xF7\xCF\xD3\xDE\x7F\x47\xF3\x80\xC3\xF2\xE1\xF1\x1E\xBD\x0C\xE5\xA8\xBA\xE2\x41\x42\xF9\x00\x28\xFA\xFB\x48\xE7\xEC\xF9\xFA\xFB\xEB\xED\xF2\xFF\xFB\xF3\xF1\xF4\xFF\xFD\xF6\xF9\xFE\xFB\xF5\x65\xE0\xE3\x7B\x0F\xE3\x79\x70\xFF\x11\x5E\x7E\xEE\x41\x68\x08\x94\x6A\x78\xD9\x04\x80\x7D\xE4\x25\x26\x80\xD4\x7D\x3F\x00\xB0\x55\x81\x08\x90\x85\x68\xDE\x6E\x71\x03\x96\x8C\x82\x3C\x5B\x4A\x08\xA6\x79\x3C\x08\x81\x23\x84\x00\x25\x81\x31\x25\x89\x84\x41\x2A\x84\x85\x15\xAE\x85\x85\x30\x86\x87\x0B\xB2\x81\x86\x16\xB4\x87\x86\x36\x99\x87\x0C\x93\x88\x51\xDE\x57\x84",
			"\x74\x19\x92\x79\xB1\x55\x71\x80\x6A\x5F\x7B\x6F\x15\x84\x8B\x0F\xEA\x6A\x4B\x12\xA7\x74\x59\x3A\x92\x45\x14\xB8\x83\x87\x29\x96\x8D\x8A\x58\x95\x85\x16\xD4\x81\x86\xEA\x3E\x1A\x30\xFB\x02\x31\x3F\x7E\x17\x00\x80\x05\x27\x31\xA9\x30\x32\x1A\xE9\x84\x21\xC3\x28\x89\x20\xAC\x21\x23\x43\x7F\x24\x20\xE7\x2F\x8A\x35\x77\x8B\x8D\x1E\xEC\x89\x38\x3B\xB8\x8F\x8F\x7A\x80\x90\x41\x1C\x3B\x8F\x3B\x85\x37\x8C\x81\x90\x30\x6A\x01\x22\x33\x42\xBF\x8F\x90\xBA\x29\x90\x41\x18\x3E\x91\x48\xA9\x35\x32\x01\x29\x21\x40\x07\x96\x35\x80\x1F\x32\x34\x0D\x21\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
