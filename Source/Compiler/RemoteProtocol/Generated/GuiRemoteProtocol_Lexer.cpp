/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocol_Lexer.h"

namespace vl::presentation::remoteprotocol
{
	bool GuiRemoteProtocolTokenDeleter(vl::vint token)
	{
		switch((GuiRemoteProtocolTokens)token)
		{
		case GuiRemoteProtocolTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* GuiRemoteProtocolTokenId(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"VAR",
			L"ENUM",
			L"STRUCT",
			L"MESSAGE",
			L"REQUEST",
			L"RESPONSE",
			L"EVENT",
			L"BOOLEAN",
			L"INTEGER",
			L"FLOAT",
			L"DOUBLE",
			L"STRING",
			L"CPP_NAME",
			L"ATT_NAME",
			L"NAME",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"OPEN_ARRAY",
			L"CLOSE_ARRAY",
			L"OPEN",
			L"CLOSE",
			L"COLON",
			L"SEMICOLON",
			L"COMMA",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenDisplayText(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			nullptr,
			nullptr,
			nullptr,
			L"{",
			L"}",
			L"[",
			L"]",
			L"(",
			L")",
			L":",
			L";",
			L",",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenRegex(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"(::[a-zA-Z_][a-zA-Z0-9<>]*){1,}",
			L"@[a-zA-Z_][a-zA-Z0-9]*",
			L"[a-zA-Z_][a-zA-Z0-9]*",
			L"/{",
			L"/}",
			L"/[",
			L"/]",
			L"/(",
			L"/)",
			L":",
			L";",
			L",",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	void GuiRemoteProtocolLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1428; // 14463 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 148;
		static const vl::vint dataSolidRows = 5;
		static const vl::vint dataRows = 6;
		static const char* compressed[] = {
			"\x7F\x38\x00\x00\x8C\x05\x00\x00\x52\x00\x01\xAA\x01\x84\x81\x81\x14\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x88\x14\x88\x83\x83\x06\x84\xAC\x1A\x84\x80\x18\x83\x1C\x04\xBA\x21\x84\x8B\x1C\x90\x82\x1E\x27\x84\xBE\x0A\x94\x80\x21\x96\x82\x41\x04\x9A\x24\x8B\x2C\x98\x83\x2E\x37\x84\x9F\x3A\x94\x81\x31\x9E\x82\x62\x40\x84\x83\x33\xA4\x80\x32\xA3\x04\xE5\x09\xA4\x86\x34\xA4\x83\x33\x4F\x84\xA8\x32\xA4\x81\x35\xAA\x82\x6A\x04\xAB\x24\x8C\x34\xAC\x83\x36\x5F\x84\xAE\x22\xB4\x87\x35\xB2\x82\x70\x68\x84\x91\x3B\xB4\x82\x38\xB7\x04\xF3\x31\xA4\x84\x3C\xB8\x83\x3A\x77\x84\xB6\x3A\xB4\x87\x38\x82\x3D\x04\xFB\x01\xC4\x8D\x3C\xC0\x83\x0A\x87\x89\xC1\x88\xC1\x81\x08\x82\x09\x04\x94\x04\x9F\x74\xCF\x7C\x87\x80\x13\x13\xD5\xDB\xCB\x04\x80\x06\x82\x0F\x04\x90\x1E\xC4\xD1\x82\x03\xD2\x00\x09\x81\x82\x04\x80\x04\xD5\xCF\x01\x87\x2F\xC4\x84\x03\xD9\x80\xD8\x00\x38\xC5\x04\x83\x06\xD8\x01\x00\xA8\x8F\x81\x8E\x0A\xCB\xCE\xE3\xE3\xC8\xC9\xD7\x05\xE9\xE5\xE7\xE5\x80\xCD\x95\xD6\x04\x8F\xE0\x01\xEB\xEB\xD4\xD9\xC1\x98",
			"\xEB\xEA\xEE\xEA\xEF\xDC\xDF\xDD\xE3\xF2\xF5\xF1\xF1\xE8\xE8\xE9\xC8\xF5\xEA\xF3\xF4\xE6\xE5\xE0\xF1\xE4\xE1\xF4\xFE\xEC\x0C\xF9\xE6\xF8\xD5\xF9\x0E\xED\xF6\xFE\xF4\xEC\x7F\x75\x65\x80\xD1\x75\x73\x7E\x7E\x08\x87\x8A\x81\x7E\xE4\x5A\x09\x80\x00\x02\x91\x86\x70\x81\x02\x94\x80\x7F\x82\xD5\x5B\x0F\x82\x81\x0C\x9D\x8C\x87\x87\xEF\x52\x8F\x7E\x85\xFE\x64\x87\x70\x88\x01\x5C\x0B\x87\x8A\x18\xAC\x8D\x86\x88\x22\xA6\x8A\x7A\x8C\x9B\x68\x8E\x86\x8B\xE1\x5D\x08\x8F\x83\x30\x92\x84\x8C\x80\x21\xA7\x8B\x8D\x8B\x44\x80\x0E\x07\x90\x37\xA4\x7D\x8D\x84\x3F\x85\x81\x93\x84\x48\xB6\x8F\x05\x94\x48\x8B\x95\x87\x93\xE9\x4D\x9F\x3E\x8D\x5C\xAE\x82\x45\x91\x5D\x90\x76\x96\x84\x21\x18\x93\x9B\x99\x68\xA9\x9A\x9B\x9A\xD1\x62\x0F\x92\x9B\x01\x70\x90\x02\x9C\x74\x84\x45\x9D\x9C\x76\xB9\x98\x9F\x9E\x73\xBA\x9D\x9C\x9F\x77\xBF\x92\xA1\xA0\x72\xAC\x9E\x72\x99\x4E\xA2\x99\xA1\x92\x8C\xA1\x9D\xA0\x95\x8A\x86\xA2\xA7\xA4\x94\x95\xA6\xA7\xA5\x98\x99\xAA\xA7\xA6\x9C\x9D\xAE\xA7\xA7\xA0\xA1\xA2\xAB\xA8\xA4\xA5\xA6\xAB\xA9\xA8\xA9\xAA\xAB\xAA",
			"\xAC\xAD\xA2\x87\x08\x04\x70\xA1\x42\xAC\x00\x34\xAE\xAB\xAD\xAA\x9A\x97\x84\x84\x40\xA0\x90\xA7\xA3\xE4\x64\x05\x94\xA6\xBA\xAE\x71\xA7\xAE\x8E\x89\xBF\xAE\x8D\x99\x85\xB2\x93\xB1\xC6\x80\xB2\xB6\xB2\xBE\x81\x45\x08\x7E\xCD\x88\xA7\xA0\xB4\xCF\x8C\xA6\x0B\xB2\xE0\x85\x99\xB4\xB7\x33\x9A\xB4\xB7\xB4\x48\xA7\x03\xB3\xA5\xCE\x90\x94\xB9\x8D\xE1\xA8\xB5\xB4\x00\x15\x73\xB3\xB8\xAF\x4C\xA6\xB1\xBF\xB9\xD5\x58\x45\x7B\x40\xF6\x84\xBA\xB7\xAE\x59\xBB\xBE\x8B\x0A\x06\xEF\xBC\x99\xBB\xF0\x8A\xC4\x64\xBF\x09\xCC\xAB\x46\xB8\x02\xCE\xCB\xB4\xBE\x17\xD0\xC3\xBD\x75\x2D\x11\xC7\xBD\x8C\xFA\x9B\xC1\xC6\xA3\x2E\x18\xB8\xAF\x0B\x4F\xA8\xC1\x42\xCA\x00\x2C\xCE\xC8\x41\x2F\xEB\xC0\xCF\xCC\x32\xF5\xCD\xC8\xCD\x37\xF6\xC1\xCD\xCE\x3C\xFB\xCC\xC9\xA6\x1E\x56\xC9\x71\xD0\x18\xC3\xDD\x47\xD1\x01\x44\xDA\xD0\xD2\x00\x0B\xD9\xD0\xD3\x4E\xCD\xD0\xD7\xD4\x4F\xD5\xD2\xD6\xD5\xE9\x74\xAA\xD5\xAC\x03\xF8\xAE\xD7\xC7\x3E\xA1\xC2\xBF\xD8\x1A\xD2\xB0\xD9\xBE\x16\xE5\xD6\x8D\x0C\x23\xFD\x75\xC5\xD1\x25\xA2\xDA\xDB\x83\x32\x2D\xD2\xD0\x9A\x0C",
			"\xC3\x82\xDF\xAF\x34\x36\xD5\x7B\x0C\x26\xEC\xBD\xD5\xB7\x05\xE2\xC6\xE0\xD9\x04\x75\x0E\x8B\xD9\x57\xA9\xDE\xDF\xDC\xE4\x76\x01\xE2\xA5\x79\xCF\xCB\xDF\xE1\x65\xF7\x01\xBC\xE3\x23\x97\xE8\xE3\x82\x38\x0F\xEE\xDA\xE0\x77\xC4\xED\xAF\xE7\xA8\xD0\xE5\x78\xE7\x71\xD6\xC0\x48\xE6\xA2\xC7\xEC\xE9\x7B\x5A\x95\x72\x48\xEC\xB8\xE9\xE3\xEA\xA5\x25\x41\x48\x49\xA4\xBD\xC0\x01\xF3\x66\xC3\xE8\x71\xF3\xF1\x26\x41\x48\xF2\xF2\xC9\xC2\xFD\xF3\xF2\xCE\xCC\xF2\xF5\xF4\xD4\xD0\xF6\xF7\xE0\x63\x84\xD2\x8A\xF6\xE8\x51\xDE\xF4\xD5\x57\xE1\xFF\xF6\xD5\xE3\xE2\xF0\xF9\xD4\xB3\xE5\xBE\xE1\xEE\xAA\xE5\xD9\xF9\xE1\x70\xDD\xBD\xF9\xC4\x3D\x3C\x8F\xD8\xC8\xEB\xE5\x7B\x48\xFB\xB1\xEF\x87\xFD\xD8\xF9\x73\x7F\x82\x3F\x0E\x6F\xF7\x67\x71\x3D\x2E\x3C\x7E\x02\xBA\x75\x75\x31\x55\x73\x4B\x9E\x61\x3D\x4C\x0B\x82\x81\xD5\x7F\x78\x6D\xF1\x6E\x5C\x03\xE3\x62\x08\x8F\x57\x85\x71\x19\x8D\x63\x06\x95\x8E\x50\x03\x8B\x50\x7E\x24\x91\x5F\x10\x76\x74\x75\x10\x87\x87\x74\x15\x84\x09\xFF\x0F\x82\x45\xE0\x7F\x70\x63\xD0\x64\x7A\xB6\x57\x73\x7A\x1E\x95\x7F",
			"\x79\x40\x9D\x85\x10\xBF\x82\x89\xE9\x5D\x55\x08\xD8\x7F\x6A\x12\xEA\x7E\x85\x13\xB0\x83\x86\x05\x9F\x81\xE7\x01\x80\x8B\xC3\x46\x0C\x85\x94\x69\x8A\xDE\x54\x83\x5F\x23\x15\x8E\x6C\x52\x8D\x75\x13\x90\x87\x70\x24\x1F\x8C\x59\x61\x94\x75\x04\xE7\x88\x3F\x24\x0B\x71\x8D\x4C\x88\x85\xFF\x4A\x01\x8B\x16\xB8\x7B\x8C\x29\x94\x83\x1B\xF6\x80\x80\x3C\x8F\x43\x09\x6C\x92\x74\xAE\x4C\x0F\x48\x42\x81\x26\x90\x00\x08\x92\x22\x84\x2B\x91\x43\x8C\x97\x91\x8E\x91\x91\x22\x90\x93\x92\x49\x8D\x95\x92\x98\x97\x90\x22\xA6\x87\x62\x39\xBA\x8F\x93\x60\x9C\x8C\x06\x9E\x93\x85\x40\xA3\x89\x4D\x0F\x95\x77\x83\x4D\x06\x95\x12\xB0\x88\x7E\xA4\x99\x8C\xEA\x4E\x08\x8B\x4A\x69\x93\x8D\xA0\x87\x5F\x13\x7B\x89\x8B\x06\xA2\x81\x96\xAD\x9F\x55\xA6\x50\x09\x25\x48\x44\x99\x20\xC7\x98\x61\x32\xE9\x39\x99\x66\x84\x26\x99\xC8\x8F\x9A\x34\xD1\x94\x9A\x00\x10\x9E\x9A\xD3\x98\x99\x35\xD7\x9C\x9B\x6C\x9C\x94\x60\x4F\x99\x97\x17\xDF\x91\x5A\x60\xA2\x9F\x9C\x16\x82\x94\x08\xE6\x95\x3D\x28\x01\x99\x60\x97\x49\x9B\x0D\x9B\x37\x9A\x7A\x9A\x5D\x9B\xDB\x99",
			"\x98\x3E\xDA\x9C\x9F\x7D\xBE\x9A\x9F\x00\xBE\x97\x92\x37\x9C\x8B\x52\xA8\x9C\x43\xE9\x3E\x1F\x3D\x14\x3D\x1E\xCA\x2F\x1F\x1B\xFF\x03\x00\x40\x05\x23\x38\x82\x04\x3D\xA2\x18\xA0\x03\x45\x9A\xA6\xA3\x8E\x99\xA4\x31\x00\x1C\x3D\x46\xA1\x31\x21\xD1\x0D\x37\x31\x04\x39\x31\x40\x12\x31\x21\xE9\x24\x3F\x3E\x19\xBB\xA2\x4C\x9E\xAC\xA3\x98\xB4\xA3\xA6\x01\x22\xA4\x00\x42\x30\x00\x98\x94\xA0\xA7\x35\xA1\xA8\x50\x9B\xAE\x34\x9B\xB7\x30\x22\x01\x20\x3A\x51\xC2\xA7\xA6\x82\x32\x33\xA9\xB8\x3A\xA7\x69\x4B\xA3\xA8\x85\x19\xA2\xA7\xAC\x21\x21\x67\x54\xAD\x21\xA3\x81\x25\x37\x01\x35\x35\x46\xBA\x34\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
