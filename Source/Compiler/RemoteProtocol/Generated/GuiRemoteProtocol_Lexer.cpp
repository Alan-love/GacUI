/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocol_Lexer.h"

namespace vl::presentation::remoteprotocol
{
	bool GuiRemoteProtocolTokenDeleter(vl::vint token)
	{
		switch((GuiRemoteProtocolTokens)token)
		{
		case GuiRemoteProtocolTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* GuiRemoteProtocolTokenId(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"VAR",
			L"ENUM",
			L"STRUCT",
			L"MESSAGE",
			L"REQUEST",
			L"RESPONSE",
			L"EVENT",
			L"BOOLEAN",
			L"INTEGER",
			L"FLOAT",
			L"DOUBLE",
			L"STRING",
			L"CHAR",
			L"KEY",
			L"COLOR",
			L"CPP_NAME",
			L"ATT_NAME",
			L"NAME",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"OPEN_ARRAY",
			L"CLOSE_ARRAY",
			L"OPEN",
			L"CLOSE",
			L"COLON",
			L"SEMICOLON",
			L"COMMA",
			L"QUESTION",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenDisplayText(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"char",
			L"key",
			L"color",
			nullptr,
			nullptr,
			nullptr,
			L"{",
			L"}",
			L"[",
			L"]",
			L"(",
			L")",
			L":",
			L";",
			L",",
			L"?",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenRegex(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"char",
			L"key",
			L"color",
			L"(::[a-zA-Z_][a-zA-Z0-9<>]*){1,}",
			L"@[a-zA-Z_][a-zA-Z0-9]*",
			L"[a-zA-Z_][a-zA-Z0-9]*",
			L"/{",
			L"/}",
			L"/[",
			L"/]",
			L"/(",
			L"/)",
			L":",
			L";",
			L",",
			L"/?",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	void GuiRemoteProtocolLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1613; // 18064 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 77;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\x90\x46\x00\x00\x45\x06\x00\x00\x5E\x00\x01\xAE\x01\x84\x81\x81\x16\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x88\x14\x88\x83\x14\x17\x84\xAC\x1A\x84\x80\x18\x83\x1C\x04\xBA\x21\x84\x8B\x1C\x90\x82\x1E\x27\x84\xBE\x0A\x94\x87\x1D\x96\x82\x40\x30\x84\x81\x24\x82\x2C\x83\x2D\x37\x84\x9D\x3A\x94\x87\x2D\x9E\x82\x61\x40\x84\x82\x33\xA4\x83\x30\xA3\x04\xE4\x09\xA4\x85\x34\xA4\x82\x33\x4F\x84\xA7\x32\xA4\x80\x35\xAA\x82\x69\x58\x84\x8A\x3B\xAC\x83\x34\xAF\x04\xEC\x21\xA4\x8D\x34\xB0\x82\x37\x67\x84\xAF\x2A\xB4\x80\x39\xB6\x82\x71\x70\x84\x92\x33\xBC\x83\x38\xBB\x04\xF4\x39\xA4\x85\x3C\xBC\x82\x3B\x7F\x84\xB7\x24\x88\x3C\x81\x3C\xC3\x04\xFA\x09\xC4\x8B\x3C\xC4\x83\x3E\x8F\x84\x98\x12\xC4\xC9\x83\xC9\x80\x13\x04\x94\x04\x86\x0C\x83\x7F\xCF\xFF\x0C\x04\x95\x0E\xC8\xD2\xD3\x0B\x10\x81\x8E\x04\x81\x0C\x82\x08\x82\xAB\xAA\xC4\x86\x0D\x81\x81\x85\x80\x02\x04\x88\x10\xDC\xD9\x83\x03\xDE\x00\x0B\x00\xE4\x00\xE1\xD8\x00\xE3\xC6\x85\x04\x83\x05\xE4\x81\x01\xE6\xB2\x81\x8F\x04\x80\x0D\xD2\xD3\xEB\xD8\xD9\xDA\xFA",
			"\x06\xEA\xEE\xEE\xD3\xDC\x81\x9F\xFF\xC9\x0C\x81\xF0\x00\xE7\xE9\xE6\xEB\xF1\x82\xF5\xF6\xF6\xE8\xF0\xEE\xF1\xFF\xF5\xF8\xFB\xFB\xF3\xF9\xDD\xE3\xFC\xFD\xFF\xF3\xFE\xE3\x7F\x71\x82\x7C\x04\xB6\x7A\x7E\x81\x05\x80\x0B\x05\x82\x07\xB8\x74\x40\x07\x0C\xBB\x70\x83\x84\xD8\x42\x84\x85\x85\x12\x98\x88\x83\x86\x0E\x9C\x8D\x83\x87\x11\x81\x4D\x05\x88\x1D\x80\x07\x87\x89\xD7\x56\x88\x8B\x67\x2A\x9B\x74\x8A\x07\x24\xA0\x8E\x85\x8C\x34\x9C\x8B\x8B\x8A\x2D\xA8\x89\x8E\x86\x25\xA7\x7F\x05\x8D\x3D\x80\x92\x8D\x90\x36\xB7\x87\x8B\x8E\x17\x88\x90\x7A\x90\x4C\xB3\x81\x42\x44\x4E\x84\x92\x96\x92\x46\x9E\x74\x94\x80\x57\xBF\x33\x93\x96\x40\xA1\x0D\x93\x94\x09\x95\x99\x91\x86\x63\xA2\x73\x81\x94\x5C\x9C\x82\x0B\x97\x69\x92\x92\x98\x85\x59\xBC\x79\x95\x9B\x74\xA4\x83\x08\x9B\x40\xAF\x93\x85\x9C\x67\xA6\x8D\x9D\x9D\x01\x64\x08\x9D\x40\x25\x03\xA0\x9A\x99\x7A\xB2\x94\x98\x9C\x8B\xA0\x63\x92\x09\x86\x80\xA7\xA3\xA4\x89\x97\x87\x09\xA3\x95\x99\xAA\xA7\xA6\x9C\x9D\xA3\x79\x45\x88\x97\x70\xA8\x00\xA3\xA5\xA6\x45\x40\xA6\xA8\xA7\xA8\xA9",
			"\xAB\xA9\xAC\xAA\xAA\xB0\xAF\xA2\xAE\xAB\xB4\xAD\xAB\xAA\xA7\x3C\xA2\x93\x9D\xA4\xBC\xA8\x96\xA0\xAE\xC0\x81\xB2\xB3\xB0\xC4\x85\xB6\xB3\xB1\xC8\x89\xBA\xB3\xB2\xCC\x8D\xBE\xB3\xB3\xD0\x91\xB2\xB7\xB4\xD4\x95\xB6\xB7\xB5\xD8\x99\xBA\xB7\xB6\xDC\x9D\xBE\xB4\xB4\x18\x41\x41\xB8\x00\xE3\xA3\xBF\xB7\xB9\xD9\xBC\x9F\x77\xAE\xBE\xAD\xB3\xA7\x90\x2A\x3D\xAE\x9E\xB0\xEA\x96\x98\xA6\x96\xF2\x92\xAA\xBD\x9E\xC3\xB5\xBE\x89\xA8\xFF\xAF\xB9\xBE\xA1\x2B\x3C\xB4\xBF\xBD\x8A\x80\xC9\x77\x90\x1B\x6E\xBB\xBE\xC3\x06\xC1\xBE\xBF\xC2\xF7\x8F\xC2\xC0\xC4\x06\x72\xB4\xB3\xC4\xB9\xBF\x93\xC0\xC6\x52\x83\x40\xC8\xC7\x37\xA4\xCB\x92\xC2\x3C\x96\xCA\xC8\x41\x2F\x30\x7E\x47\xC8\x08\xC9\xA6\xCA\xA3\x15\xDF\xC7\xC4\x00\x31\x36\xC3\x7F\xC6\x31\xEB\xB5\xCC\xCC\x40\xF7\xC7\x7A\x0C\x5F\xBC\xC8\xC9\x99\xF3\xB6\xB1\xD2\xC5\x33\x3A\xC0\x7E\xD1\x49\xF8\x8F\xCE\xD0\x4E\xEE\xB4\x0D\xC4\xC0\xB3\xCC\x8B\xBD\x35\x15\xD4\xD7\xD2\x61\xBD\xBD\xCE\xD2\x51\xD4\xC0\xD9\x94\x36\x1E\xD3\x90\xD4\xBA\x93\xDB\xCB\xD9\x5F\xF7\x77\x0F\xD3\xDF\xB8\x04\x9A\xDD\x01",
			"\x78\xD0\x02\xDE\x7C\xC4\x4D\xDD\xDE\x7E\xC1\xE0\xE3\xE0\x7B\xC2\xE5\xE0\xE1\x7F\xC7\xEA\xE1\xE2\x8C\xC6\xE4\xB0\x48\x47\xD4\x80\xE5\xD9\xD8\x53\xE6\xE7\x47\x98\xC1\x47\xE6\xE6\x99\xC0\x0B\xE6\xE7\x9D\xDF\xE2\xE9\xE8\xA4\xDC\xE6\xE8\xE8\x91\xE0\x65\xB9\x46\xE2\xA3\xD8\xBB\xEB\xC5\x9A\xD8\xBD\xEA\x5B\xF0\xDF\xD9\xDC\x0D\xAC\xD5\x94\xBB\xB8\xC0\x92\x4A\xED\x58\xF8\xA2\xEC\xEF\xB7\xC3\x95\x48\xF0\x51\xBA\xE6\x90\xF1\x86\xBD\x0A\xD8\x7C\x28\x6E\xBA\xF1\xC9\x6E\xCF\xF1\xD3\x4A\x41\xD3\xF2\xD4\xED\xB3\xFD\xE8\xF3\xA4\x2E\x52\xF2\xD8\xF7\x09\xD4\xE9\x8A\xF5\x93\xB1\x4F\xF6\xEC\x8C\xA4\xFD\x9D\xF9\xC5\xF0\x74\x4F\xFA\xC1\xDE\xA3\xF1\xF5\xF4\xF9\xF7\xCE\xF6\x3A\xB7\xB2\x10\xFA\xF1\x60\x64\xFF\x47\x43\x6B\x21\x00\x87\x80\xF6\x23\x80\xD2\x70\x78\x81\x49\x44\x0A\x63\xE3\x66\x7D\xFB\x12\x84\x66\xFD\x43\x4D\x08\xE8\x6A\x83\x04\x8C\x86\x83\x06\xBB\x63\x58\x46\x04\x23\x11\x5D\x31\x85\x80\x25\x86\x7C\x27\x9C\x3F\x09\xAB\x84\x20\x16\xA6\x85\x85\x30\x8F\x86\x0C\x80\x0E\x84\x1A\xB1\x86\x86\x33\x95\x86\x0E\xB7\x8B\x86\xF7\x7A\x4B",
			"\x72\x62\x40\x8B\x78\x23\x77\x74\x22\xA8\x77\x88\x46\x89\x89\xE9\x48\x8B\x88\x23\x9A\x83\x4F\xF8\x7E\x7A\x14\x81\x84\x82\x4D\x77\x7C\x7B\x54\x99\x88\x41\x48\x05\x69\x08\xAD\x68\x8B\xF0\x29\x0A\x07\x99\x8E\x8B\xDD\x51\x8A\x8B\xF6\x2A\x09\x03\xCF\x88\x4B\x7B\x4B\x0B\x8C\x1D\x85\x4B\xC1\x3E\x84\x6C\x0E\xA5\x44\x09\x70\x93\x8A\xEB\x66\x84\x8F\x80\x76\x88\x8D\x25\x4D\x08\x19\xF3\x85\x8A\xFF\x27\x89\x8F\x80\x8C\x8E\x21\xE0\x81\x8E\x3D\x81\x26\x09\x5D\x84\x93\x17\x85\x90\x91\xF3\x0F\x08\x91\x7B\x8B\x79\x26\xE7\x7C\x90\x47\x9E\x97\x76\x8A\x85\x7F\x1F\x98\x96\x3E\x28\x10\x82\x58\x27\x83\x85\xA8\x35\x8A\x3B\x14\xA3\x3D\x87\x38\x91\x94\x2C\xB3\x9C\x87\x5A\xB9\x86\x96\xB2\x98\x96\x2B\xC6\x51\x0B\x4D\xB0\x77\x97\x8B\x85\x92\x28\x9E\x6D\x91\x4A\xA1\x6A\x92\x7C\x94\x90\x29\xB7\x62\x0B\x48\x92\x66\x97\x15\x8A\x98\xC8\x53\x0B\x99\x36\x61\x97\x7D\xC4\x93\x50\x15\x55\x95\x7F\x4E\x57\x8A\x9A\x9F\x96\x65\x15\x3F\x55\x8C\x4D\x9D\x96\x98\xF6\x36\x0B\x1A\xE5\x94\x7B\x73\x9C\x9A\x7F\xD7\x9E\x66\x3B\x9C\x47\x0B\x77\xB1\x69\x9E\x75\x99",
			"\x98\x3A\xE1\x99\x79\x6F\x58\x0C\x4C\xFF\x81\x21\x40\x80\x03\xA1\x82\x84\x26\xA0\x02\xA7\xA2\x42\x89\xAC\xA0\x82\x8B\xA6\xA1\x0D\xA8\xA0\x44\x93\xA2\xA3\x8A\x8F\xA0\x9F\x7E\x9A\x9E\x3D\xA0\x9C\x9D\xED\x60\x9B\x9F\x20\xB4\x6C\x32\xE6\x9F\xA3\x04\x59\x0B\xA3\xCE\x99\x68\x34\xB5\x75\xA5\x62\x86\x56\x26\x02\x9D\xA1\xFF\x73\x9C\x9E\x29\xB8\x21\x7B\x32\xA4\x80\x4D\xA1\xAE\xA5\x3E\x95\x4C\x0B\x22\x9D\x38\x50\x81\x23\xA8\xF3\x45\xAC\x3F\x45\xA9\xA8\x41\x4A\xA4\xA9\xA5\x8E\xAD\xA9\x50\xA0\x00\x53\xD2\xAF\xA8\xAA\x91\xAB\xAA\x58\xB5\xA9\x56\xBE\xA4\xA5\x49\xA3\x95\xA7\x35\xBF\x83\x48\xED\x9D\xA5\xB0\x8B\x98\xA3\x66\x65\xAF\x7C\x3B\x20\xAC\x2A\x84\x5D\xA8\xAA\x89\x6B\x54\xDA\x37\xA9\xF1\x1B\xAE\xAA\x78\xB7\xAE\x5E\xDA\xAC\xAF\xAB\xBD\xA9\xAF\x7F\xB5\xAF\x58\x9E\xAF\xAA\xB3\xAD\xAF\x5E\xFE\x1F\x1B\x67\x7F\x00\x34\xC6\xBD\x1F\x07\x00\x25\x21\x40\x2D\x33\xB2\xD6\x16\xB5\xB2\x98\xA0\x00\x65\x9A\xB7\xB2\xCE\x99\xB7\x32\x00\x03\x45\x66\xAF\x38\x32\xCD\x23\x34\x33\x04\x28\x35\x40\x65\x36\x3F\x05\x41\x20\x42\x99\xBB\xB2\x6C\x9D",
			"\xB3\xB7\xD8\xB4\xB7\xB6\x99\xA2\xB4\x00\x55\x3F\xB4\xC9\xB6\xB7\xB7\x9E\xA1\xBB\x66\xBB\x30\xB9\xDA\x80\x07\x21\xD2\x34\x3A\x73\x38\xB2\xB8\xE6\xBF\x30\xB8\xA2\x39\xB3\x74\x22\x43\x36\xE6\x86\xBB\xB3\xB7\x21\xBA\x71\x3A\xB9\x37\x80\x02\x3D\xB8\xB5\x20\x03\x74\x80\x0C\x39\x80\x04\x3A\xBA\x04\x2A\x39\x40\x00",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
