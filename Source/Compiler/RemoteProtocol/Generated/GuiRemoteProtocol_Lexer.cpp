/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocol_Lexer.h"

namespace vl::presentation::remoteprotocol
{
	bool GuiRemoteProtocolTokenDeleter(vl::vint token)
	{
		switch((GuiRemoteProtocolTokens)token)
		{
		case GuiRemoteProtocolTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* GuiRemoteProtocolTokenId(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"VAR",
			L"ENUM",
			L"STRUCT",
			L"MESSAGE",
			L"REQUEST",
			L"RESPONSE",
			L"EVENT",
			L"BOOLEAN",
			L"INTEGER",
			L"FLOAT",
			L"DOUBLE",
			L"STRING",
			L"CHAR",
			L"KEY",
			L"COLOR",
			L"BINARY",
			L"CPP_NAME",
			L"ATT_NAME",
			L"NAME",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"OPEN_ARRAY",
			L"CLOSE_ARRAY",
			L"OPEN",
			L"CLOSE",
			L"COLON",
			L"SEMICOLON",
			L"COMMA",
			L"QUESTION",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenDisplayText(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"char",
			L"key",
			L"color",
			L"binary",
			nullptr,
			nullptr,
			nullptr,
			L"{",
			L"}",
			L"[",
			L"]",
			L"(",
			L")",
			L":",
			L";",
			L",",
			L"?",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenRegex(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"char",
			L"key",
			L"color",
			L"binary",
			L"(::[a-zA-Z_][a-zA-Z_0-9<>]*){1,}",
			L"@[a-zA-Z_][a-zA-Z_0-9]*",
			L"[a-zA-Z_][a-zA-Z_0-9]*",
			L"/{",
			L"/}",
			L"/[",
			L"/]",
			L"/(",
			L"/)",
			L":",
			L";",
			L",",
			L"/?",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	void GuiRemoteProtocolLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1687; // 19005 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 151;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\x3D\x4A\x00\x00\x8F\x06\x00\x00\x63\x00\x01\xAE\x01\x84\x81\x81\x16\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x88\x14\x88\x83\x14\x17\x84\xAC\x1A\x84\x80\x18\x83\x1C\x04\xBA\x21\x84\x8B\x1C\x90\x82\x1E\x27\x84\xBE\x0A\x94\x87\x1D\x96\x82\x40\x30\x84\x81\x24\x82\x2C\x83\x2D\x37\x84\x9D\x3A\x94\x87\x2D\x9E\x82\x61\x40\x84\x82\x33\xA4\x80\x81\x80\x47\x80\x24\x24\x8B\xA1\x81\x32\x82\x4F\x81\xA6\x24\x83\xA9\x83\x32\x82\x57\x81\xA8\x24\x8B\xA9\x81\x34\x82\x5F\x81\xAA\x24\x83\xB1\x83\x34\x82\x67\x81\xAC\x24\x8B\xB1\x81\x36\x82\x6F\x81\xAE\x24\x83\xB9\x83\x36\x82\x77\x81\xB0\x24\x8B\xB9\x81\x38\x82\x7F\x81\xB2\x24\x83\xC1\x83\x38\x82\x87\x81\xB4\x24\x8B\xC1\x81\x3A\x82\x8F\x81\xB6\x24\x83\xC9\x83\x3A\x82\x78\x04\xB9\x3A\xC4\x82\x3D\xCE\x82\x7B\x20\xC4\x9D\x33\xD4\x80\x0C\xD3\xA8\x81\xA7\xC1\x83\x0C\x80\x0A\x82\x16\x04\xBF\x73\xDF\x7C\x04\x83\x0A\xB2\xB4\xFA\xD7\x00\x89\x82\x06\x82\x11\x04\x92\x04\x8F\xDE\xDC\x82\x03\x0D\x81\x89\x81\x82\x04\x80\x04\xE2\xD0\x81\x87\x11\xE0\x03\x04\xEA\x02\xD4\xC5\xC0\x1A",
			"\xEA\xED\x00\x83\x01\xD9\x84\x81\x01\xF6\xE1\x83\x06\x82\x10\x39\xFA\xCB\xFC\xF5\xF6\xF6\x0D\xEA\xEE\xF2\xFA\xD0\xF9\x83\xF6\x82\x19\x04\xB5\xE0\x0B\xFD\xFE\xFD\xFF\x01\x7E\x71\x80\x80\xFC\x44\x82\x81\x81\x03\x89\x88\x83\x82\x07\x8D\x81\x7F\x7C\x10\x91\x84\x6F\x7E\x12\x90\x84\x85\x7B\x0E\x8A\x89\x84\x83\x06\x9D\x8A\x83\x06\x1E\x9C\x8A\x84\x81\x1C\x21\x87\x85\x85\x28\xB2\x77\x89\x8A\xEB\x6B\x84\x7E\x89\x30\xA3\x82\x8E\x88\x34\x9B\x87\x81\x07\x31\xB4\x8C\x8B\x8E\x2D\x8F\x8C\x8E\x8B\x13\xB9\x8B\x7E\x07\x42\x85\x93\x8E\x8D\x46\xBA\x8C\x8F\x92\x40\xBB\x8D\x93\x3F\x48\x8A\x8F\x05\x92\x51\xB5\x84\x95\x92\x4B\x8C\x9E\x8E\x93\x5B\x90\x97\x97\x91\x04\x61\x0F\x94\x00\x12\x60\x96\x9A\x95\x0A\x99\x9F\x8D\x97\x29\x8F\x95\x97\x9B\x63\xA2\x03\x98\x9C\x69\xAA\x9C\x8B\x93\x6D\x9D\x94\x9C\x9A\x7C\xBB\x73\x0B\x9C\x80\xB5\x96\x9C\x8A\x78\x84\xAA\x9D\xA0\x7D\x89\x94\x08\xA2\x55\x83\xA9\x9E\x7D\x76\xAE\x9C\xA0\x41\x25\x08\xA6\x0B\xA4\x67\x8E\xA6\xA0\xA4\x6A\x92\xA7\x9B\x7E\x27\x18\xA9\xA3\xA7\x63\x9A\xAB\x8D\x45\x9C\xA6\xAA\xAB\xAA",
			"\xAC\xAD\xAE\xAB\xA0\x18\x69\xAA\x6D\xAC\x00\x34\xA6\xAD\x46\x01\x77\xA9\xAC\xAE\xB5\xBC\xAA\xAD\xAF\xBB\x81\xB0\xB3\xB0\xBF\x85\xBE\xAC\xAF\xAF\x98\x8C\x9B\xA6\x00\x37\x74\xAB\xB3\xA3\x91\xBB\x9D\xA3\xC9\x95\xB6\xB7\xB5\xD8\x99\xBA\xB7\xB6\xDC\x9D\xBE\xB7\xB7\xE0\xA1\xB2\xBB\xB8\xE4\xA5\xB6\xBB\xB9\xE8\xA9\xBA\xBB\xBA\xEC\xAD\xBE\xBB\xBB\xF0\xB1\xB2\xBF\xBC\xF4\xAC\x8A\x08\x41\xF7\x81\x49\xBC\x00\xFB\xB5\xBE\xBF\xBB\x85\x95\x8E\xA6\xB4\xA2\xBB\x9B\x0A\xA8\xDA\x81\xC2\x87\xC0\xD3\x85\xCE\xC1\xA6\xD9\x8A\xC1\x84\xC3\x0F\xC4\xC0\xB7\x81\x1B\x50\xB9\xC3\xB2\x02\xC7\xA0\xB7\x41\x17\xD5\xCD\xC2\xA0\xD7\x92\xC6\x86\xC7\x16\xE9\xC3\xCB\x82\x03\x61\xC3\x8F\xC6\xB2\xAB\x91\xCF\x6C\x2B\xF5\xC8\xA3\x0B\x88\xB0\xCD\xB1\xA4\x28\xF6\xCE\xC9\xB4\x1E\x4A\x81\x0D\xCE\x11\xDC\xCB\xC1\xCF\x22\xC9\x92\x0D\xD2\x24\xD6\xB6\xCB\x7C\x14\xFF\xCE\xCC\x00\x33\x0C\xDA\x90\xB6\x4F\xEA\x88\xD2\xD4\x56\xDB\x84\x0D\xA9\x45\xF3\xC7\x9F\xD6\x2A\xE2\xA5\x0D\xD7\x46\xEA\xA9\xD6\xB3\x3B\xEC\x73\xD7\xDB\x88\xB6\x08\x95\xD8\x6D\xD9\x93\xC3\x0D\x68",
			"\xDC\xDA\xDF\xD5\x25\xE9\xD7\xCA\xD8\x70\xD0\xB8\x0D\xDE\x7C\xBA\xC3\xA1\xD4\x65\xFB\xD1\xE0\x8D\x20\x4D\xD1\xBE\x48\x62\xD0\xE0\x02\xE4\x94\xE3\x41\x41\xE5\x97\xD6\xE3\xE6\xE6\x98\xDB\xE9\xE7\xE7\x9E\xE1\xED\xE7\xE8\x9C\xDA\xEA\xB5\x49\x62\xE9\x88\xE9\xDD\xBA\x6B\xEE\xEA\x49\x01\x6F\xE1\xEC\xEC\x00\x32\xE5\xEC\xED\xB6\xF9\xE8\xEF\xEE\xB3\xFD\xE7\xEE\xEF\xAB\xD1\x8B\xBF\xF0\xF8\xBE\xDF\xBF\xF1\xDD\xAB\xDA\xB0\xE0\x84\xCB\xE3\xD6\xE1\x3C\xCC\xFA\xE3\x98\x28\x53\xFF\xCC\xF4\x9D\xA4\xDE\xF1\x8E\x3D\x0D\xF6\xF2\xA3\xCA\xEE\xDA\xF4\xA2\x2E\x56\xF1\xB7\x4A\x1A\xF4\xD7\xE3\xF8\xE6\xDB\xF1\x41\x4C\x7B\xD8\xF6\xDC\xFB\x89\xF5\xFB\xC8\x4D\xE9\xD8\xDF\xF4\xDB\x6C\xEE\xF5\xFE\x10\x56\x72\x7E\x96\x52\x76\x7F\x24\x43\x0E\x7B\x2F\x6A\x7D\xF4\x2C\x71\x49\x80\x04\x08\x81\x05\x91\x7E\x02\xD9\x74\x80\xFF\x56\x84\x68\xFA\x69\x74\xB3\x6C\x65\x08\x08\x97\x80\x62\x19\x8C\x80\x97\x15\x84\x20\x23\x1E\x80\x82\x02\x92\x66\x08\xDE\x4D\x7C\xAB\x47\x08\x61\x13\x93\x7C\x09\xAD\x8F\x66\x24\x04\x71\x85\x23\x8B\x87\x07\x91\x8C\x87\x03\x5A\x59",
			"\x09\x04\x2A\x09\x7C\x40\x81\x20\x22\xAB\x86\x88\xEE\x26\x8A\x12\x84\x2B\x89\x22\x8C\x8F\x89\x4E\x91\x88\x00\x4D\x83\x8A\x28\x95\x8A\x8A\x54\x99\x8A\x15\xDA\x82\x8B\xD3\x7B\x7D\x3D\xC1\x60\x8C\xEF\x3F\x74\x8C\xDD\x40\x7B\x8C\x66\x85\x8C\x1A\xEB\x87\x8C\xDF\x78\x83\x6C\x33\x9D\x87\x09\xF9\x7D\x6E\x0D\x9D\x61\x8E\x3B\x8B\x73\x12\x60\x61\x85\xF5\x78\x8C\x20\x4C\x13\x8E\x1C\x89\x8D\x8F\x05\xBD\x7A\x90\x4D\x08\x85\x0C\x83\x8A\x86\x82\x0E\x0A\x90\x79\x84\x43\x1B\x8F\x5D\x90\x68\x4F\x08\x92\x30\x85\x90\x05\x95\x93\x91\xFA\x50\x0F\x86\x8B\x8A\x87\x21\xB4\x8D\x93\xC5\x53\x93\x83\xCB\x65\x95\xC5\x51\x09\x93\x3A\xAB\x84\x92\xA3\x8A\x94\x29\xFB\x32\x0A\x3E\xAE\x96\x8F\x9C\x91\x91\x40\x53\x08\x92\x3B\xAB\x51\x7C\x3D\x5F\x8F\x2C\xBD\x9B\x41\x53\xB7\x89\x97\xC4\x9B\x40\x15\x2D\x96\x5A\x23\x82\x89\x55\x54\x89\x89\x97\x5C\x87\x8B\x6A\x94\x9F\x9A\x5B\x99\x98\x16\xDA\x96\x9A\x6E\x91\x9D\x5B\x55\x1F\x88\xF2\x63\x98\x95\x4D\xB1\x92\x97\xB2\x91\x5A\x31\xC7\x62\x99\x74\x8B\x76\x0A\xB6\x8E\x6A\x38\xC1\x98\x99\x9F\x57\x09\x99\x73\x7A",
			"\x92\x0C\xF5\x99\x64\x2C\x38\x9C\x8E\xF2\x9E\x97\xC4\x74\x78\x9D\x3D\x59\x08\x83\xB7\x86\x91\x2A\x85\xA4\x40\x9B\x03\x9C\x90\x09\xA6\x9F\x42\xFF\x9D\x92\x9C\x0E\x71\x59\xC0\x8F\x45\x3B\x8C\xAF\xA0\xBE\x41\xA7\x95\xE5\x94\x9D\x95\x5C\x04\xA3\x95\x6B\x9B\xA0\x1B\xA5\xA4\x33\xF1\x5B\x26\xB1\x6D\xA0\x00\x2F\xB1\xA4\x4F\x01\x22\xA6\x9A\xB3\xA0\xA6\x37\xB5\xA4\x4E\xB6\xAC\xA7\x9D\xBE\xA2\xA7\x40\xB9\xA7\x4D\xA7\xAF\x6E\x7E\x9C\xA6\x9D\x21\x44\xA8\xD4\x04\xAA\xA4\xF3\x4A\xAA\x6B\x29\xAA\x42\x17\x4D\xA9\x65\xA7\xBC\x7B\xA2\x1D\xBE\x7E\x4F\x57\x71\x95\x1C\xA7\x9C\xAA\xFB\x20\x0C\x42\x9F\xA8\x97\xAF\x99\xAC\x98\x56\xA9\x96\x59\xC8\xA7\xAC\x10\x97\x59\x28\x01\x2F\x99\xDD\x70\xA0\x00\xBA\xAE\x3E\xAE\xED\x34\xAE\x5E\xC2\x21\x21\xBD\xBD\xAC\xAF\x75\xA0\xB2\x5F\x81\xBF\xAF\xC2\x84\xB7\xB0\x83\xA9\xB2\x60\x8B\xB2\xA0\x53\x59\xA5\x81\x46\xA0\xAF\x4A\x98\xA3\x9E\x8D\x91\xB5\xAD\x6C\xA5\x71\x57\xF0\x87\xB2\x1A\x44\x28\xB3\x3B\x9A\x58\x5D\xF2\xAA\x37\xC1\xB7\xAD\x4B\x8A\xA6\xB1\x6A\x88\xBC\xB0\xD6\xAA\xB5\xB5\xAB\xB1\xB5\x6B\xE9",
			"\xA2\x7D\xA8\x99\xB7\xA8\x11\x5E\x1F\x37\x34\x3E\x1E\xDA\x3B\x1B\xB7\x07\x09\x29\x41\x43\x31\x20\xE2\x80\x06\xB8\xC8\xA2\x3A\x72\xC5\xBB\xB9\xE3\x8D\xB9\x3F\x01\x24\x48\x73\xAC\x3E\x35\xDB\x30\x34\x20\xBC\x2A\x34\x81\x20\x41\x21\x12\x41\x20\x47\xD3\xAE\xB9\x78\xC9\xB3\xBD\xE6\xA4\xBA\xBC\xE8\xA7\xBE\x71\xD2\xB0\x01\xE0\x1F\xBD\x20\xE6\xB1\xBD\x79\xF3\xB0\x01\xE7\x34\xBF\xBC\x0F\x21\x21\x7A\x01\x2E\xBC\x00\x23\x3F\xBE\xF2\xA8\xBF\x74\x00\xC1\x20\xDB\x21\xBB\xBF\x00\x0C\xBC\x72\x04\xC9\xBD\xE6\x8B\x38\xBD\xDA\x2C\xBD\x73\x01\x26\x3A\x06\xE7\x39\x20\x0C\x3A\xBF\x77\x04\x28\x3B\x03\xC4\x26\x3B\x01\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
