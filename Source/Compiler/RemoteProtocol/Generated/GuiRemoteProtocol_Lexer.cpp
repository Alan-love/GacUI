/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocol_Lexer.h"

namespace vl::presentation::remoteprotocol
{
	bool GuiRemoteProtocolTokenDeleter(vl::vint token)
	{
		switch((GuiRemoteProtocolTokens)token)
		{
		case GuiRemoteProtocolTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* GuiRemoteProtocolTokenId(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"TYPE",
			L"PROTOCOL",
			L"REQUEST",
			L"RESPONSE",
			L"VOID",
			L"BOOLEAN",
			L"INTEGER",
			L"FLOAT",
			L"DOUBLE",
			L"STRING",
			L"CPP_NAME",
			L"NAME",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"COLON",
			L"SEMICOLON",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenDisplayText(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"type",
			L"protocol",
			L"request",
			L"respond",
			L"void",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			nullptr,
			nullptr,
			L"{",
			L"}",
			L":",
			L";",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenRegex(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"type",
			L"protocol",
			L"request",
			L"respond",
			L"void",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"(::[a-zA-Z_][a-zA-Z0-9<>]*){1,}",
			L"[a-zA-Z_][a-zA-Z0-9]*",
			L"/{",
			L"/}",
			L":",
			L";",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	void GuiRemoteProtocolLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1164; // 10933 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 140;
		static const vl::vint dataSolidRows = 4;
		static const vl::vint dataRows = 5;
		static const char* compressed[] = {
			"\xB5\x2A\x00\x00\x84\x04\x00\x00\x44\x00\x01\xA6\x01\x84\x81\x81\x12\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x80\x1C\x81\x1C\x82\x3A\x18\x84\x9B\x1B\x8C\x80\x1E\x8F\x04\xBE\x21\x84\x81\x24\x82\x2C\x82\x5F\x28\x84\x81\x3B\x94\x82\x30\x97\x04\xE3\x31\x84\x84\x34\x98\x83\x32\x37\x84\xA6\x3A\x94\x87\x31\x9E\x82\x68\x40\x84\x89\x33\xA4\x82\x34\x82\x6B\x04\xAC\x2A\xA4\x85\x35\xA6\x82\x6E\x50\x84\x8F\x33\xAC\x80\x38\xAB\x04\xF1\x19\xA4\x82\x3C\xAC\x83\x39\x5F\x84\xB4\x22\xB4\x85\x39\xB2\x82\x76\x68\x84\x97\x34\x80\x3C\x83\x3C\x6F\x84\xBA\x32\xB4\x83\x3D\xBA\x82\x7D\x78\x84\x8F\x0B\xBD\xBD\x80\xBE\x01\xFF\x42\xDF\x7C\x81\x82\x06\x82\x83\x89\xFF\x6B\x04\x84\xC5\x80\xC7\x00\x05\x0D\xC4\x88\x03\xC9\x81\x03\x96\x80\x10\xC6\x09\xC8\xCA\xCF\xCC\x02\x19\xC3\x0A\x81\x81\x01\xCC\x02\x9D\x99\xCC\x10\x81\xC2\xC6\xD7\xD7\xFF\x11\x08\xD0\xDF\xD2\xD9\xD6\xC1\xB6\x80\x39\xDB\xD4\x84\xDD\x80\xDF\xBA\xBD\xC2\xFF\xD3\xE1\xE0\xE3\xE3\xC6\xC9\xC0\xE0\xE0\x0D\xE0\xDB\xE7\xB4\xB9\xD0\xEA\xC2\xEB\xC3\xE5\xE2\xD7\xC8\xD9\xEA",
			"\xE8\xED\xE2\x09\xEE\xDA\xE0\xC9\xF3\xE4\xF6\xEB\xD9\xF2\xD5\xB8\xE2\xF9\xD3\x0B\xF6\xF7\xF0\xF0\xDC\xF1\xFB\xE0\xE5\xF0\xF5\xF3\xE4\xE9\xF1\xCF\xF2\xFD\xFC\xFB\xE2\x14\x3C\x7F\x7F\x7C\xF8\x76\x71\x75\x81\xD0\x7A\x73\x82\x7F\x02\xA2\x75\x05\x83\x04\x91\x80\x02\x81\xD3\x7A\x75\x84\x7E\x0B\x99\x8C\x7E\x05\x10\x8C\x82\x86\x85\x14\xAE\x60\x8B\x73\x0A\x9D\x8A\x85\x40\x17\x26\x8A\x8A\x84\x21\xA4\x88\x82\x8B\xB7\x7B\x7F\x87\x8A\x1E\x80\x08\x04\x8D\x27\x93\x8D\x88\x6C\x23\x87\x81\x8D\x8E\x40\xB8\x85\x71\x06\x34\xBB\x83\x76\x06\x2F\x86\x9A\x93\x92\x4C\x8D\x9A\x91\x8F\x3C\x98\x82\x93\x8C\x54\xB5\x81\x91\x8C\x4E\x99\x9A\x97\x96\x5C\x9D\x9E\x97\x97\x60\xA1\x92\x9B\x98\x64\xA5\x94\x6F\x06\x04\x68\x91\x42\x9A\x00\x2C\x96\x9B\x9B\x70\x9B\x90\x95\x6D\x52\x95\x97\x95\x8D\x1C\x13\x95\x8E\x96\x73\xA2\x85\x9E\x95\x7A\xB7\x92\xA1\x92\x3B\xBD\x94\x77\x9F\x83\xB6\x94\x41\x07\x81\xBC\x7C\x9C\xA1\x74\xBF\x8D\xA2\xA2\xF1\x5E\x05\x73\x07\x7A\x8F\xA8\x95\x82\x88\xBA\x92\x44\xA5\x80\xA0\xA6\xA2\x81\xA3\xA6\x72\xA6\xA8\x7A\xA1\x03\xA7\x9E",
			"\x59\xA5\xAA\x7B\xA9\xA1\xB1\xA9\xA1\x7F\x22\x05\x9D\xA8\xA4\x7E\xB0\xA3\xAD\x8E\x23\x2B\xAB\x76\xA6\x3A\xB7\x7A\xAE\xAF\xC4\x88\x74\x09\x87\xC0\xA4\xAD\xA4\xAA\xCC\xBD\x77\x41\xB3\xAE\x9F\x93\x42\x40\x04\x53\xB0\x02\xB5\xD8\x95\xBA\xB4\xB5\xDC\x97\xBB\xB6\xB7\xDD\x99\xB1\xBB\xB7\xE2\xA0\xB6\xB9\xB9\xD6\x93\x7C\x9B\xBA\x69\xB8\xA1\x9F\xBB\xF0\xBE\x81\xB1\x7E\xCB\xBD\x77\x09\xB1\xB2\x99\xA7\xAF\xA6\x30\xB3\xBB\xAC\xBE\xC0\x68\x06\xAE\x93\xD1\xA5\x80\xB4\xC0\xE2\x69\x08\xB3\xBE\xF3\x97\x83\xB3\xC1\xA0\xAA\x08\xC0\xBF\x46\x85\xC5\xBD\x6E\x2B\x13\xC9\xBD\xB3\xC9\xB6\x76\xC3\xC6\xB1\xAC\x0A\xC7\x82\x1D\xC2\xBE\xBF\xC8\x28\xEC\x8C\xC2\xB2\x31\xAD\x09\xC8\xC8\xFF\x94\xC5\xA2\xBB\x89\x5F\xCE\x0B\xCB\x31\xF1\xA5\xC8\xBD\x0F\xF0\xC4\x43\x0B\x38\xCB\xCE\x91\x45\x01\x71\x08\x7C\xD1\x00\x08\xD8\xD1\x62\x4A\xD4\x4E\xD1\x40\x4D\xD0\xDF\xD1\xD2\x53\xD1\xD4\xD6\xD4\x58\xD7\xDA\xD6\xD5\x5C\xD5\xD4\xCE\xC7\x5F\xEF\xA7\xC8\xC4\x3E\xE4\xDF\xAF\xCA\x60\xFD\xC9\xCF\x76\x32\x2F\xCB\xCE\xC3\x63\xF5\x83\x0D\xD0\x66\xE1\xDC\xCD\xC3\x9C",
			"\xAA\xDF\xC8\x0D\x6E\xE8\xD6\xC9\xCD\x74\xE5\xD2\xE3\xDB\x79\xF1\xDB\xD9\xE0\x67\xC4\xC6\xDF\xC7\x87\xF5\xD1\x41\x0D\x03\xCD\x96\xC6\xDE\x64\xF6\x08\xE2\x73\x7E\xF7\xD0\xE2\xE3\x35\xB7\x01\xE2\x96\x48\xC6\xD1\x8D\xD7\xA3\xDE\xD9\xD4\xE9\x5B\xE6\xE9\xEB\xE9\xAA\xE8\xEE\xEA\xDD\x06\xB8\x00\xED\xBC\xB4\xE0\x93\xE6\xE1\x16\x57\xEC\xE5\xB4\x70\xEC\xC8\xEF\xEE\x7A\x99\x4C\xC5\xE6\xBD\xE6\xA2\xE1\x8E\x1C\x40\xF1\x7C\xE1\xFD\x9B\xE7\xF2\xEE\x3A\xC4\xF5\xE2\xF3\xDB\x5F\x4A\xF3\xF3\x2A\xCA\xE2\xCD\xA4\xBF\xF1\xAD\x0C\xF4\x39\xB5\xE2\x49\x40\xE3\xC0\x05\xFB\xF9\x23\x64\xF9\xFA\xF9\xEB\xE8\xFA\xFB\xFB\xEC\xF0\xFE\xF9\xFC\xF4\xF3\xF6\xFF\xFA\xCC\xF2\xB4\xF5\xE0\x3F\x3D\xDA\xF4\xDE\xCD\x66\x79\xE3\x58\x79\x38\x20\x11\x74\x49\xB7\x7B\x7C\x72\x25\x27\x7B\x01\xB5\x3A\x7A\x01\x82\x6E\x03\xE0\x73\x77\x08\x9A\x72\x80\x14\x97\x7A\x96\x42\x04\x20\xD1\x73\x5C\x83\x01\x20\x84\x00\x22\x89\x30\x11\xA6\x84\x20\x27\x81\x84\x0A\xAB\x8A\x85\x16\xA3\x84\x85\x2F\x8E\x85\x0A\xB1\x84\x87\x19\xB6\x80\x86\xF9\x71\x48\xE5\x04\x83\x09\x0C\x80\x85",
			"\x62\x8B\x77\x62\x0F\xB9\x69\x86\xEE\x4A\x84\x80\x13\x80\x57\x06\x9D\x88\x3F\x1B\xB1\x46\x89\x35\x90\x84\x14\xD3\x82\x8B\x2A\xB2\x86\x8A\x51\x8E\x85\x11\xB9\x5D\x7B\x24\x88\x8A\x68\xB4\x3E\x1E\x60\x7B\x12\x31\x7E\x3E\x1F\x01\x00\x25\x23\x63\x29\x3B\x8D\x36\x9A\x34\x8D\x6F\x86\x32\x6A\x2C\x30\x00\xC0\x00\x05\x39\x6E\x9F\x31\x1E\xF0\x8A\x8F\x38\x89\x38\x8F\x7E\x9D\x8E\x20\x84\x2C\x33\x3D\xAE\x8D\x30\x6A\x83\x91\x40\x28\x31\x20\xC9\x06\x96\x8F\x88\x99\x36\x22\x80\x08\x33\x47\x92\x90\x8E\x95\x21\x21\x42\x01\x28\x90\xC8\x21\x31\x20\xA3\x3C\x90\x41\x26\x31\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
