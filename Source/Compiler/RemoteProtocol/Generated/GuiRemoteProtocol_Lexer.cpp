/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocol_Lexer.h"

namespace vl::presentation::remoteprotocol
{
	bool GuiRemoteProtocolTokenDeleter(vl::vint token)
	{
		switch((GuiRemoteProtocolTokens)token)
		{
		case GuiRemoteProtocolTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* GuiRemoteProtocolTokenId(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"VAR",
			L"STRUCT",
			L"MESSAGE",
			L"REQUEST",
			L"RESPONSE",
			L"EVENT",
			L"BOOLEAN",
			L"INTEGER",
			L"FLOAT",
			L"DOUBLE",
			L"STRING",
			L"CPP_NAME",
			L"ATT_NAME",
			L"NAME",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"OPEN_ARRAY",
			L"CLOSE_ARRAY",
			L"OPEN",
			L"CLOSE",
			L"COLON",
			L"SEMICOLON",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenDisplayText(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			nullptr,
			nullptr,
			nullptr,
			L"{",
			L"}",
			L"[",
			L"]",
			L"(",
			L")",
			L":",
			L";",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenRegex(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"(::[a-zA-Z_][a-zA-Z0-9<>]*){1,}",
			L"@[a-zA-Z_][a-zA-Z0-9]*",
			L"[a-zA-Z_][a-zA-Z0-9]*",
			L"/{",
			L"/}",
			L"/[",
			L"/]",
			L"/(",
			L"/)",
			L":",
			L";",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	void GuiRemoteProtocolLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1384; // 13454 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 104;
		static const vl::vint dataSolidRows = 5;
		static const vl::vint dataRows = 6;
		static const char* compressed[] = {
			"\x8E\x34\x00\x00\x60\x05\x00\x00\x4E\x00\x01\xA9\x01\x84\x81\x80\x14\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x87\x86\x80\x83\x81\x02\x84\xB0\x04\x89\x1C\x82\x1C\x8F\x04\xBB\x21\x84\x8C\x1C\x90\x82\x1F\x27\x84\x80\x2A\x94\x81\x20\x82\x2D\x04\xDB\x31\x84\x8D\x2C\x98\x83\x2F\x37\x84\xA1\x3A\x94\x82\x31\x9E\x82\x63\x40\x84\x84\x33\xA4\x81\x32\xA3\x04\xE6\x09\xA4\x87\x34\xA4\x82\x34\x4F\x84\xA9\x32\xA4\x82\x34\x83\x35\x04\xEC\x19\xA4\x8D\x34\xAC\x82\x37\x5F\x84\xAF\x22\xB4\x80\x39\xB2\x82\x71\x68\x84\x92\x3B\xB4\x83\x38\xB7\x04\xF4\x31\xA4\x85\x3C\xB8\x82\x3B\x77\x84\xB7\x24\x8A\x3C\x83\x3C\xBF\x04\xFD\x01\xC4\x84\x0C\xC2\xC3\x80\x85\x81\x91\x04\x82\x0C\x83\x7F\xC7\xFF\x0C\x81\x93\x0E\xC0\xCA\xCB\x05\x04\x8C\x04\x8F\x04\x80\x09\xCD\xCF\x01\x86\x20\xC0\x09\x81\x81\x02\x82\x08\x23\xDA\xC1\x87\x02\xD4\x83\x01\xAE\x81\xAB\xC0\x03\xDC\x00\x82\x01\xB1\x80\x01\x03\xDF\x81\x82\x07\xCA\x96\xC1\xC2\xE3\xE6\xCE\x08\xE0\xE2\xC8\xC6\xC1\x88\xE0\xCD\x08\x82\xE5\x00\x50\xD2\xEF\xE4\xE9\x83\xE8\xEB\xD5\xD1\xD9\xF7",
			"\xEA\xE8\xEE\xEF\xEE\xE0\xDC\xCC\xE3\xF4\xF0\xC8\xE9\xF2\xC3\xE7\xE3\xFC\xEC\xF3\xEE\xF7\xEF\xED\xF0\xEF\xE0\xF7\x0B\xFA\xF4\xF4\xF8\xC1\xF7\xF9\xFF\x7B\xFC\xE3\xF8\xE0\x58\x06\x7F\x80\xF2\x45\x81\x78\x81\x07\x8B\x7C\x7F\x82\xFE\x78\x7D\x82\x70\x00\x90\x79\x04\x82\x11\x94\x86\x86\x81\x0B\x8C\x87\x71\x7E\x0F\xBA\x77\x85\x82\x20\x95\x86\x82\x88\xE0\x5A\x09\x75\x86\xFC\x5D\x84\x7A\x8A\xE6\x5F\x84\x88\x89\x1B\x2E\x88\x80\x8A\x1C\x9B\x8E\x82\x8D\x10\xB2\x83\x88\x82\x1C\x3A\x81\x8B\x89\x34\xA8\x7C\x88\x73\x43\xBD\x7E\x8C\x89\x1D\x07\x9E\x8D\x90\x42\xB8\x85\x79\x91\x2F\x8A\x96\x82\x07\x52\xA0\x8C\x90\x7F\x1F\x0E\x97\x97\x96\x5C\x9D\x9E\x97\x97\xE5\x52\x4A\x82\x70\x62\x80\x05\x9B\x99\x13\x41\x48\x9A\x9A\x69\xA6\x9D\x9B\x9A\x6E\xAC\x92\x9D\x9C\x74\xB0\x96\x9E\x96\x5D\x85\x9F\x7C\x9E\x8F\x51\x9B\x8F\x9F\x3F\x80\xAE\x9C\x00\x60\x85\xA6\xA3\xA1\x88\x89\xAA\xA3\xA2\x8C\x8D\xAE\xA3\xA3\x90\x91\xA2\xA7\xA4\x94\x95\xA6\xA7\xA5\x98\x99\xAA\xA7\xA6\x9C\x9D\xAD\xA5\x08\x04\x60\xA1\x42\xA8\x00\x24\xAE\xA7\xA9\xA8\x86\x93\x99\x8A",
			"\x7C\xAA\xA1\xA3\xAB\x83\xA4\x82\x0B\x92\x89\xBA\x99\x79\xAB\xB1\x95\x99\xAE\xA0\xAD\x97\x96\xAD\x8E\xAB\xBB\x9C\xAF\xB0\xB0\x88\x83\x08\xAD\x88\xBF\xAE\x85\xB0\xB7\x84\xBB\xAD\xB1\x06\xA4\x0F\x86\xA2\xCA\x85\x78\xAE\xAE\xD8\x81\x45\x09\x76\x26\x13\xB5\xAD\xAF\xCD\x84\xAB\x78\x82\x27\x19\xB0\xB7\xB9\xE2\x5F\xBC\xB1\x93\xEB\x8B\xB8\xBA\xB9\x15\x6F\xB0\xA0\xB5\xE0\x80\xB2\xB8\x91\xE6\x8F\xB4\x88\x46\xAF\xB4\xBD\xBB\x8A\xD7\x8E\xB6\xBA\x0A\xF9\xB5\xB4\x8D\xB5\x2D\xBF\xB9\xC2\xBC\x0C\xFA\xB9\x77\x0A\xF3\x69\xAF\x3C\x0B\x4E\x94\xC1\x42\xC5\x00\x18\xCA\xC4\x41\x1B\xD7\xCC\xC7\xC7\x1E\xE1\xC9\xC4\xC8\x23\xE2\xCD\xC5\xC9\x28\xE7\xC8\xC6\xA2\x2D\x06\xC6\x65\xCB\x0A\xCF\x60\xCC\x00\x33\xF5\xC4\x42\xCD\x01\x78\xC4\xCF\xCD\x3C\xF9\xCD\xCF\xCE\x3E\xC1\xD0\xD3\xD0\x3A\xFA\xC4\x78\xA9\x48\xE1\xAE\xCA\xC4\x4C\xC9\xBB\xD1\x9F\x01\xCD\xC5\xC2\xC0\x18\xAA\xB7\xBC\xAB\x31\xEE\xAE\xC1\x40\x2F\x13\xD0\x8A\x0B\x11\xD6\xD8\x88\x94\x5E\xDB\xD0\x7B\x46\xC4\xBE\xB7\xD5\x8D\x59\xE6\xDE\xDB\x87\x31\x21\xDE\xD1\xD6\xC2\xAB\xD1\xBB\xDB\x54",
			"\xC0\x02\x0E\xB9\x6A\xE3\xD1\xD4\xDE\xAF\xB3\x05\xDB\xD3\x58\xF6\xDC\xBA\xE1\xEE\x80\xE0\x74\x0D\x83\xD5\xD3\xDC\xE2\x00\xED\xDD\xE2\xD4\x79\xC8\xCA\x84\xDD\xE1\xA4\x75\x0F\xE4\x8A\xF3\x82\xD9\x86\x64\xC1\x46\x0C\xE7\xA4\xD8\xE1\x93\x0D\x04\x78\x07\x70\xEA\x01\x6C\xE7\xD6\xEB\xE4\x6E\xE2\xEC\x41\xB3\xED\xE4\xEF\xED\xB6\xF9\xE0\x01\xED\xBB\xF8\xED\xEE\xEE\xBC\xC1\xFE\xEC\xCB\x84\xF3\xC4\x79\xD1\x3F\xC8\xF2\xD2\xF2\x44\xC9\xFE\xF3\xF2\xCF\xC3\xDD\xDC\xE8\x7F\xDC\x45\xE8\xE5\xFD\x9F\xE7\xE4\xE4\x0B\xDD\xE6\x83\x47\x95\xDE\xEF\xE2\xDF\x59\xE2\x41\xFB\xF9\xD8\xC0\x83\xF7\xF6\x91\xEF\xA5\x48\xFA\xDE\xD6\x9A\xF5\xE1\xED\xF1\xF0\x81\x0F\x5E\xEB\xF4\xFF\xB8\xF0\xD7\xF8\x4B\xBC\xF3\x6C\x6C\xF7\x50\x6D\x7F\x02\xA9\x7C\x70\x02\x84\x7F\x00\xDA\x67\x7B\x67\x7F\x02\x7C\x87\x56\x72\xAB\x75\x7E\x6B\x95\x06\x84\x44\x8A\x4E\x76\xEA\x2B\x5C\x76\xCB\x30\x73\x3C\xC2\x60\x7A\xEF\x21\x8F\x77\x12\xA4\x87\x84\x23\x89\x86\xE9\x5B\x4E\x25\x15\x8D\x6F\x85\x37\x4E\x87\xC2\x14\x87\x82\xAF\x42\x08\x82\x86\x52\x81\xE8\x0C\x63\x09\x06\x9E\x5B",
			"\x7C\xD4\x72\x71\xDE\x44\x0E\x87\xB4\x41\x81\x86\x0B\x96\x7E\xB9\x45\x0F\x87\x08\x84\x73\x87\x4A\x9F\x3A\x11\x13\x7A\x7F\x04\xBC\x7F\x80\x35\x88\x7D\x15\xC8\x84\x86\x2C\x9E\x8F\x59\x5B\x87\x71\x17\xDC\x37\x09\x22\x98\x7A\x62\x48\x0E\x49\x1A\x81\x2B\x8C\x00\x2D\x8F\x8D\x04\x30\x8C\x1B\xF1\x84\x8F\x39\xB6\x8E\x8D\x75\x98\x8F\x1D\xF2\x8A\x8F\x3E\xBC\x8D\x8D\x61\x8F\x49\xF5\x59\x8F\x8B\x26\xB9\x87\x89\x83\x85\x90\x21\x98\x87\x88\x31\x97\x88\x40\x49\x06\x8C\x18\x8D\x92\x90\x21\x8A\x97\x92\xD0\x2A\x08\x0E\x85\x5A\x87\x44\x91\x8C\x61\x4B\x06\x90\x27\x88\x96\x93\x4F\xA6\x90\x81\xF8\x2C\x09\xEA\x47\x3A\x95\x80\x2D\x97\x6A\xAF\x84\x3F\x2B\xB3\x94\x20\x5A\xAE\x95\x96\xB8\x97\x96\x2E\x80\x06\x96\x5E\xB9\x96\x97\xBB\x9D\x96\x30\xBF\x91\x91\xF6\x63\x8A\x92\x7C\x74\x92\x31\x8F\x98\x98\x42\x85\x9F\x8A\xC7\x9F\x39\x13\x4D\x9C\x60\x45\x6F\x93\x83\xB0\x84\x98\x64\x31\x93\x3D\x61\x81\x9F\x97\xDE\x80\x9A\x38\xE1\x94\x9C\x70\xA6\x9A\x86\xEC\x61\x89\x12\xD4\x91\x7E\xF2\x3E\x1F\x1E\xFF\x1F\x0C\x64\x7E\x1D\x1F\x1F\x00\x25\x20\x01\x3D",
			"\x34\x00\x7A\x9C\x9E\x88\x39\x9E\x9F\xFB\x80\xA1\x62\x00\x05\x3F\x7F\xBE\x33\x33\x9D\x24\x23\x62\x01\x2D\x31\xC9\x04\x26\x39\xDF\x3D\x9E\x41\x81\xA3\xA2\x89\x94\xA7\xA2\xFA\x85\xA0\x6D\x59\x35\x20\x8B\x9E\xA0\xA0\xAD\x35\xA0\x41\x18\x32\x36\x80\x9F\xA2\xA4\xA1\x26\xA7\x48\x84\x2A\xA3\x93\x98\xA4\x20\xA7\x21\x21\x6A\x13\xAA\xA3\xDD\x01\x22\x32\x2F\xB3\xA1\x69\x00\x04\xA4\x00\x38\x31\x20\xB0\x33\xA1\x4F\xB6\x31\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
