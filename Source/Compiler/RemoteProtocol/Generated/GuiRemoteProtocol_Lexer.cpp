/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocol_Lexer.h"

namespace vl::presentation::remoteprotocol
{
	bool GuiRemoteProtocolTokenDeleter(vl::vint token)
	{
		switch((GuiRemoteProtocolTokens)token)
		{
		case GuiRemoteProtocolTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* GuiRemoteProtocolTokenId(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"VAR",
			L"ENUM",
			L"UNION",
			L"STRUCT",
			L"CLASS",
			L"MESSAGE",
			L"REQUEST",
			L"RESPONSE",
			L"EVENT",
			L"BOOLEAN",
			L"INTEGER",
			L"FLOAT",
			L"DOUBLE",
			L"STRING",
			L"CHAR",
			L"KEY",
			L"COLOR",
			L"BINARY",
			L"CPP_NAME",
			L"ATT_NAME",
			L"NAME",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"OPEN_ARRAY",
			L"CLOSE_ARRAY",
			L"OPEN",
			L"CLOSE",
			L"COLON",
			L"SEMICOLON",
			L"COMMA",
			L"QUESTION",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenDisplayText(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"union",
			L"struct",
			L"class",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"char",
			L"key",
			L"color",
			L"binary",
			nullptr,
			nullptr,
			nullptr,
			L"{",
			L"}",
			L"[",
			L"]",
			L"(",
			L")",
			L":",
			L";",
			L",",
			L"?",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenRegex(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"union",
			L"struct",
			L"class",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"char",
			L"key",
			L"color",
			L"binary",
			L"(::[a-zA-Z_][a-zA-Z_0-9<>]*){1,}",
			L"@[a-zA-Z_][a-zA-Z_0-9]*",
			L"[a-zA-Z_][a-zA-Z_0-9]*",
			L"/{",
			L"/}",
			L"/[",
			L"/]",
			L"/(",
			L"/)",
			L":",
			L";",
			L",",
			L"/?",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	void GuiRemoteProtocolLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1773; // 20698 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 237;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\xDA\x50\x00\x00\xE5\x06\x00\x00\x6C\x00\x01\xAE\x01\x84\x81\x81\x16\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x88\x14\x88\x83\x14\x17\x84\xAC\x1A\x84\x80\x18\x83\x1C\x04\xBA\x21\x84\x8B\x1C\x90\x82\x1E\x27\x84\xBE\x0A\x94\x87\x1D\x96\x82\x40\x30\x84\x81\x24\x82\x2C\x83\x2D\x37\x84\x9D\x3A\x94\x87\x2D\x9E\x82\x61\x40\x84\x82\x33\xA4\x83\x30\xA3\x04\xE4\x09\xA4\x85\x34\xA4\x82\x33\x4F\x84\xA7\x32\xA4\x80\x35\xAA\x82\x69\x58\x84\x8A\x3B\xAC\x83\x34\xAF\x04\x80\x81\x82\xB0\x05\x34\x82\xB3\x01\xEE\x04\x8A\xB1\x87\x34\x82\xB7\x01\xF0\x04\x92\xB1\x81\x38\x82\xBB\x01\xF2\x04\x9A\xB1\x83\x38\x82\xBF\x01\xF4\x04\x82\xC1\x85\x38\x82\xC3\x01\xF6\x04\x8A\xC1\x87\x38\x82\x3C\x04\xF9\x11\xC4\x8A\x3C\xC8\x83\x3D\x97\x84\xBD\x3A\xC4\x81\x0D\xCF\xCF\x01\x9E\xC1\x94\x04\x85\x08\x83\x0B\x04\xFF\x6A\xDF\x7F\x81\x82\x0B\xD4\xAB\xB1\xD8\x04\x8E\x04\x83\x06\x82\x12\x04\x93\x16\xDC\xD9\x80\x04\x82\x05\x04\x8B\x04\x82\x05\x85\x81\xDB\xC7\x8A\x89\xE1\x8C\x05\xDC\x00\x03\xCE\xC8\xC0\x12\xE2\xEF\x00\x82\x02\xCE\x83\x04\x81",
			"\x01\xEE\xE4\x08\x82\x11\x30\xF1\xC3\xF4\xF5\xF2\xF3\x0D\xE2\xE6\xEA\xF1\xD8\xF1\x83\xF2\x82\x1A\x04\xAD\xE0\x03\xFD\xFA\xF9\xFB\x01\xF6\xF9\xF8\xF4\xFC\xFE\xFD\xFE\xFB\x41\x80\x83\x80\xFF\x45\x89\x7B\x7A\x08\x89\x8B\x6B\x7C\x0A\x88\x8C\x81\x79\x06\x82\x81\x84\x81\xFE\x55\x82\x80\x07\x16\x94\x82\x84\x7F\x1D\x19\x8F\x81\x83\x20\xAA\x7F\x85\x88\xE3\x63\x8C\x7A\x87\x28\x9B\x8A\x8A\x86\x03\x9E\x09\x88\x8B\x13\x93\x84\x8B\x8C\x25\x87\x84\x8E\x89\x0B\xAF\x81\x8E\x8E\x3C\xAB\x8F\x7F\x07\x3D\x83\x84\x8F\x90\xFF\x38\x83\x8E\x91\x45\x81\x93\x85\x08\x2F\x92\x4B\x8A\x08\x4A\x91\x9E\x78\x91\x47\xB6\x85\x97\x94\xE4\x7B\x82\x83\x08\x52\xB0\x8D\x96\x96\x5E\x98\x94\x94\x88\x48\xA1\x88\x90\x98\xF3\x64\x0F\x97\x9A\x3E\x9D\x93\x98\x89\x65\xA4\x96\x95\x92\x6D\xB5\x9C\x8A\x09\x5D\xA5\x0C\x99\x98\x42\xAF\x92\x9E\x98\x43\xA7\x9B\x9C\x9A\x19\xA7\x03\xA1\x90\x7E\xBF\x90\x03\x9B\x82\xB6\x94\xA2\x9D\x15\x4E\xA7\xA3\x8A\x89\x8D\x81\x9E\xA5\x73\x8F\xAC\x9E\xA6\xFF\x58\x42\xA7\xA7\x2C\x95\xAA\x83\xA5\xA3\x99\xA1\x92\x0A\x93\x9B\xA9\xAB\x7F",
			"\xA2\xA1\x8B\x0B\x9C\xAD\xB1\xA2\xAF\xAC\xB4\xB5\xA5\x7B\x46\x80\xAB\x68\xAC\x00\xBB\xBD\xAC\x45\x40\xBE\x80\xBF\xAC\xAF\xC3\x81\xB4\xB2\xB0\xC8\x87\xBA\xB2\xB1\xCC\x85\xB3\xB2\xAD\x35\xB9\xA7\x97\xA2\x10\xAB\xA6\xB4\xA8\x9A\x90\xBA\xB7\xB6\xDC\x9D\xBE\xB7\xB7\xE0\xA1\xB2\xBB\xB8\xE4\xA5\xB6\xBB\xB9\xE8\xA9\xBA\xBB\xBA\xEC\xAD\xBE\xBB\xBB\xF0\xB1\xB2\xBF\xBC\xF4\xB5\xB6\xBF\xBD\xF8\x83\x97\x42\x41\x04\x7B\xB0\x02\xBF\xF9\x81\xC0\xBC\xA9\x09\x8D\xAA\xA8\xB6\xD7\x80\x03\x40\xC2\x94\x9C\xB4\xC2\x83\xA6\x8C\xC7\xC3\xC4\x9C\xBB\x9D\xB7\xC3\xEB\x46\xC5\xC6\xC4\x1B\xFC\x9F\x08\xA2\x0E\xF0\xAA\xA3\x7B\xA0\x9E\x4C\xC5\xC2\x1D\xD7\xC2\xC8\xA6\xD2\xB4\x94\xC7\x8B\x31\x28\xC9\xAA\xCA\x2D\xE6\x91\xC7\xCB\x27\xF9\xC0\x02\x0C\x33\xE1\xC5\xCF\xC8\xD5\x81\x43\x0E\xCC\x3A\xDD\xC2\x8E\xCF\xD4\x94\x96\xC0\x0D\x44\xF8\xCE\xD1\xB6\x48\xCC\xA7\xCE\xD1\x41\xB5\x0D\xD0\x98\x34\xC9\xD4\x92\xC6\x57\xE9\xA6\x0E\xC5\x51\xE3\x9C\xD5\xD1\x09\xF7\x0C\x7C\x0E\x60\xDB\xB8\xC6\x88\x53\xDD\xD6\x9C\x48\x64\xF6\x99\xD6\xD4\x2D\xD4\xD1\xDC\x00\x22",
			"\x77\xD8\xD5\xD8\x4A\xED\xDA\xDE\xDB\x00\x25\x42\xC7\xDC\x62\xFE\xDF\xD1\xAA\x28\x7F\xDD\xC2\xDA\x2B\xE5\xA5\xDC\xE0\x76\xFC\x9D\x0C\xC8\x8C\xFF\xCC\xCA\xD6\x27\x8A\xE7\xE2\xE6\xF3\x6B\x42\x81\xBE\x2E\x6D\xC1\xE8\x00\xA3\xE5\xEF\x49\x40\xA6\xE8\xE7\xE8\xE9\xAB\xE9\xEC\xEA\xEA\xB0\xEF\xE2\xEE\xEB\xB4\xED\xEB\xE9\xB7\x31\x56\xEA\x81\xEE\x98\xEB\x6C\xEF\xEF\x32\x41\x40\xF2\xF0\xC1\xC0\x03\xF2\xF1\xC5\xC7\xFA\xF1\xF2\xCC\xC4\xFE\xF0\xF2\xCF\xFC\xE9\x82\xBF\xD4\xFD\xBD\xE2\xC0\xD8\xE0\xBB\xD8\xC9\xBD\xEA\x61\xE7\xF7\x90\xD7\xF5\xA7\xF6\x41\xDD\xFE\xC8\xF8\xA0\xB4\x4C\xE7\x8B\x84\xFD\xDF\xE3\xFA\xA0\x82\x11\xFA\xEE\xA2\xA4\xF9\x96\xE1\xE8\xCE\xD3\x10\xE0\xED\xDB\xD8\xFF\x9E\x45\x13\x7C\x00\x44\x04\x72\x6D\x76\x79\x5A\xE6\x79\x7E\x02\x99\x46\x09\xB4\x46\x82\x7C\x19\x7F\x7C\xFC\x1B\x70\x01\x23\x3D\x65\x72\xE6\x76\x67\xFB\x14\x89\x7E\x24\x3C\x7C\x6F\xFE\x7B\x83\x02\x93\x89\x08\x07\x90\x5F\x80\x99\x69\x82\x00\xA3\x80\x00\x25\x05\x87\x84\x10\x8C\x6E\x08\xAB\x89\x43\x25\x0D\x6D\x7F\x81\x52\x80\x07\x99\x4C\x08\x1A\x9F\x70",
			"\x84\x39\x9B\x81\x13\x3E\x8B\x87\xC1\x40\x8F\x46\x3A\x8C\x86\x12\xAF\x86\x56\x14\xB9\x43\x83\x4E\x04\x8B\x12\x8B\x7F\x80\xFA\x50\x63\x86\x01\x2F\x0A\x14\x9F\x88\x82\xBA\x6A\x83\x82\x53\x94\x81\xB7\x50\x04\x21\x28\x29\x3C\x8C\x01\x28\x8E\xF9\x6A\x86\x3C\x35\xAE\x8C\x20\x6F\x89\x8C\x1C\xF3\x82\x8F\x3A\x80\x01\x8E\x77\x94\x8D\x1E\xF6\x88\x8F\x3E\xBA\x8E\x8F\x76\x98\x75\x0C\xE6\x32\x7B\xF2\x0B\x79\x7A\xCD\x70\x7A\x22\x87\x9B\x91\x44\x8C\x97\x91\x8E\x83\x91\xE1\x56\x81\x82\x2C\x85\x8F\x92\x61\x98\x84\x12\x96\x91\x8D\xFC\x52\x0E\x4D\x47\x93\x58\xF7\x1D\x99\x43\x29\x02\x82\x93\xA2\x85\x7F\x7F\x54\x0B\x8B\x09\xA8\x90\x4E\x49\x80\x71\x15\x27\x91\x94\x58\x9C\x95\x95\x7C\x56\x0A\x09\xCD\x82\x93\xFB\x77\x90\x8C\xB8\x8F\x96\x06\xDF\x88\x93\xA6\x57\x0F\x82\x55\x99\x80\xD0\x3E\x90\x00\x2C\x38\x94\x94\x94\x9E\x4E\x13\xDE\x71\x96\x01\x59\x0F\x99\xBB\x95\x57\x34\xAE\x63\x94\x5C\xB6\x20\x98\xD1\x9E\x8A\x38\xAA\x98\x9A\x70\x8A\x99\x56\xDB\x83\x6D\x31\x9A\x78\x27\xBB\x42\x9B\x99\x08\x90\x9B\x3A\x80\x0C\x0A\x50\x9D\x8B\x92\xC4\x92",
			"\x9F\x4E\x66\x97\x69\x6D\x6A\x8E\x8C\x62\x58\x8D\x1B\xF3\x40\x91\x3D\x86\xA5\xA0\x08\xBF\x8E\x42\xFC\x8B\xA1\x83\x8D\xA2\xA0\xE0\x5E\x09\x2F\xD9\x74\xA3\x82\x53\xA1\x85\xDD\x9C\x9D\x30\xB5\x93\x99\x8C\xB3\x9A\x9E\x50\x77\x9E\xFB\x79\x95\x9D\x89\x7E\x26\x88\x22\xA1\x84\x49\x92\x60\x0D\x92\xBB\x69\xA5\x41\x8B\xA7\x47\xAE\xA7\xA3\x4D\xA7\x9E\x71\x32\xA0\xA4\x11\xEF\x97\x72\x8F\x9A\x51\x28\x1A\xAE\x9C\x47\xF0\x99\x84\x9D\xBA\x64\x28\x3A\x7C\xA4\x4E\xBE\xA2\x81\xA3\x01\xAF\xA6\xF5\x75\xA4\x35\xBF\x93\xA7\xA7\xB3\x3A\x29\x3F\x90\xA6\x4D\xCC\xA6\xAA\x5A\x9A\xA9\x95\xCC\x80\x4D\x53\x5D\xAA\x73\x7C\x50\x2D\x65\x67\xA0\x01\x5A\xEB\xA1\x2B\x80\x2C\xAE\xAD\x6D\xAA\xAD\x5C\xEF\xA2\xAE\xB8\xB6\xAD\xAE\x78\xB4\xAE\x5E\xF3\xA1\xAE\xA5\x96\xA4\xAA\x46\xB5\xA9\xA8\x43\xAD\xA6\x72\xA4\xAA\xB0\xFD\x89\x9B\x38\xE1\xAF\x45\xA9\x07\xB1\x7F\x7E\xB7\x89\x4E\xB4\xAB\x44\xAB\x28\xA2\xB1\xF8\x9C\xA8\x62\xFB\x49\x2B\xA4\x84\xB3\xA9\x86\xBB\xB3\x63\xFC\x31\xB3\x4A\x93\xB3\xB4\xE6\x9D\x58\x57\x01\x20\xA0\xAD\x6B\xB0\x00\xAF\xA6\x3D\x6C\xE5",
			"\x3F\xB5\xDA\x9D\x29\x20\xB6\xB8\xB7\x6D\xB0\xBB\xB7\xDC\xBC\xB2\xB7\xC0\xBF\xB6\x70\xBE\xB4\xB9\xDE\x86\xB9\x9C\x99\xA9\xB8\x63\xA8\xB2\xB5\x3E\x5F\xAE\x96\xA7\xAD\xB9\x60\xDB\x9D\xA2\xE5\xB1\x9F\x45\x5F\x2C\xB9\xE4\x2A\xB5\x8D\xF4\x3E\xB2\xB6\x73\x45\xB9\x70\xE2\xB3\xB9\xE3\xA5\xBB\xBC\xE6\xA4\xBE\x7A\xE6\xB5\xB4\x19\x91\xBB\xBA\x5C\x8A\x3E\x3F\x3F\x1B\x35\x7B\x31\x35\x1F\xF4\xAF\x00\x59\x05\x24\x35\xD1\x04\x25\xBF\x00\x00\xC2\x80\xFF\xB4\xC0\xFF\x86\xC1\xC0\x05\xC3\x42\x93\x08\xC1\x20\xD3\x2E\x37\x34\x04\x33\x35\x68\x70\x34\x20\x0C\x41\x25\x43\x01\x2E\x45\x40\x40\x47\xC1\x01\xDD\xC1\xC1\x1E\xCC\xC2\x88\xA1\xC4\xC4\x10\xD3\x21\x20\xBB\x3B\xC1\x41\x26\xCF\xC3\x16\xE3\xC4\xC5\x2F\xC1\x20\x43\x2E\xC2\x3B\xDC\x28\xC3\x3B\x30\xC5\xC5\x40\x35\x3E\xC5\x10\xC9\x25\xC7\xB8\x27\xC4\x00\x3F\x31\x21\xE2\x2E\xC0\x3B\x01\x3F\x38\x90\x87\xC3\x39\x03\xCB\xC2\x3B\x01\x2D\x35\x8C\xA2\xC1\x3C\xE6\x01\xC9\x20\xC1\x21\x20\x74\x07\xC6\xC6\x00\x16\x39\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
