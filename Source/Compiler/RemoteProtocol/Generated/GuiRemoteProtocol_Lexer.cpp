/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocol_Lexer.h"

namespace vl::presentation::remoteprotocol
{
	bool GuiRemoteProtocolTokenDeleter(vl::vint token)
	{
		switch((GuiRemoteProtocolTokens)token)
		{
		case GuiRemoteProtocolTokens::SPACE:
			return true;
		default:
			return false;
		}
	}

	const wchar_t* GuiRemoteProtocolTokenId(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"VAR",
			L"ENUM",
			L"STRUCT",
			L"MESSAGE",
			L"REQUEST",
			L"RESPONSE",
			L"EVENT",
			L"BOOLEAN",
			L"INTEGER",
			L"FLOAT",
			L"DOUBLE",
			L"STRING",
			L"CHAR",
			L"KEY",
			L"COLOR",
			L"CPP_NAME",
			L"ATT_NAME",
			L"NAME",
			L"OPEN_BRACE",
			L"CLOSE_BRACE",
			L"OPEN_ARRAY",
			L"CLOSE_ARRAY",
			L"OPEN",
			L"CLOSE",
			L"COLON",
			L"SEMICOLON",
			L"COMMA",
			L"QUESTION",
			L"SPACE",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenDisplayText(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"char",
			L"key",
			L"color",
			nullptr,
			nullptr,
			nullptr,
			L"{",
			L"}",
			L"[",
			L"]",
			L"(",
			L")",
			L":",
			L";",
			L",",
			L"?",
			nullptr,
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolTokenRegex(GuiRemoteProtocolTokens token)
	{
		static const wchar_t* results[] = {
			L"var",
			L"enum",
			L"struct",
			L"message",
			L"request",
			L"response",
			L"event",
			L"bool",
			L"int",
			L"float",
			L"double",
			L"string",
			L"char",
			L"key",
			L"color",
			L"(::[a-zA-Z_][a-zA-Z_0-9<>]*){1,}",
			L"@[a-zA-Z_][a-zA-Z_0-9]*",
			L"[a-zA-Z_][a-zA-Z_0-9]*",
			L"/{",
			L"/}",
			L"/[",
			L"/]",
			L"/(",
			L"/)",
			L":",
			L";",
			L",",
			L"/?",
			L"/s+",
		};
		vl::vint index = (vl::vint)token;
		return 0 <= index && index < GuiRemoteProtocolTokenCount ? results[index] : nullptr;
	}

	void GuiRemoteProtocolLexerData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 1604; // 18064 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 68;
		static const vl::vint dataSolidRows = 6;
		static const vl::vint dataRows = 7;
		static const char* compressed[] = {
			"\x90\x46\x00\x00\x3C\x06\x00\x00\x5E\x00\x01\xAE\x01\x84\x81\x81\x16\x82\x09\x08\x84\x8A\x0B\x84\x81\x06\x87\x04\xA0\x11\x84\x88\x14\x88\x83\x14\x17\x84\xAC\x1A\x84\x80\x18\x83\x1C\x04\xBA\x21\x84\x8B\x1C\x90\x82\x1E\x27\x84\xBE\x0A\x94\x87\x1D\x96\x82\x40\x30\x84\x81\x24\x82\x2C\x83\x2D\x37\x84\x9D\x3A\x94\x87\x2D\x9E\x82\x61\x40\x84\x82\x33\xA4\x83\x30\xA3\x04\xE4\x09\xA4\x85\x34\xA4\x82\x33\x4F\x84\xA7\x32\xA4\x80\x35\xAA\x82\x69\x58\x84\x8A\x3B\xAC\x83\x34\xAF\x04\xEC\x21\xA4\x8D\x34\xB0\x82\x37\x67\x84\xAF\x2A\xB4\x80\x39\xB6\x82\x71\x70\x84\x92\x33\xBC\x83\x38\xBB\x04\xF4\x39\xA4\x85\x3C\xBC\x82\x3B\x7F\x84\xB7\x24\x88\x3C\x81\x3C\xC3\x04\xFA\x09\xC4\x8B\x3C\xC4\x83\x3E\x8F\x84\x98\x12\xC4\xC9\x83\xC9\x80\x13\x04\x94\x04\x86\x0C\x83\x7F\xCF\xFF\x0C\x04\x95\x0E\xC8\xD2\xD3\x0B\x10\x81\x8E\x04\x81\x0C\x82\x08\x82\xAB\xAA\xC4\x86\x0D\x81\x81\x85\x80\x02\x04\x88\x10\xDC\xD9\x83\x03\xDE\x00\x0B\x00\xE4\x00\xE1\xD8\x00\xE3\xC6\x85\x04\x83\x05\xE4\x81\x01\xE6\xB2\x81\x8F\x04\x80\x0D\xD2\xD3\xEB\xD8\xD9\xDA\xFA",
			"\x06\xEA\xEE\xEE\xD3\xDC\x81\x9B\xE4\x89\x0C\x81\xF0\x00\xE7\xE9\xE6\xEB\xF1\x82\xF5\xF6\xF6\xE8\xF0\xEE\xF1\xFF\xF5\xF8\xFB\xFB\xF3\xF9\xDD\xFF\xEC\xFD\xFC\xD1\xF3\xFE\x7C\x70\x81\x76\xFA\x76\x75\x80\x7E\xF2\x49\x86\x7F\x06\x0A\x88\x86\x80\x7C\x1C\x0D\x83\x81\x80\x14\x9E\x73\x85\x85\xD7\x57\x80\x7A\x84\x1C\x8F\x8E\x86\x83\x20\x87\x83\x7D\x07\x1D\xA0\x88\x87\x89\x19\xBB\x78\x8A\x86\xFF\x65\x87\x7A\x07\x2E\xB1\x8F\x86\x88\x32\xA6\x88\x8B\x8D\x2C\xA7\x89\x8F\x3F\x34\xB6\x7F\x05\x8D\x3D\xA1\x80\x91\x8D\x37\xB8\x8A\x8A\x8E\x47\xBC\x83\x93\x8C\x4B\xB7\x72\x44\x93\x50\x82\x96\x7D\x91\x2B\x89\x95\x87\x8E\x41\x99\x9D\x91\x08\x4D\x9A\x93\x94\x95\x18\xBB\x87\x95\x92\x5E\x92\x96\x9B\x79\x22\x1D\x9A\x9B\x97\x60\x94\x82\x9A\x9B\x64\xAB\x97\x99\x8D\x23\x32\x91\x91\x9B\x63\xA2\x70\x98\x96\x76\x84\x44\x0A\x9C\x25\x3D\x91\x94\x9E\x70\xBA\x94\x94\x9F\x51\xA7\x76\x0A\xA0\x73\x89\xAD\x90\xA1\x27\xA7\x06\x94\xA4\x94\x95\xA6\xA7\xA5\x98\xA7\x85\x46\xA1\xD7\x5B\xA0\x02\xA7\xA0\x96\x41\x41\xA8\xA3\xA2\xAF\xA6\xA9\xA4\xA7\xA5\xAB\xAA",
			"\xAA\xAD\xA9\xAB\xAB\xA8\xA6\xA9\xA4\x81\x93\x81\x88\xA1\xA3\xB8\xA5\x9A\xAE\x9C\xB3\xBD\xAE\xAF\xAF\xC0\x81\xB2\xB3\xB0\xC4\x85\xB6\xB3\xB1\xC8\x89\xBA\xB3\xB2\xCC\x8D\xBE\xB3\xB3\xD0\x91\xB2\xB7\xB4\xD4\x95\xB6\xB7\xB5\xD8\x99\xBA\xB7\xB6\xDC\xA7\x88\x45\x40\xDF\x80\x01\xB9\xB8\xDD\xA5\xB7\xB7\x9B\xB6\xB1\x9E\xA3\xBA\xB9\xB5\x8A\x08\xA3\xC2\xA8\xBE\x7F\xAD\xBB\xAC\xB5\xBD\xBB\xEC\xB1\xB5\xAF\xBC\xEA\xB8\xBE\xBF\xBD\x41\xAB\x04\x91\xB0\xF2\xBD\x74\xBD\x89\x1B\x76\xBC\xA0\xC0\xF0\x7A\xBC\xA6\x91\x0F\xED\x8A\xC3\xC4\xFF\xB0\x77\x40\xC5\xF3\x4E\xC0\x01\x9B\x07\xD8\xCB\xC1\x89\x03\x5E\xC1\xC7\xAC\x05\xC2\x8D\xBC\xC3\x22\xE6\x9F\x08\x7C\x1E\x69\xCA\xC4\xC7\x27\xDF\xC4\xC5\x0C\x32\xF6\x80\xB1\xC9\xDF\x5D\xC5\xC5\xCA\xF7\xB2\x0F\xA0\xC1\xFB\x86\xC1\xCC\xCF\x72\xB3\x05\xCD\xC6\x40\xE3\xC1\x9B\xD0\x3B\xCD\xD8\xC8\x00\x34\x03\xC7\xCD\xD0\x26\xCA\xD7\x79\x0D\x47\xD9\xDE\xC9\xD2\x1B\xFB\x9C\xD3\xD3\x07\xB6\x0A\xD4\xAE\x2F\xDE\xD6\xD7\xD8\x60\xF2\x97\x0D\xC3\xDD\xB8\x09\x92\xDB\x01\x70\xD0\x02\xDC\x74\xC4\x45\xDD\xDC\x76",
			"\xF9\xD8\xDF\xDE\x73\xFA\xDD\xDC\xDF\x77\xFF\xD2\xE1\xE0\x84\xFE\xD2\xB0\x48\x4A\xD5\x88\xE1\xD7\xD8\x4B\xEE\xE3\x47\x90\xC1\x4F\xE2\xE4\x91\xC0\x03\xE6\xE5\x95\xD7\xEA\xE5\xE6\x9C\xD4\xEE\xE4\xE6\x9F\xFD\x73\xB9\x46\xE0\x94\xD6\xBB\xE9\xC5\xB8\xC6\x87\xD7\x68\xED\xE3\xA0\xD7\x30\xE7\xD4\xD0\xC5\x22\x73\xEE\xBD\xD9\x87\xAC\xE6\xED\x90\x25\x7B\xE5\x88\xEE\x45\xBA\xCF\xD1\x0F\xAE\xF7\x78\x49\xBE\xB0\xE6\xDC\xE1\x8A\xBE\xCD\xF0\x8B\x4A\x5B\xD3\xD9\xE1\xA1\xCB\xDB\x8E\xF1\xDA\xEC\xAE\x48\xF2\xF4\xD5\xD5\x92\xEE\xD3\x35\xF1\x47\xF6\xE9\x78\xAA\xE3\x7B\xF7\xD8\xE6\x94\x4F\xF8\xDB\xFF\xA6\xF8\xAD\xE8\xC5\xF9\xFB\xBD\xC0\xD0\xCD\xF7\x67\xE7\x42\x12\xFF\xFE\x1F\xB5\xFE\xF7\xFD\x4A\x56\x3F\x10\x7C\x70\x7C\x8A\x7E\x78\x49\xF1\x6C\x7D\x01\x80\x04\x08\x78\x49\x79\x77\x09\x8B\x83\xBD\x45\x05\x79\x03\x8B\x69\x82\xF3\x64\x83\x9D\x41\x56\x08\x82\x07\x0D\x3B\x1D\x81\x21\x08\x80\x83\x84\xED\x23\x87\x84\x04\x28\x86\x08\xA9\x8C\x85\x15\xAE\x80\x00\x2A\x90\x85\x0B\xB2\x8F\x85\x18\xB6\x83\x86\x37\x8F\x87\xE1\x64\x7A\x3B\xC5\x7D\x85",
			"\x73\xA0\x61\x8B\xE6\x1F\x73\x88\x21\x80\x8D\x88\x48\x87\x88\x0F\xCA\x71\x76\x00\x99\x82\x81\xE9\x76\x81\x9E\x4E\x8A\x82\x46\x48\x0F\x67\xDC\x6D\x8B\xF9\x20\x49\x09\x2A\x90\x8B\x89\x10\x80\x83\x14\xDB\x8F\x88\x5C\x4A\x0C\x80\x52\x94\x7B\x16\xCB\x0E\x8A\x09\x92\x6E\x7D\x60\x8C\x78\x15\xEC\x5C\x09\x36\x91\x8F\x81\xC1\x7A\x76\x1B\xEC\x5D\x09\x0A\xB8\x8E\x7E\x64\x96\x8C\x1A\xFF\x8F\x7F\x40\x9F\x8E\x79\x4E\x18\x88\x1C\xD3\x79\x5C\x0C\xA3\x6F\x09\x82\x8C\x91\xA5\x6F\x78\x3A\xE1\x51\x93\x8F\x36\x6B\x92\x18\xEA\x80\x7E\x4C\xA5\x88\x0A\x0E\x80\x5B\x08\x9F\x8C\x53\x18\xA6\x81\x49\x39\x94\x86\x2A\xA9\x9C\x94\x1C\xAE\x95\x86\xAF\x8B\x95\x2C\xA6\x95\x59\x28\x31\x88\x75\xB8\x9C\x5E\x24\xC2\x6E\x91\x43\x9E\x97\x8D\xBE\x54\x92\x1C\x86\x9F\x96\x05\x92\x0A\x91\xC1\x97\x96\xC4\x73\x8D\x69\x29\x17\x95\x4C\x69\x8D\x90\x33\xF7\x54\x0B\x67\x80\x9D\x57\xC2\x96\x7B\x34\xD6\x91\x4B\x2A\x3C\x54\x90\x08\x9B\x9A\x2F\xF3\x36\x0B\x41\x99\x8C\x89\x9D\x85\x8E\x3A\xDF\x97\x9D\x30\x84\x9F\x40\x57\x1C\x99\xD3\x51\x9A\x96\x71\x85\x9F\x9E\xF4\x7D",
			"\x58\x16\x49\x4B\x9F\x80\x3D\x98\x00\xFF\x81\xA0\x41\x02\xAE\x9F\x81\x86\xA5\xA0\x08\xA0\xA3\x41\x8A\xA9\xA0\x82\x8C\xA7\xA1\x0E\xB1\xA3\x42\xF4\x9C\x96\x7B\xAB\x9B\x9C\xBF\x60\x9F\x05\x96\xA2\x9F\x32\x94\xA5\x6A\x1C\xBF\x41\x16\x1D\xA8\x98\x6C\x8A\x98\x7F\x7A\x97\xA3\x02\xB6\x26\x80\x8D\xA3\x89\x9D\x24\xBF\x40\x4E\x51\x7A\x92\x2D\xB0\xA0\xA3\x38\xB9\x92\xAF\x5C\x0E\x83\xEE\x3C\xA1\x20\x3F\xA0\x81\x50\xDA\x31\xA9\xA2\x84\x26\xA8\x40\xA7\xAA\x52\xC9\xAC\xA8\x00\x08\xAE\xA9\x4B\xB0\xA9\x53\xCF\xA4\xAB\xA8\x95\xAD\xA9\x1F\xB9\x65\x4A\xB1\xAB\x81\xAC\xAB\x75\x97\xF8\x97\x92\x57\xDB\x8F\x9D\x06\x7B\x21\xA7\x1E\xA1\x59\x50\xA4\x9B\x79\xA7\x84\xA9\x49\x57\xB2\xAA\x5C\xF1\xA4\xAE\xAB\xB6\xAB\xAA\x77\xB3\xAD\x5E\xEE\xAE\xA4\x4E\x95\x94\xAB\x2A\xBD\x3E\x3F\x5F\x1F\x33\x3F\x20\x36\xB0\xFD\x1F\x04\x40\x05\x21\x21\xD6\x0D\xB4\x35\x90\xAF\xB2\x64\x80\x0E\xB0\xCA\x91\xB6\xB2\x93\xB7\x30\x00\x24\x43\xB3\xD7\x18\x32\x33\xA3\x3C\x30\x41\x28\x31\x21\xF2\x0B\x44\x20\x11\x53\xB1\x65\xAB\xB7\xB2\xD6\xAA\xB5\xB5\xB0\xB3\xB0\x67\x80",
			"\x05\x3B\x80\x29\xB4\xB1\xAE\xB8\xB2\x6E\xB9\xB5\xB3\xDD\x2F\xB7\xB7\x00\x0F\x22\x74\x54\x3E\x39\xD8\xBB\xB6\xB8\xBF\x20\xBA\x68\x13\xB3\x3B\x80\x33\xB4\x36\xC0\xBC\xB6\x42\x13\xB6\x39\xD9\xB9\x31\x20\xC2\x31\xB9\x6D\x00\x0D\xB8\x00\x0C\x39\x20\xC4\x2C\xB8\x41\x4A\x31\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}
}
