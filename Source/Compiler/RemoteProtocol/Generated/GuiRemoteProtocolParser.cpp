/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocolParser.h"

namespace vl::presentation::remoteprotocol
{
	void GuiRemoteProtocolParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 988; // 9660 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 220;
		static const vl::vint dataSolidRows = 3;
		static const vl::vint dataRows = 4;
		static const char* compressed[] = {
			"\xBC\x25\x00\x00\xD4\x03\x00\x00\x11\x00\x01\x82\x80\x04\x03\x82\x81\x82\x06\x89\x82\x86\x0A\x84\x06\x84\x08\x0A\xFC\x01\x09\x8F\x7D\x8A\x8B\x8A\x0A\x80\x17\x97\x89\x89\x8F\x88\x8A\x1B\x98\x8A\x81\x92\x90\x91\x91\x8C\x24\xFF\x68\x84\x9B\x97\x93\x90\x96\x2F\xAE\xA6\x9B\x8D\x94\x99\x98\x9B\x33\x9C\xB7\x9A\x99\x9E\x89\x9A\x9E\x06\xA9\xBF\x9E\x9B\x9C\xA1\x9F\x92\x41\xB0\x87\xAA\x95\xA0\xA7\x80\xA1\x4D\xCC\x8B\xA3\xAE\xA2\x80\xA9\xA9\x51\xD4\x92\xA9\xA2\x9C\xAC\x9C\xAF\x40\xCF\x8A\xA0\xB6\xA4\xB1\xAB\x80\x57\xE6\x9B\xA2\xBD\xAC\xB7\xAE\xB7\x61\xD6\xA3\xB0\xB5\xB4\xBB\xB2\x8D\x73\xF2\xAD\xBA\xBF\xB4\xBD\xB9\x80\x1F\x86\x81\xD6\xBB\xB6\xBD\xBA\xC3\x77\xE9\x84\xD9\x82\x02\x87\xC0\xC4\x85\xE8\xB9\xB2\xCB\xBC\xC9\xBE\xCB\x7F\xF8\x95\xDA\xC7\xCC\xCD\xCC\xC5\x90\xDA\xA2\xD9\xA4\xD0\xAE\xD2\xB5\xA3\xA7\xCB\xC5\xD8\xD4\xD7\xD4\xD5\xA1\xAE\xF1\xD0\xD8\xCF\xC1\xDB\xC4\x93\x9E\xF6\xC0\x03\x06\xC6\xD9\xDB\x91\xBA\xF8\xDB\xC0\xD0\xE1\xD5\xD6\xB4\xC2\xC1\xE5\xEA\xE7\xE3\xD6\xE4\xD0\xCF\xC3\x88\x82\xC7\xDD\xE6\xEB\xCC\xD9\xF9\xCC",
			"\xE5\x06\xDD\xE4\xED\xC4\xDB\xE2\xE1\xF4\xF5\xCC\xF0\xF3\xE3\xE8\xE5\xFF\xC9\xF4\xF7\xF5\xDD\xE7\xEE\xEA\xF3\xF2\xFD\xF8\xF9\xF6\xF7\xEF\xC3\xF4\xF9\xFC\xFF\xFC\xFB\xFF\x7D\x70\x83\x72\xF8\x41\x86\x80\x81\xFA\x48\x8E\x7E\x82\x99\x4C\x49\x43\x63\xC6\x58\x75\x80\x83\xBB\x47\x0E\x75\x74\xB3\x58\x81\x87\x77\x13\x8E\x79\x86\x74\x1F\xA1\x8B\x86\x86\xD7\x5C\x89\x82\x87\x23\xA0\x89\x8A\x88\x25\xA4\x81\x7E\x80\x30\x87\x88\x89\x8B\x2A\x80\x08\x03\x85\x35\xAF\x82\x8E\x84\x27\xBC\x8B\x83\x8C\x3A\x94\x8B\x8E\x89\x9D\x49\x08\x8C\x8B\x41\x80\x9D\x86\x42\x0A\x07\x91\x43\x02\x4E\xB4\x88\x93\x92\x44\x83\x8A\x91\x8F\x55\xB1\x82\x93\x96\x57\xBF\x8E\x8E\x95\x5F\x9A\x9D\x94\x98\x59\x83\x9E\x88\x95\x24\x8E\x4F\x81\x98\x66\xB9\x88\x9A\x9B\x58\xA7\x91\x9C\x9C\x5E\xA5\x9C\x96\x42\x0D\x11\x99\x90\x9B\x77\xB6\x93\x9A\x98\x7C\xBF\x9D\x9B\x94\x73\x84\xAD\x66\x03\x51\x8F\x0A\x9F\x9B\x86\xA4\x92\x9D\x9D\x8F\x8E\xA4\x9E\xA4\x8D\x80\xAE\x9D\xA0\x98\x97\xAA\xA5\xA4\x96\x9C\xA3\xA3\x8A\x01\x50\x4B\x99\x72\x00\x63\xA6\x42\x04\x8B\x85\xA0\xAA\x94",
			"\xAB\xBB\x9B\xA7\xA4\x9D\xB0\xAF\xA4\x00\x13\x29\xAD\x64\x05\x51\x95\x06\xAC\xA5\xAD\x8C\xAD\xAE\xAA\xAC\x81\xBE\xAA\xA7\x7D\x86\x43\x0A\x42\x8D\x49\x4D\x6E\x9D\x29\x46\x9D\x46\x5A\xDD\x4B\x59\x49\xB2\xD5\x4C\xB4\x4A\xB3\xCF\x90\x61\xB6\x5A\x29\x4B\xBC\xB4\x49\xD4\x83\x4E\xB4\x61\xE3\x90\x63\xB7\xAE\x16\x54\x74\x61\x4A\xDB\xAB\xB4\x4A\xBA\xE6\xA4\x4D\xB9\xBC\x21\x61\xB2\x42\xBD\xC0\x65\xB0\x73\xB9\xCA\x91\x58\xBC\x00\xFF\x9D\xB1\x54\xBF\xD5\x90\xB3\xC0\x49\xFA\x8A\x74\xC2\xB8\x51\x49\xC9\x4B\xC2\x02\x50\x8A\x73\xBC\xFB\x88\xC7\xC1\xBD\x0A\x4E\xC6\xC6\xB4\xE0\xA8\xB5\x44\xB6\x03\x52\xCD\xB2\xC7\xFF\x20\xC1\xC5\x54\x88\x99\xB7\xC9\x42\xFF\x8C\x61\x95\xC2\x19\x49\xC2\xC4\xBC\xCF\xB4\xC0\x02\xC4\x14\xDD\x4A\xA2\xCA\x01\x5A\xCB\x66\xC4\x29\xFC\xCE\xCD\x67\xFF\xA8\xAC\xCD\x47\x20\x11\x9F\xBD\xAD\x47\xD9\x41\x0A\xD2\x0A\x4C\xDD\xD1\x42\x22\x11\x96\x05\xD3\x01\xF9\x63\xD6\xC8\xBE\x80\xCA\x41\xCE\xCC\x73\x82\xC5\xD6\x9B\x72\xC6\x75\xCC\x24\xF3\x86\xCF\xD0\x99\x42\xA5\xB3\x40\x39\xF6\xC1\xD9\xA6\x24\x8E\x86\x43\x8D\xC9",
			"\x59\x46\xCC\xD7\xC0\xB8\xD6\x40\x94\x79\xD6\x79\xCC\xD9\x45\x8A\x46\x85\xE0\x09\x47\xE5\xC2\xAC\xC1\x4D\x99\x42\xC9\xAB\xAE\xD3\x8C\xE0\x06\x4E\xE4\x8A\xE4\xD6\x6A\x96\x40\xE1\x6D\xCA\x4E\xDF\x40\x9C\xFB\x6E\x45\x43\x9E\xE7\xDC\x90\xB2\xD6\x52\xC0\xD0\x9E\xA6\xC9\x4A\xE4\xE8\x74\xC3\x4B\xCE\x41\x79\x88\xE6\x41\xD0\xB0\xEF\xA2\x42\xA8\x9B\xED\xE6\x40\xEF\x0C\xC9\x7F\xBF\xBF\xC0\xC2\x4F\xE4\x8B\x19\x52\xD1\xF0\x89\x36\xC5\xDA\x41\xA9\x97\xCA\x47\xD6\xA9\x8C\xD9\x46\xD1\xEF\xB6\xC3\x47\x04\xEA\xC9\x76\xD9\xEF\xA9\xA5\xD9\xF2\x41\x06\xDC\xE4\x87\xF1\x40\x4B\xCF\xFE\xEF\x40\x1B\x29\xD6\x76\xF2\xF7\xAB\xF2\x40\x07\xE5\xF5\x86\xE7\xF7\x03\x70\xF1\x43\xF9\xC1\x99\x4E\x05\xFD\x2C\x4F\x75\xFC\x09\x28\x57\xA3\x61\x6F\x61\x53\x69\x82\x02\x89\x8C\x6E\x9A\x0D\x83\x23\x12\x7D\x21\x04\xA3\x7D\x69\x09\x80\x86\x38\xA1\x76\x23\xBF\x11\x8D\x64\xB4\x53\x2C\x6D\x17\x30\x66\x07\x8B\x82\x20",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"RType",
			L"RMessage",
			L"RDecl",
			L"Schema",
		};
		return results[index];
	}

	const wchar_t* ParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][RType] BEGIN ",
			L"[1][RType] END [ENDING]",
			L"[2][RType]< \"type\" @ NAME \"{\" \"}\" >",
			L"[3][RType]< \"type\" NAME \"{\" \"}\" @ >",
			L"[4][RType]< \"type\" NAME \"{\" @ \"}\" >",
			L"[5][RType]< \"type\" NAME @ \"{\" \"}\" >",
			L"[6][RMessage] BEGIN ",
			L"[7][RMessage] END [ENDING]",
			L"[8][RMessage]< \"message\" @ NAME \"{\" \"}\" >",
			L"[9][RMessage]< \"message\" NAME \"{\" \"}\" @ >",
			L"[10][RMessage]< \"message\" NAME \"{\" @ \"}\" >",
			L"[11][RMessage]< \"message\" NAME @ \"{\" \"}\" >",
			L"[12][RDecl] BEGIN ",
			L"[13][RDecl] END [ENDING]",
			L"[14][RDecl]<< !RMessage @ >>",
			L"[15][RDecl]<< !RType @ >>",
			L"[16][Schema] BEGIN ",
			L"[17][Schema] END [ENDING]",
			L"[18][Schema]< RDecl @ { RDecl } >",
			L"[19][Schema]< RDecl { RDecl @ } >",
		};
		return results[index];
	}

	Parser::Parser()
		: vl::glr::ParserBase<GuiRemoteProtocolTokens, ParserStates, GuiRemoteProtocolAstInsReceiver>(&GuiRemoteProtocolTokenDeleter, &GuiRemoteProtocolLexerData, &GuiRemoteProtocolParserData)
	{
	}

	vl::WString Parser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(GuiRemoteProtocolTypeName((GuiRemoteProtocolClasses)classIndex));
	}

	vl::vint32_t Parser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	}

	vl::Ptr<vl::presentation::remoteprotocol::GuiRpSchema> Parser::ParseSchema(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<vl::presentation::remoteprotocol::GuiRpSchema, ParserStates::Schema>(input, this, codeIndex);
	}

	vl::Ptr<vl::presentation::remoteprotocol::GuiRpSchema> Parser::ParseSchema(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<vl::presentation::remoteprotocol::GuiRpSchema, ParserStates::Schema>(tokens, this, codeIndex);
	}
}
