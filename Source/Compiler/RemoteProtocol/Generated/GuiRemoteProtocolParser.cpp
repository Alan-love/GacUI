/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocolParser.h"

namespace vl::presentation::remoteprotocol
{
	void GuiRemoteProtocolParserData(vl::stream::IStream& outputStream)
	{
		static const vl::vint dataLength = 922; // 8746 bytes before compressing
		static const vl::vint dataBlock = 256;
		static const vl::vint dataRemain = 154;
		static const vl::vint dataSolidRows = 3;
		static const vl::vint dataRows = 4;
		static const char* compressed[] = {
			"\x2A\x22\x00\x00\x92\x03\x00\x00\x11\x00\x01\x82\x80\x04\x03\x82\x81\x82\x06\x89\x82\x85\x0A\x82\x06\x84\x07\x0A\xD6\x01\x09\x8F\x7D\x8A\x8B\x8A\x0A\x80\x17\x97\x89\x89\x8F\x88\x8A\x1B\x98\x8A\x81\x92\x90\x91\x91\x8C\x24\xFF\x68\x84\x9B\x97\x93\x90\x96\x2F\xAE\xA6\x9B\x8D\x94\x99\x98\x9B\x33\x9C\xB7\x9A\x99\x9E\x89\x9A\x9E\x06\xA9\xBF\x9E\x9B\x9C\xA1\x9F\x92\x41\xB0\x87\xAA\x95\xA0\xA7\x80\xA1\x4D\xCC\x8B\xA3\xAE\xA2\x80\xA9\xA9\x51\xD4\x92\xA9\xA2\x9C\xAC\x9C\xAF\x40\xCF\x8A\xA0\xB6\xA6\x83\x8E\xB3\x59\xE9\x98\xAB\xB4\xB5\xA9\x81\xAB\x6D\xDB\xA2\xBD\xA3\xBF\xAD\xBB\xB0\x56\xE3\xB7\xA5\xBB\xBE\xB6\x8C\xBD\x79\xF4\x81\xD6\xB3\xC0\xBF\xB6\xC0\x87\x82\xC9\xC4\xCB\xC6\xC3\xBE\xC5\x8F\x8C\xD1\xCE\xC0\xBD\xBE\xB9\xC2\x7C\x98\xFE\xB5\xCA\xCF\xC9\xC7\xCC\x9F\x9B\xC8\xC0\x02\x02\x87\xB2\xCB\x5A\xA9\xEA\xB1\xBA\xD4\xB4\xD5\xD5\xAF\xAE\xDD\xCD\xDC\xD0\xDB\xD8\xDB\x01\x83\x26\xD8\xD3\xC8\xD1\xDE\xD1\x90\x9C\xE1\xDE\xCF\xDC\xE0\x84\xB4\xB2\xC3\xF4\xD1\xD5\xD9\xE5\xE3\xE5\xB7\xCE\xC2\xEF\xEC\xDB\xEA\xEB\xD1\xD7\xC1\xD8\xFB",
			"\xEA\xED\xEE\xC9\xEC\xDF\xDC\xE1\xFE\xE4\xCA\xF1\xF2\xF2\xBE\xD3\xCC\x89\x87\xD1\xE9\xE7\xF7\xCC\xF1\xEE\xF2\xFA\xE5\xEA\xF3\xF4\xF7\xC0\xE3\xFB\xF7\xF4\xFC\xFC\xF4\xFA\x7D\x72\x83\x7F\xFE\x41\x84\x83\x80\x06\x89\x84\x70\x78\x08\x84\x76\x03\x6E\xD2\x79\x7B\x82\x84\xD0\x75\x71\x84\x80\x13\x98\x85\x84\x75\x17\x85\x84\x73\x01\x10\xB0\x73\x7F\x88\x16\xA2\x85\x8B\x40\x08\x21\x83\x41\x02\x2A\xA4\x8C\x86\x89\x2F\xB4\x71\x8E\x8B\x0C\x87\x86\x8E\x82\x1B\xB5\x88\x8E\x7D\x1A\xBC\x8E\x85\x8E\x14\xBE\x8D\x80\x90\x3D\x9D\x83\x91\x43\x2D\xA7\x84\x8D\x90\x46\xB7\x89\x87\x8F\x42\x8E\x94\x90\x94\x4D\xBB\x89\x43\x02\x49\xB3\x8A\x93\x96\x5A\x9D\x9A\x8F\x93\x47\x95\x90\x9A\x94\x51\x96\x90\x8F\x97\x1B\x8C\x09\x95\x03\x59\xA8\x95\x9B\x98\x66\xB2\x8E\x9A\x98\x53\xA1\x97\x98\x93\x77\x85\x99\x9C\x95\x7B\xB6\x92\x9C\x9E\x7F\xBA\x91\xA2\x64\x10\x6C\x7C\x6F\x03\x59\x90\x0D\x98\xA0\x4B\x82\xAD\xA0\x9F\x83\xBE\x9F\xA2\xA4\x5C\x80\x46\xA2\x73\x12\x19\x93\x07\xA2\x8E\x9C\x93\x9D\x9F\x64\xB4\x9F\x99\x9D\xA1\x86\x4F\x06\x42\xA5\x49\x4A\x6F\x52",
			"\xEB\x71\x59\x49\xAA\xC8\x71\x5D\xAA\x65\x29\x6B\xAE\xA8\x49\xB0\x83\x46\xAE\x65\xBB\x9D\x6F\xA8\xA7\x1B\x47\x74\xAC\x49\xB3\xBE\xA4\x4A\xB0\xC6\xA1\x45\xB3\x70\xBF\x89\x49\xAD\x67\xBD\x8C\xB8\xAE\x42\xD1\x85\x7F\xB1\x40\xD7\x85\x75\xB5\x4A\xCD\xB1\xA6\x67\xB2\xC5\x75\xA1\x55\xB7\xBA\x91\x5B\xB4\xB7\x21\x59\xBD\x7B\x70\xE0\xA8\xB1\x4B\xB9\xEE\x96\x49\xB4\xBC\x1B\x74\xB1\xBE\xBA\x51\x6C\x8D\x45\x5C\xFA\xBB\xBD\x65\xBF\xFE\x85\x75\xA1\xC0\x00\x2B\xB4\x68\xC1\xD8\x99\x95\xB5\x46\xD5\x86\xC8\xB3\xBE\x0F\xC5\xCA\x40\xB8\x19\x6C\x98\xC2\xBD\xBE\x46\xCA\x9B\xC5\xBC\x59\xBA\xA0\xC2\x19\x5C\x09\x95\xB6\x96\xA0\xC9\x41\x07\x23\xCA\x45\xCA\xC9\x03\x5E\x09\x94\x05\x20\xD1\xC3\x76\xC9\x06\xDF\xA3\x40\xBE\xCE\x5E\x40\xB0\xA5\x00\x15\xB9\xB7\xCC\xA3\xBC\x61\xC4\xC6\x7E\x64\xA1\x9F\x42\x0A\x40\xCE\x89\x46\x38\xE0\xAE\x5C\x88\x09\x4F\x89\xCC\xB5\x3B\xE5\xA8\x8A\x42\x50\xF0\x86\xD0\x9C\xC4\x4A\xD1\x41\x8A\x53\xE2\xAE\x72\x43\x09\x72\xC3\x69\x46\x11\xFF\xC7\xD9\x96\x64\xC6\x4E\xD5\x97\x19\x52\xD6\x42\xDA\x90\x46\xCA\xC6\x42\x58",
			"\xA1\xD6\x40\xD8\x73\xC1\xD9\x42\xC5\x06\x79\xDA\xD4\x92\xCE\xBE\xD6\x43\xC0\x03\x66\xD0\x65\x46\x1B\xC6\x44\xD0\x71\xD9\x99\xB8\xE2\x40\x6F\xC0\xD9\x40\xA2\xAA\x82\xD8\xAA\x42\x1F\xC6\x48\xE7\xE0\x09\x59\xA7\xA6\xD3\xC4\x5D\xE9\xE0\x6F\x19\x5B\xA5\xE2\x73\x72\xF7\xCC\xE5\xD2\xA8\xCA\x45\x07\xE6\xCE\x7C\xDE\xE9\x42\x2B\xC2\x4F\xE6\x8C\x19\x57\x05\xD7\xD1\x01\x79\xE1\x42\xE2\x92\x59\x48\x04\xED\x30\xAD\xD7\xEE\x41\xC2\xC0\x05\xE7\xDA\x09\x5A\x08\xF2\x8C\x8D\xCB\xF3\x42\xE8\x04\xF3\xCC\xB4\xCB\xDC\xF4\xC9\x55\xCD\x29\x46\xCD\x46\xF8\x3A\xE0\xC4\xDC\x4D\xE7\xDB\x4D\xD1\xDF\x20\xCF\xED\xCF\xB8\x0B\xCC\xCD\xF6\x41",
		};
		vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
	}

	const wchar_t* ParserRuleName(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"RType",
			L"RProtocol",
			L"RDecl",
			L"RemoteProtocol",
		};
		return results[index];
	}

	const wchar_t* ParserStateLabel(vl::vint index)
	{
		static const wchar_t* results[] = {
			L"[0][RType] BEGIN ",
			L"[1][RType] END [ENDING]",
			L"[2][RType]< \"type\" \"{\" \"}\" @ >",
			L"[3][RType]< \"type\" \"{\" @ \"}\" >",
			L"[4][RType]< \"type\" @ \"{\" \"}\" >",
			L"[5][RProtocol] BEGIN ",
			L"[6][RProtocol] END [ENDING]",
			L"[7][RProtocol]< \"protocol\" \"{\" \"}\" @ >",
			L"[8][RProtocol]< \"protocol\" \"{\" @ \"}\" >",
			L"[9][RProtocol]< \"protocol\" @ \"{\" \"}\" >",
			L"[10][RDecl] BEGIN ",
			L"[11][RDecl] END [ENDING]",
			L"[12][RDecl]<< !RProtocol @ >>",
			L"[13][RDecl]<< !RType @ >>",
			L"[14][RemoteProtocol] BEGIN ",
			L"[15][RemoteProtocol] END [ENDING]",
			L"[16][RemoteProtocol]< RDecl @ { RDecl } >",
			L"[17][RemoteProtocol]< RDecl { RDecl @ } >",
		};
		return results[index];
	}

	Parser::Parser()
		: vl::glr::ParserBase<GuiRemoteProtocolTokens, ParserStates, GuiRemoteProtocolAstInsReceiver>(&GuiRemoteProtocolTokenDeleter, &GuiRemoteProtocolLexerData, &GuiRemoteProtocolParserData)
	{
	}

	vl::WString Parser::GetClassName(vl::vint32_t classIndex) const
	{
		return vl::WString::Unmanaged(GuiRemoteProtocolTypeName((GuiRemoteProtocolClasses)classIndex));
	}

	vl::vint32_t Parser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
	{
		return -1;
	}

	vl::Ptr<vl::presentation::remoteprotocol::GuiIqRemoteProtocolDefinition> Parser::ParseRemoteProtocol(const vl::WString& input, vl::vint codeIndex) const
	{
		 return ParseWithString<vl::presentation::remoteprotocol::GuiIqRemoteProtocolDefinition, ParserStates::RemoteProtocol>(input, this, codeIndex);
	}

	vl::Ptr<vl::presentation::remoteprotocol::GuiIqRemoteProtocolDefinition> Parser::ParseRemoteProtocol(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
	{
		 return ParseWithTokens<vl::presentation::remoteprotocol::GuiIqRemoteProtocolDefinition, ParserStates::RemoteProtocol>(tokens, this, codeIndex);
	}
}
