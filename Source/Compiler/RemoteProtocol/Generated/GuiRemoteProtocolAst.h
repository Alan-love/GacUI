/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PRESENTATION_REMOTEPROTOCOL_AST_AST
#define VCZH_PRESENTATION_REMOTEPROTOCOL_AST_AST

#include <VlppGlrParser.h>

namespace vl::presentation::remoteprotocol
{
	class GuiRpDeclaration;
	class GuiRpMessage;
	class GuiRpSchema;
	class GuiRpType;

	class GuiRpDeclaration abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<GuiRpDeclaration>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(GuiRpType* node) = 0;
			virtual void Visit(GuiRpMessage* node) = 0;
		};

		virtual void Accept(GuiRpDeclaration::IVisitor* visitor) = 0;

		vl::glr::ParsingToken name;
	};

	class GuiRpType : public GuiRpDeclaration, vl::reflection::Description<GuiRpType>
	{
	public:

		void Accept(GuiRpDeclaration::IVisitor* visitor) override;
	};

	class GuiRpMessage : public GuiRpDeclaration, vl::reflection::Description<GuiRpMessage>
	{
	public:

		void Accept(GuiRpDeclaration::IVisitor* visitor) override;
	};

	class GuiRpSchema : public vl::glr::ParsingAstBase, vl::reflection::Description<GuiRpSchema>
	{
	public:
		vl::collections::List<vl::Ptr<GuiRpDeclaration>> declarations;
	};
}
namespace vl::reflection::description
{
#ifndef VCZH_DEBUG_NO_REFLECTION
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiRpDeclaration)
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiRpDeclaration::IVisitor)
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiRpType)
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiRpMessage)
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiRpSchema)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

	BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::presentation::remoteprotocol::GuiRpDeclaration::IVisitor)
		void Visit(vl::presentation::remoteprotocol::GuiRpType* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

		void Visit(vl::presentation::remoteprotocol::GuiRpMessage* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

	END_INTERFACE_PROXY(vl::presentation::remoteprotocol::GuiRpDeclaration::IVisitor)

#endif
#endif
	/// <summary>Load all reflectable AST types, only available when <b>VCZH_DEBUG_NO_REFLECTION</b> is off.</summary>
	/// <returns>Returns true if this operation succeeded.</returns>
	extern bool GuiRemoteProtocolAstLoadTypes();
}
#endif