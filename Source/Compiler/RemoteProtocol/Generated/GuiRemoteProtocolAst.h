/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_PRESENTATION_REMOTEPROTOCOL_AST_AST
#define VCZH_PRESENTATION_REMOTEPROTOCOL_AST_AST

#include <VlppGlrParser.h>

namespace vl::presentation::remoteprotocol
{
	class GuiIqDeclaration;
	class GuiIqProtocol;
	class GuiIqRemoteProtocolDefinition;
	class GuiIqType;

	class GuiIqDeclaration abstract : public vl::glr::ParsingAstBase, vl::reflection::Description<GuiIqDeclaration>
	{
	public:
		class IVisitor : public virtual vl::reflection::IDescriptable, vl::reflection::Description<IVisitor>
		{
		public:
			virtual void Visit(GuiIqType* node) = 0;
			virtual void Visit(GuiIqProtocol* node) = 0;
		};

		virtual void Accept(GuiIqDeclaration::IVisitor* visitor) = 0;

	};

	class GuiIqType : public GuiIqDeclaration, vl::reflection::Description<GuiIqType>
	{
	public:

		void Accept(GuiIqDeclaration::IVisitor* visitor) override;
	};

	class GuiIqProtocol : public GuiIqDeclaration, vl::reflection::Description<GuiIqProtocol>
	{
	public:

		void Accept(GuiIqDeclaration::IVisitor* visitor) override;
	};

	class GuiIqRemoteProtocolDefinition : public vl::glr::ParsingAstBase, vl::reflection::Description<GuiIqRemoteProtocolDefinition>
	{
	public:
		vl::collections::List<vl::Ptr<GuiIqDeclaration>> declarations;
	};
}
namespace vl::reflection::description
{
#ifndef VCZH_DEBUG_NO_REFLECTION
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiIqDeclaration)
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiIqDeclaration::IVisitor)
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiIqType)
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiIqProtocol)
	DECL_TYPE_INFO(vl::presentation::remoteprotocol::GuiIqRemoteProtocolDefinition)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

	BEGIN_INTERFACE_PROXY_NOPARENT_SHAREDPTR(vl::presentation::remoteprotocol::GuiIqDeclaration::IVisitor)
		void Visit(vl::presentation::remoteprotocol::GuiIqType* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

		void Visit(vl::presentation::remoteprotocol::GuiIqProtocol* node) override
		{
			INVOKE_INTERFACE_PROXY(Visit, node);
		}

	END_INTERFACE_PROXY(vl::presentation::remoteprotocol::GuiIqDeclaration::IVisitor)

#endif
#endif
	/// <summary>Load all reflectable AST types, only available when <b>VCZH_DEBUG_NO_REFLECTION</b> is off.</summary>
	/// <returns>Returns true if this operation succeeded.</returns>
	extern bool GuiRemoteProtocolAstLoadTypes();
}
#endif