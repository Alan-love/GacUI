/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiRemoteProtocol
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocol_Assembler.h"

namespace vl::presentation::remoteprotocol
{

/***********************************************************************
GuiRemoteProtocolAstInsReceiver : public vl::glr::AstInsReceiverBase
***********************************************************************/

	vl::Ptr<vl::glr::ParsingAstBase> GuiRemoteProtocolAstInsReceiver::CreateAstNode(vl::vint32_t type)
	{
		auto cppTypeName = GuiRemoteProtocolCppTypeName((GuiRemoteProtocolClasses)type);
		switch((GuiRemoteProtocolClasses)type)
		{
		case GuiRemoteProtocolClasses::Protocol:
			return vl::Ptr(new vl::presentation::remoteprotocol::GuiIqProtocol);
		case GuiRemoteProtocolClasses::RemoteProtocolDefinition:
			return vl::Ptr(new vl::presentation::remoteprotocol::GuiIqRemoteProtocolDefinition);
		case GuiRemoteProtocolClasses::Type:
			return vl::Ptr(new vl::presentation::remoteprotocol::GuiIqType);
		default:
			return vl::glr::AssemblyThrowCannotCreateAbstractType(type, cppTypeName);
		}
	}

	void GuiRemoteProtocolAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::Ptr<vl::glr::ParsingAstBase> value)
	{
		auto cppFieldName = GuiRemoteProtocolCppFieldName((GuiRemoteProtocolFields)field);
		switch((GuiRemoteProtocolFields)field)
		{
		case GuiRemoteProtocolFields::RemoteProtocolDefinition_declarations:
			return vl::glr::AssemblerSetObjectField(&vl::presentation::remoteprotocol::GuiIqRemoteProtocolDefinition::declarations, object, field, value, cppFieldName);
		default:
			return vl::glr::AssemblyThrowFieldNotObject(field, cppFieldName);
		}
	}

	void GuiRemoteProtocolAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, const vl::regex::RegexToken& token, vl::vint32_t tokenIndex)
	{
		auto cppFieldName = GuiRemoteProtocolCppFieldName((GuiRemoteProtocolFields)field);
		return vl::glr::AssemblyThrowFieldNotToken(field, cppFieldName);
	}

	void GuiRemoteProtocolAstInsReceiver::SetField(vl::glr::ParsingAstBase* object, vl::vint32_t field, vl::vint32_t enumItem, bool weakAssignment)
	{
		auto cppFieldName = GuiRemoteProtocolCppFieldName((GuiRemoteProtocolFields)field);
		return vl::glr::AssemblyThrowFieldNotEnum(field, cppFieldName);
	}

	const wchar_t* GuiRemoteProtocolTypeName(GuiRemoteProtocolClasses type)
	{
		const wchar_t* results[] = {
			L"Declaration",
			L"Protocol",
			L"RemoteProtocolDefinition",
			L"Type",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 4 ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolCppTypeName(GuiRemoteProtocolClasses type)
	{
		const wchar_t* results[] = {
			L"vl::presentation::remoteprotocol::GuiIqDeclaration",
			L"vl::presentation::remoteprotocol::GuiIqProtocol",
			L"vl::presentation::remoteprotocol::GuiIqRemoteProtocolDefinition",
			L"vl::presentation::remoteprotocol::GuiIqType",
		};
		vl::vint index = (vl::vint)type;
		return 0 <= index && index < 4 ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolFieldName(GuiRemoteProtocolFields field)
	{
		const wchar_t* results[] = {
			L"RemoteProtocolDefinition::declarations",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 1 ? results[index] : nullptr;
	}

	const wchar_t* GuiRemoteProtocolCppFieldName(GuiRemoteProtocolFields field)
	{
		const wchar_t* results[] = {
			L"vl::presentation::remoteprotocol::GuiIqRemoteProtocolDefinition::declarations",
		};
		vl::vint index = (vl::vint)field;
		return 0 <= index && index < 1 ? results[index] : nullptr;
	}

	vl::Ptr<vl::glr::ParsingAstBase> GuiRemoteProtocolAstInsReceiver::ResolveAmbiguity(vl::vint32_t type, vl::collections::Array<vl::Ptr<vl::glr::ParsingAstBase>>& candidates)
	{
		auto cppTypeName = GuiRemoteProtocolCppTypeName((GuiRemoteProtocolClasses)type);
		return vl::glr::AssemblyThrowTypeNotAllowAmbiguity(type, cppTypeName);
	}
}
