/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:GuiInstanceQuery
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiInstanceQueryParser.h"

namespace vl
{
	namespace presentation
	{
		namespace instancequery
		{
			void GuiInstanceQueryParserData(vl::stream::IStream& outputStream)
			{
				static const vl::vint dataLength = 2989; // 28122 bytes before compressing
				static const vl::vint dataBlock = 256;
				static const vl::vint dataRemain = 173;
				static const vl::vint dataSolidRows = 11;
				static const vl::vint dataRows = 12;
				static const char* compressed[] = {
					"\xDA\x6D\x00\x00\xA5\x0B\x00\x00\x0D\x00\x01\x82\x80\x07\x03\x82\x81\x82\x06\x89\x82\x88\x0A\x87\x06\x84\x0C\x0A\x9D\x0A\x86\x1A\x87\x16\x84\x77\x02\x09\xBF\x7B\x8C\x8B\x8E\x84\x00\x1D\x9D\x9F\x81\x9C\x8B\x90\x93\x7F\x1F\x9F\x81\x0A\x8B\x91\x85\x96\x83\x27\xA8\x8A\x91\x96\x94\x91\x9B\x90\x37\xA2\xB3\x87\x99\x9D\x93\x9C\x9B\x3F\xB8\x81\xBA\x9A\x8C\x9F\xA0\x9F\x45\xC0\x89\xA2\xAB\xA4\xA0\x98\xA3\x4D\xC8\x8F\xAA\xA3\xAC\xA5\xAA\xA7\x03\xB4\x87\xBE\x8B\xAA\x99\xA8\xAE\x09\x99\xAE\x9D\xAD\x98\xB3\xAA\xA9\x59\xD0\xA7\xA6\xB9\xB4\xA9\xB6\xAB\x6F\xD8\x82\x9A\xAF\xAE\xAF\xB4\xBB\x71\xE8\x82\x83\x0C\x94\xB2\xBF\xBA\x65\xF8\xB3\xAA\xB3\x84\x01\xBE\xC0\x7F\xF7\x81\xCB\xC9\xC1\xBC\xB7\xC1\x6E\x90\xF0\xB2\xC2\xB9\x81\x03\xC3\x8A\x8D\xD4\xDA\xB1\x84\xB9\xCC\xC4\xA0\x9F\xE2\xCE\xC2\xC5\xCC\xC3\xCD\x8F\xA6\xD1\xCA\xD3\xC9\x82\x02\xCC\xA4\x8C\xE1\xD1\xDA\xCC\xD5\xCA\x90\xA7\xB6\xDC\xD8\xDB\xD4\xDD\xD6\xDF\xB7\x9E\xC3\x88\x86\x87\x94\xDB\xD9\xA8\xA5\xC0\xFB\xD2\xE3\x84\xD9\xE4\xB2\xA3\xD0\xF5\xDB\xE1\xD5\xEA\xE5\xCD\xBA\xD6\xF9",
					"\xE0\x01\x07\xE6\xED\xD8\xB9\xD7\xF1\xE7\xE2\xE8\xF0\xF2\xD3\xC8\xE7\xF4\xEC\xED\xF6\xF0\xF7\xBD\xDC\xCA\x1F\xE0\x03\x04\xFA\xF8\xBF\xF8\xC1\xE2\xFC\x07\xFB\xF7\xFF\xF1\x40\x89\x7E\x80\xFB\x41\x86\x83\x80\x07\x85\x88\x83\x82\x0A\x8D\x8C\x72\x78\x00\x63\x5A\x7B\x78\xEC\x44\x8F\x81\x82\x17\x8C\x89\x86\x83\xDB\x56\x8D\x84\x86\x1F\x9A\x81\x8B\x6D\x0E\x3E\x70\x89\x78\x27\xA8\x7B\x7B\x84\x0E\x52\x86\x78\x85\x13\xBA\x7B\x87\x8C\x23\xB4\x88\x8A\x88\x37\x9C\x89\x8F\x6E\x10\x26\x88\x8F\x47\x11\x3E\x8A\x8E\x8A\x30\xAF\x82\x8D\x8D\x48\xBB\x89\x90\x91\x47\x8A\x9E\x90\x93\xE2\x52\x04\x7F\x04\x42\xB6\x80\x95\x8A\x15\x98\x91\x8E\x87\xCA\x54\x04\x7D\x05\x55\x8B\x9A\x42\x05\x61\x8F\x99\x97\x8F\x67\x83\x99\x9A\x95\x6B\xA2\x9B\x96\x96\x46\x9C\x97\x94\x9A\x09\x57\x05\x9B\x9C\x6A\xAF\x94\x9D\x9C\x70\xA5\x7E\x9D\x7A\x7C\xBB\x9F\x9F\x8A\x81\xB9\x96\x40\x44\x2E\x83\xA5\x92\xA2\x4D\xB8\x9C\x9B\x84\x19\x34\x7A\x07\x9D\xD4\x5B\x04\xA6\x9E\x86\x8C\xA2\x9C\x75\x1C\x17\xA5\xA3\xA3\x9F\xAE\x91\xAA\x99\x98\xA0\xAA\xA5\x9F\x80\x8A\xA2\x45\xA2",
					"\x02\x5E\x0E\xA7\xA9\x82\xA9\xA2\x43\x07\xAF\xB2\xA4\xA3\x40\x20\x35\xA7\xAE\xAD\x8B\xBC\xAD\xA1\x9B\xA4\xA3\xAE\xA2\xA8\xB0\x99\xA2\x41\x08\xF4\x62\x0A\xAD\xAF\xBB\x8D\xBC\xB0\x00\x23\x0B\xBF\xAD\xA9\xD6\x64\x04\x7D\x09\xD2\xA2\x74\x44\xAB\xCE\x93\xB2\xB0\xB0\xC3\x81\xB5\xB2\xA9\xBE\x9B\xA4\xB6\xB8\xE5\xA8\xAD\xB6\xB9\x06\x67\x04\x7C\x0A\xD9\xBD\x69\x09\xBC\xB1\xAB\xBA\xBB\xB3\xDC\x6A\x04\x7F\x0A\xF4\x86\xB6\xBD\xBD\xF8\xAC\xB3\xB8\xB1\xBC\xAC\x04\x7D\x0B\xFD\xA4\xBF\xBE\xBF\x01\xF7\xBE\xB7\xC0\xE8\x8E\xBE\x08\x7D\x16\x5C\xBD\xC3\x6F\x30\x09\xC4\xC3\xC2\x0A\xD7\xCC\xC3\xC3\xE9\x80\xC0\xC8\xC7\x1B\xDE\xCD\xC7\xC8\xCF\xB1\x04\x7E\x0C\x1A\xCA\x73\x0D\xCB\xE1\xB1\xC0\xBA\x42\x34\x34\x75\x0E\x42\x62\x5F\xB7\xBA\xCC\x3B\xF3\xCD\xCF\xCF\x2F\xB7\x04\x7C\x0E\x30\xCA\x49\x0D\xD1\x40\xD0\xCC\xCE\x41\x3A\x34\x7B\x0C\xCE\x3E\xFA\xC2\xD6\xD2\x51\xD4\xD9\xD1\xC8\x1F\xE2\x7D\x0C\xD2\x53\xD8\xD7\xCA\xC0\x5E\xE5\xC8\xCB\xD8\xE2\x7E\x0C\xD6\xD5\x5D\xC1\x4F\x0C\x7D\x40\x10\xD7\xD4\xC9\x11\xE6\xC2\xD8\xD8\x70\xCB\xDA\xA2\x10\xF4",
					"\x43\x17\xDA\x40\x44\x3B\xD5\xDD\xD5\x61\xF1\xD4\xDA\xC3\x74\xF2\xD2\xE1\xE1\x83\xE2\xC2\x79\x11\xF4\x46\x1E\xDC\x00\x47\x0F\xE9\xE1\xD6\xF7\x88\x14\x7D\x12\x6E\xE9\xD6\xE2\xDD\x81\xDC\xEF\xDF\xDB\xCF\x8B\x14\x7C\x13\x8F\xCD\x12\xE4\xE2\xA8\xF7\xBE\x10\x7D\x4F\x19\xE8\xDB\xEB\x9D\xC0\xEF\xE6\xE6\x93\xDF\xD4\xE3\xED\x00\xD1\x17\xE8\xEE\x94\xCA\xEC\xEE\xED\xBE\xFF\x62\x17\xEE\x00\xD3\x14\x7C\x15\xAE\xF1\xE0\xE9\xED\x73\xFF\xED\xF1\xF0\xB7\x56\x14\x7F\x15\x8F\xD8\x14\xF1\xEF\xD8\xC0\xF9\xF7\xF3\xDB\xC7\xEE\xF2\xF7\xD0\xFB\x69\x17\xF5\xDA\xE5\xFC\xF6\xF9\xE0\xCC\xC2\x3D\xF2\x01\x46\x71\xE1\x4C\xF3\x49\x4F\x69\x5D\x39\xC3\x4E\xF8\x78\xF7\xC0\x09\xFC\xFC\x0A\x44\x74\x6B\xFC\x77\x2D\x48\xFF\x09\x27\x33\xBA\x39\x7B\x7F\x27\x31\x7E\x41\x7E\x79\x38\x00\xA4\x31\x26\xF9\x61\x32\x02\xC3\x3D\x2A\x07\x89\x3A\x80\x09\x8A\x21\x01\xF7\x21\x83\xAE\x13\x87\x20\x15\x9D\x29\x4C\x06\x35\x2F\x98\x35\x7A\x20\x08\x87\x47\x00\x86\x26\x82\xF0\x24\x81\x80\x27\x27\x85\xFB\x5D\x2F\x85\x07\xA7\x23\x83\x36\x84\x27\x01\x9E\x8A\x20\xBE\x35\x2D",
					"\x85\xD7\x38\x80\x49\x1F\x81\x20\x19\x97\x3D\x83\x75\x24\x88\x00\x3E\x87\x2E\x20\xB1\x26\x84\x2D\x6B\x87\x40\x4E\x81\x87\x32\x75\x87\x82\x27\x37\x88\x78\x23\x82\x85\x93\x14\x8F\x89\x21\x3A\x89\x10\xD9\x8D\x8A\x92\x22\x88\x8C\x66\x85\x8D\x18\xEA\x8D\x23\x33\xA8\x8D\x8D\x6C\x9C\x22\x1B\xEF\x8B\x23\x39\xB4\x8E\x8E\x6F\x98\x8C\x1A\xFA\x80\x8C\x3E\x8F\x8E\x8F\x5C\x85\x87\x49\x48\x87\x2E\x25\xBE\x8F\x8B\x77\x91\x8F\x46\x46\x89\x84\x1C\x52\x8A\x20\x88\x90\x8E\x20\xA4\x2C\x90\x1A\x8A\x97\x1F\x3B\x89\x8A\x42\x07\x97\x92\x40\x95\x8E\x62\x42\x81\x26\x12\x91\x92\x8F\x4B\x95\x95\x2E\x9E\x89\x8F\x24\xEB\x8B\x94\x49\xB0\x82\x95\xAF\x8C\x95\x2C\xAE\x99\x86\x59\xB5\x94\x96\x58\x90\x97\x2D\x9C\x24\x94\x30\xBD\x97\x89\x4C\x89\x25\x72\x4A\x8D\x91\x8E\x3F\x91\x26\xC7\x87\x25\x30\xC2\x97\x3A\x62\x96\x95\x95\xA5\x90\x99\x1D\x9D\x94\x9A\x69\xBF\x19\x95\xB6\x99\x95\x36\xDB\x84\x8C\x6B\x98\x98\x97\xDC\x9A\x96\x36\xE0\x93\x8C\x71\xA1\x9B\x9B\xE5\x81\x25\x26\x85\x9A\x20\xEF\x3F\x87\x92\xEB\x84\x36\x12\xEE\x9D\x89\x4B\x8B\x99\x20\xF7\x8D",
					"\x9A\x42\x0C\x26\x81\x32\x73\x99\x84\xD6\x99\x9D\x3E\x8F\x91\x20\x7E\xB7\x2F\x9B\xD1\x93\x95\x42\xBB\x93\x9A\x6F\x95\x9A\xA1\x1B\x24\x92\x3C\xED\x90\xA0\x88\x98\x94\x99\x13\xA9\x20\x3D\xFF\x76\x9F\x1E\xBC\x81\x21\x06\xA4\x36\x44\xC3\x94\xA3\x77\x81\xA6\xA3\x9A\x80\xA5\x45\x8C\xAF\x1F\x64\xA4\x22\xA0\x1F\xA6\x21\x48\x8D\x8D\xA3\x84\x03\xA1\x83\x2A\xA8\x97\x43\xAC\xA8\xA1\x86\x96\xA5\xA7\xD7\x9B\xA7\x38\x8B\xA3\xA8\x9F\xBC\xA2\xA8\xE7\x84\x9C\x1D\xC4\xA9\xA8\xA6\xA9\x9A\xA9\x4B\xA1\xAA\x43\xD3\xAF\xA6\xA4\x8F\xAE\xA9\x51\xB7\xA1\x58\x31\xA3\x21\x8D\xB4\xA6\x9A\xF9\x66\x88\x41\xDD\x3B\xA5\xA2\xBF\x18\xA6\x29\xB2\xA5\x57\x61\xAC\xAA\x81\x1E\xA8\x3C\x2E\xA1\x24\x5A\xEC\x99\xA7\x83\x96\xA9\xAB\x40\xB9\xAF\x5D\xD1\xAA\xAE\xAA\xAC\xA1\x7F\x37\xA3\x89\x49\xF5\x90\xAC\x94\xB4\xAE\x20\x6F\xB7\x39\x5C\x9D\x23\xAF\x8C\xAA\xAD\x9F\x36\xAD\xAD\x40\x09\xB8\x99\x9A\x86\x21\xB0\xA2\x9B\x9D\x59\xCD\xAB\x23\xC5\x9C\x25\xB1\x24\xB5\xAC\x47\xA7\xA1\xB3\xB4\x83\x23\xA6\x2E\x9B\xAF\x52\xFD\xA5\xAA\xBF\xA6\xAC\xB5\x47\xAE\xB4\x67\xD2",
					"\xAD\xB5\xDA\xB1\xB6\xB6\x66\xB8\x86\x59\x9E\xBB\x22\xDD\xB3\xB6\xB7\x57\xBD\xB7\x25\xC0\xB9\xAA\xE2\x91\xAE\xB8\x4B\xA8\xB8\x1D\xCA\x82\x82\x85\x0A\x8B\xAC\xCF\xB8\xA6\x41\x51\xB2\xB1\x84\x14\xB9\x24\x5C\x18\xA0\x33\xF1\x92\x20\x23\xB9\x9A\x8C\xC0\xA0\x8A\x77\x9B\x9A\x82\x85\x22\xBE\xB0\x85\x25\xBE\xFC\x7D\x7A\xBB\x80\x0C\x82\x98\xEF\xA0\x00\x6A\xA9\x23\xBF\x8F\x33\xB8\x88\xF8\xA3\xB1\x57\xFA\xB2\x21\xF0\xAA\xBC\x85\xFF\xB3\x8A\x73\xE6\xB3\xC1\xF5\x96\xBC\xC0\x09\x36\x3E\x81\x86\x2A\xC0\x00\xC9\xC0\xC1\x06\x20\xBC\x84\xE9\xB4\x81\x09\xC2\x22\xC2\x0B\xC3\x21\x7F\x15\xC9\xC2\x81\x1B\xC6\x20\xFE\xA9\x23\x87\x83\x21\xC4\x83\x11\x40\xC4\x16\xC1\x23\x89\xA4\xC9\xC4\x00\x2B\xC5\xBF\x2D\xDF\xB9\x80\x90\x98\xBD\x0B\xF3\xC6\x35\x35\xC1\x20\x86\x8E\xC6\x21\x12\x6D\xBC\xB9\x39\xCF\x5B\x47\x2F\xC2\x99\x7C\xA6\x1C\x3E\x40\x92\x49\x7B\xF9\x97\x1C\xFA\x00\xBA\x65\x4B\xD4\x3A\x18\x93\x61\xCB\x84\x28\x1C\x3E\xF9\x98\x59\x95\x86\x29\x1C\xFA\x06\x8D\x53\x5B\xC3\x22\x3A\x74\x39\x7E\x2F\x61\xCA\x20\xEB\x04\xCF\x98\x6D\xBB\x88\x85",
					"\x2C\x1E\xCB\x0A\x36\x50\x9B\x8A\x2D\x1C\x2C\xCA\x21\x57\x73\xC9\x22\x3B\x76\xC9\x20\x65\x79\xCE\x20\xEF\x14\x3E\x18\xF3\x5F\xCF\x81\x30\x1A\xD0\x0A\x3C\x5D\xA1\x82\x21\x1E\xFA\x1A\x0C\xCD\xCA\xB7\x37\x9C\xDC\xB5\x88\xEA\x1F\x22\xAC\xE2\x3F\x21\x3E\xC5\x9D\x63\x53\xAF\x47\x23\x62\x98\xB0\xC3\x63\xB3\x42\xCF\x4F\x5A\xC6\xA5\xD4\x39\x7C\x98\xDD\x36\x31\x9C\xD6\x3A\x1F\x29\xB2\xA8\x9D\x60\xB9\x57\xCA\x3F\x23\x23\xDB\x2E\xEC\x00\x05\xC4\x45\x66\xD4\x3B\x40\x91\xBC\x77\x44\x4D\x44\x83\x2C\xD7\x37\xF1\xB6\xD7\x9C\xC1\x45\xB4\xCD\x73\xB9\xD2\xBB\x3F\x22\x99\xC6\xDB\xCD\xAD\xAD\xB9\x7F\xF3\xA7\xDA\xA4\x8F\x2C\x7D\x67\x54\xD2\xBE\x0A\x2D\xC2\xAF\x8A\x23\x52\x50\x85\x77\x9F\xA9\xC9\x22\x9C\x91\xCB\xD6\x71\xDE\xC6\xD2\xD4\x34\x56\xB5\xAF\x4E\xDD\x80\x3E\xC7\xD3\xBB\xDC\x39\xAE\xF6\xD0\xDF\xE5\x50\x44\xBF\xCE\x5F\x20\xB2\x4D\xD0\x76\x7E\xDC\xC0\xDF\x09\x36\x5A\xC5\x5A\xC4\xDB\x79\xF6\x7A\x21\xF7\xC3\x22\xB6\xD1\xDA\x20\x77\x66\xDD\x37\x9B\xCD\x22\x42\x76\x49\xDC\x83\x30\x5F\xE2\x00\x65\xDB\x40\x60\x4D\xE3\x81\x04\xD5\x38",
					"\xBB\xC2\xE6\x40\x54\x45\xE4\x81\x3A\x58\xE4\x0C\x6C\xDA\x41\x3D\x4D\xE5\x80\x0A\xD0\xE5\xA0\x6A\xCA\x41\x32\xE3\xDC\x7F\xFD\x34\xE5\x06\x3C\xE0\xC2\x86\x26\x61\x83\xCA\x53\xC7\x03\x20\xEB\xC8\xFD\xD6\x20\x28\xE8\xC3\x42\x89\xA0\xBA\xD2\xAB\xEC\xE9\x81\x36\x07\xC6\xCF\x51\xE0\x8C\x89\x23\xDB\x81\x34\xE3\xE8\x03\x2F\x68\xC1\xCA\x76\x20\x92\xCF\xE8\xEC\x02\x26\x6E\xC3\x82\x2D\x6D\xB5\xC1\x23\xEA\x95\xC9\x22\xD9\x92\xE5\xEA\x81\x38\x6E\xED\xCF\x53\xED\x77\x8A\x2A\xEF\x80\x35\xDA\xC8\x0A\x3D\x6C\xCC\xBB\x32\xE9\x87\xC9\x24\x4C\x09\x3F\xE9\xCF\x86\x2C\x71\xB1\xF3\x73\x20\x85\xFB\xE8\xDA\x81\x26\x72\xBC\xCA\x0D\xDB\x88\x4D\xE1\xD0\xDD\xD3\xD8\x85\x24\x70\xEF\xDC\x25\xDE\xE6\x90\xF1\xDD\xBA\xC1\x23\x75\x83\xF6\x38\x98\xB8\xE7\x51\x8D\xE6\xF0\x00\xAD\x60\xF6\x78\x2B\x5C\xF5\x81\x19\xF3\xE9\x35\xE0\x02\xEE\x32\xFD\x36\x57\x56\x67\xF6\x54\xF9\xF6\xF1\x3C\xFF\x36\x79\xF5\xF2\x20\xA2\xE4\xF5\xEE\xD5\x0B\x58\x3C\xC7\xF9\x20\xC9\xE2\x21\xDF\x80\xF9\x20\xE9\x69\xF2\x39\x03\xEF\xF8\x00\x51\xFF\xED\xD7\xD4\x7F\xFA\x1F\x3E\xCE",
					"\xF6\xEB\xD3\x21\x48\x79\xF6\x7A\xE0\xF5\x50\xB9\xAF\xF3\x7C\xBC\xDB\x0B\x59\xAB\xE5\xFF\xEB\xD9\xB9\xFD\x09\x71\xF8\xF9\xAF\xFD\x09\xB7\xDF\x0B\x58\xDA\xCA\xFB\xF2\x00\x00\x06\x41\x6C\x1D\xD1\x28\x77\xFE\x72\x7D\xAF\x73\x06\x03\x82\x1E\x0C\x74\x77\x09\x17\x80\xDD\x79\x7B\x66\x0B\x80\xBD\x16\x71\xA3\x73\x2B\xAE\x79\x7B\x69\x0C\x79\xE2\x17\x72\x0E\x86\x10\xC6\x78\x7B\x00\x8B\x06\x1C\x8D\x1B\x37\x7F\x81\x03\x11\x82\xC1\x70\x80\x6D\x05\x82\xBF\x18\x30\x78\x7E\x7C\x03\x1E\x7B\x00\x8F\x06\x14\x80\x30\x32\x82\x10\x05\x80\x80\x72\x04\x5E\x09\x16\x07\xCD\x7A\x10\x0A\x70\x80\x77\x0E\x83\x06\x1B\x07\xCB\x29\x7D\xFF\x7B\x78\x03\x1C\x07\x2E\x87\x1B\x15\x37\x81\x01\x1A\x84\x08\x89\x7B\x7E\x0F\x84\xBB\x1E\x74\x28\x87\x2C\x0A\x10\x77\xD4\x76\x10\x80\x08\x85\xD6\x1F\x32\x78\x72\x7E\x33\x8F\x7A\x82\x07\x83\x0C\x36\x86\x3A\x8F\x7A\x85\x06\x84\x03\x19\x08\xCB\x2C\x86\x01\x13\x84\x4C\x82\x10\x8A\x00\x87\x02\x1E\x08\xCB\x2B\x83\x29\x8F\x7A\xCC\x3A\x1C\x76\x8C\x85\xB9\x71\x88\x1F\x1D\x80\xAD\x2F\x7A\x8F\x0F\x38\x88\x81\x10\x7E\x8C",
					"\x2B\x1F\x10\x09\xDD\x62\x09\xCB\x2D\x88\x00\x03\x88\x01\x7A\x10\x93\x0D\x6D\x95\x0B\x2C\xDB\x2B\x79\xB9\x76\x09\x7A\x8E\x2C\x37\x3E\x78\x00\x0F\x89\x22\x87\x87\x01\x1A\x09\xA3\x8F\x2C\x44\x36\x8A\xA8\x8B\x82\xAA\x80\x00\x9E\x0D\x8A\xDC\x12\x76\x97\x5A\x10\x1F\x70\x8A\x00\x82\x0A\x6A\x8B\x1B\x6A\x79\x8B\x09\x1B\x8B\xA9\x80\x89\x0A\x15\x0A\xBF\x86\x1D\x41\x01\x64\xC4\x82\x8B\xC6\x89\x10\xA8\x09\x8C\xCA\x12\x78\xC2\x86\x10\x1E\x82\x10\x16\x83\x8B\xAB\x02\x8D\x44\x27\x8D\x01\x15\x74\x00\x8E\x0A\xAD\x82\x0B\xCB\x2E\x8D\x00\x00\x83\x00\x83\x0B\xAD\x87\x0B\xCB\x2F\x72\xBC\x83\x8B\xB8\x0C\x8D\x0A\x11\x39\xA6\x8E\x8E\xC5\x89\x89\x09\x1B\x0B\xF2\x89\x10\x97\x75\x8F\x5D\x8F\x7A\xBE\x0B\x8F\x06\x16\x3A\xA6\x87\x82\xD8\x8F\x7A\xC1\x02\x90\x8A\x26\x90\xDF\x8F\x7A\xC4\x0D\x8A\xC8\x0B\x2C\x0C\x97\x8E\xAF\x79\x0C\xAD\x8D\x0C\xCB\x20\x8E\x03\x1D\x8C\xF8\x84\x3B\xE2\x18\x8E\x03\x16\x8F\xCF\x8E\x91\xBD\x14\x65\xED\x2F\x7A\xCE\x0F\x38\x26\x93\x10\x1A\x93\x92\x03\x1F\x0C\xDD\x61\x0D\xCB\x2B\x92\x02\x10\x92\x2E\x92\x10\xD2\x0D\x6D",
					"\xD4\x0B\x2C\x51\x8B\x84\x37\x91\x10\xD5\x08\x75\xDC\x10\x05\xAD\x8D\x93\x55\x80\x80\xDA\x02\x94\xE2\x18\x3C\x09\x12\x46\x46\x91\x81\x00\x8F\x0D\x4A\x9D\x1B\xE8\x7C\x6E\x09\x1A\x85\x02\x19\x31\xB9\x74\x0E\x62\x81\x37\x2C\x3D\x5E\xC3\x6F\x44\x8B\x63\x96\x7F\x63\x52\x28\x43\x69\x2A\x14\x16\xB6\x6A\x55\xD7\x64\x1F\xFA\x3E\x96\xDF\x6F\x96\x16\x30\x00\x13\x7E\x11\x75\x9B\x48\xDD\x64\x97\x79\x96\x44\x46\x4A\x97\x6C\x6D\x97\x97\x6E\x96\x9E\x65\x8D\xB1\x13\x6B\x9F\x5E\x96\x19\x71\x64\x29\x1E\x47\x00\x00\x48\x62\x4D\x97\x8F\x90\x6A\x6E\x9E\x6A\x92\x98\x77\x8D\x93\x99\x73\x60\x6D\x1E\x1A\x99\xC2\x53\x97\xB5\x6F\x11\xC0\x5D\x97\xA1\x90\x9A\x6E\x93\x9A\x58\x79\x12\xBF\x40\x00\xC7\x40\x44\x79\x60",
				};
				vl::glr::DecompressSerializedData(compressed, true, dataSolidRows, dataRows, dataBlock, dataRemain, outputStream);
			}

			const wchar_t* ParserRuleName(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"QPrimaryFragment",
					L"QPrimaryAttributed",
					L"QPrimary",
					L"Query0",
					L"Query1",
					L"Query2",
					L"QueryRoot",
				};
				return results[index];
			}

			const wchar_t* ParserStateLabel(vl::vint index)
			{
				static const wchar_t* results[] = {
					L"[0][QPrimaryFragment] BEGIN ",
					L"[1][QPrimaryFragment] END [ENDING]",
					L"[2][QPrimaryFragment]< \"*\" @ [ \".\" NAME ] >",
					L"[3][QPrimaryFragment]< \"*\" [ \".\" @ NAME ] >",
					L"[4][QPrimaryFragment]< \"*\" [ \".\" NAME @ ] >",
					L"[5][QPrimaryFragment]< NAME @ [ \".\" NAME ] >",
					L"[6][QPrimaryFragment]< NAME [ \".\" @ NAME ] >",
					L"[7][QPrimaryFragment]< NAME [ \".\" NAME @ ] >",
					L"[8][QPrimaryAttributed] BEGIN ",
					L"[9][QPrimaryAttributed] END [ENDING]",
					L"[10][QPrimaryAttributed]<< !QPrimaryFragment @ >>",
					L"[11][QPrimaryAttributed]<< \"@\" @ [ NAME ] \":\" !QPrimaryFragment >>",
					L"[12][QPrimaryAttributed]<< \"@\" [ NAME @ ] \":\" !QPrimaryFragment >>",
					L"[13][QPrimaryAttributed]<< \"@\" [ NAME ] \":\" !QPrimaryFragment @ >>",
					L"[14][QPrimaryAttributed]<< \"@\" [ NAME ] \":\" @ !QPrimaryFragment >>",
					L"[15][QPrimary] BEGIN ",
					L"[16][QPrimary] END [ENDING]",
					L"[17][QPrimary]<< \"(\" !QueryRoot \")\" @ >>",
					L"[18][QPrimary]<< \"(\" !QueryRoot @ \")\" >>",
					L"[19][QPrimary]<< \"(\" @ !QueryRoot \")\" >>",
					L"[20][QPrimary]<< \"/\" !QPrimaryAttributed @ >>",
					L"[21][QPrimary]<< \"/\" @ !QPrimaryAttributed >>",
					L"[22][QPrimary]<< \"//\" !QPrimaryAttributed @ >>",
					L"[23][QPrimary]<< \"//\" @ !QPrimaryAttributed >>",
					L"[24][Query0] BEGIN ",
					L"[25][Query0] END [ENDING]",
					L"[26][Query0]< Query0 @ QPrimary >",
					L"[27][Query0]< Query0 QPrimary @ >",
					L"[28][Query0]<< !QPrimary @ >>",
					L"[29][Query1] BEGIN ",
					L"[30][Query1] END [ENDING]",
					L"[31][Query1]< Query1 \"*\" @ Query0 >",
					L"[32][Query1]< Query1 \"*\" Query0 @ >",
					L"[33][Query1]< Query1 \"^\" @ Query0 >",
					L"[34][Query1]< Query1 \"^\" Query0 @ >",
					L"[35][Query1]< Query1 @ \"*\" Query0 >",
					L"[36][Query1]< Query1 @ \"^\" Query0 >",
					L"[37][Query1]<< !Query0 @ >>",
					L"[38][Query2] BEGIN ",
					L"[39][Query2] END [ENDING]",
					L"[40][Query2]< Query2 \"+\" @ Query1 >",
					L"[41][Query2]< Query2 \"+\" Query1 @ >",
					L"[42][Query2]< Query2 \"-\" @ Query1 >",
					L"[43][Query2]< Query2 \"-\" Query1 @ >",
					L"[44][Query2]< Query2 @ \"+\" Query1 >",
					L"[45][Query2]< Query2 @ \"-\" Query1 >",
					L"[46][Query2]<< !Query1 @ >>",
					L"[47][QueryRoot] BEGIN ",
					L"[48][QueryRoot] END [ENDING]",
					L"[49][QueryRoot]<< !Query2 @ >>",
				};
				return results[index];
			}

			Parser::Parser()
				: vl::glr::ParserBase<GuiInstanceQueryTokens, ParserStates, GuiInstanceQueryAstInsReceiver>(&GuiInstanceQueryTokenDeleter, &GuiInstanceQueryLexerData, &GuiInstanceQueryParserData)
			{
			};

			vl::vint32_t Parser::FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const
			{
				return -1;
			};

			vl::Ptr<vl::presentation::instancequery::GuiIqQuery> Parser::ParseQueryRoot(const vl::WString& input, vl::vint codeIndex) const
			{
				 return ParseWithString<vl::presentation::instancequery::GuiIqQuery, ParserStates::QueryRoot>(input, this, codeIndex);
			};

			vl::Ptr<vl::presentation::instancequery::GuiIqQuery> Parser::ParseQueryRoot(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex) const
			{
				 return ParseWithTokens<vl::presentation::instancequery::GuiIqQuery, ParserStates::QueryRoot>(tokens, this, codeIndex);
			};
		}
	}
}
