/***********************************************************************
This file is generated by : Vczh GacUI Remote Protocol Generator
Licensed under https ://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocolSchema.h"

namespace vl::presentation::remoteprotocol
{
	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const ::vl::presentation::INativeWindow::WindowSizeState& value)
	{
	#define ERROR_MESSAGE_PREFIX L"vl::presentation::remoteprotocol::ConvertCustomTypeToJson(const ::vl::presentation::INativeWindow::WindowSizeState&)#"
		auto node = Ptr(new glr::json::JsonString);
		switch (value)
		{
		case ::vl::presentation::INativeWindow::WindowSizeState::Minimized: node->content.value = L"Minimized"; break;
		case ::vl::presentation::INativeWindow::WindowSizeState::Restored: node->content.value = L"Restored"; break;
		case ::vl::presentation::INativeWindow::WindowSizeState::Maximized: node->content.value = L"Maximized"; break;
		default: CHECK_FAIL(ERROR_MESSAGE_PREFIX L"Unsupported enum value.");
		}
		return node;
	#undef ERROR_MESSAGE_PREFIX
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const ::vl::presentation::NativeCoordinate& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"value"; 
			field->value = ConvertCustomTypeToJson(value.value);
			node->fields.Add(field);
		}
		return node;
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const ::vl::presentation::NativePoint& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"x"; 
			field->value = ConvertCustomTypeToJson(value.x);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"y"; 
			field->value = ConvertCustomTypeToJson(value.y);
			node->fields.Add(field);
		}
		return node;
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const ::vl::presentation::NativeSize& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"x"; 
			field->value = ConvertCustomTypeToJson(value.x);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"y"; 
			field->value = ConvertCustomTypeToJson(value.y);
			node->fields.Add(field);
		}
		return node;
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const ::vl::presentation::NativeRect& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"x1"; 
			field->value = ConvertCustomTypeToJson(value.x1);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"y1"; 
			field->value = ConvertCustomTypeToJson(value.y1);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"x2"; 
			field->value = ConvertCustomTypeToJson(value.x2);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"y2"; 
			field->value = ConvertCustomTypeToJson(value.y2);
			node->fields.Add(field);
		}
		return node;
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const ::vl::presentation::NativeMargin& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"left"; 
			field->value = ConvertCustomTypeToJson(value.left);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"top"; 
			field->value = ConvertCustomTypeToJson(value.top);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"right"; 
			field->value = ConvertCustomTypeToJson(value.right);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"bottom"; 
			field->value = ConvertCustomTypeToJson(value.bottom);
			node->fields.Add(field);
		}
		return node;
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const ::vl::presentation::FontProperties& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"fontFamily"; 
			field->value = ConvertCustomTypeToJson(value.fontFamily);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"size"; 
			field->value = ConvertCustomTypeToJson(value.size);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"bold"; 
			field->value = ConvertCustomTypeToJson(value.bold);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"italic"; 
			field->value = ConvertCustomTypeToJson(value.italic);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"underline"; 
			field->value = ConvertCustomTypeToJson(value.underline);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"strikeline"; 
			field->value = ConvertCustomTypeToJson(value.strikeline);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"antialias"; 
			field->value = ConvertCustomTypeToJson(value.antialias);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"verticalAntialias"; 
			field->value = ConvertCustomTypeToJson(value.verticalAntialias);
			node->fields.Add(field);
		}
		return node;
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const vl::presentation::remoteprotocol::FontConfig& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"defaultFont"; 
			field->value = ConvertCustomTypeToJson(value.defaultFont);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"supportedFonts"; 
			field->value = ConvertCustomTypeToJson(value.supportedFonts);
			node->fields.Add(field);
		}
		return node;
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const vl::presentation::remoteprotocol::ScreenConfig& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"bounds"; 
			field->value = ConvertCustomTypeToJson(value.bounds);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"clientBounds"; 
			field->value = ConvertCustomTypeToJson(value.clientBounds);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"scalingX"; 
			field->value = ConvertCustomTypeToJson(value.scalingX);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"scalingY"; 
			field->value = ConvertCustomTypeToJson(value.scalingY);
			node->fields.Add(field);
		}
		return node;
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const vl::presentation::remoteprotocol::WindowSizingConfig& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"bounds"; 
			field->value = ConvertCustomTypeToJson(value.bounds);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"clientBounds"; 
			field->value = ConvertCustomTypeToJson(value.clientBounds);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"sizeState"; 
			field->value = ConvertCustomTypeToJson(value.sizeState);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"customFramePadding"; 
			field->value = ConvertCustomTypeToJson(value.customFramePadding);
			node->fields.Add(field);
		}
		return node;
	}

	vl::Ptr<vl::glr::json::JsonNode> ConvertCustomTypeToJson(const vl::presentation::remoteprotocol::WindowShowing& value)
	{
		auto node = Ptr(new glr::json::JsonObject);
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"activate"; 
			field->value = ConvertCustomTypeToJson(value.activate);
			node->fields.Add(field);
		}
		{
			auto field = Ptr(new glr::json::JsonObjectField);
			field->name.value = L"sizeState"; 
			field->value = ConvertCustomTypeToJson(value.sizeState);
			node->fields.Add(field);
		}
		return node;
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, ::vl::presentation::INativeWindow::WindowSizeState& value)
	{
	#define ERROR_MESSAGE_PREFIX L"vl::presentation::remoteprotocol::ConvertJsonToCustomType(Ptr<JsonNode>, ::vl::presentation::INativeWindow::WindowSizeState&)#"
		auto jsonNode = node.Cast<glr::json::JsonString>();
		CHECK_ERROR(jsonNode, ERROR_MESSAGE_PREFIX L"Json node does not match the expected type.");
		if (jsonNode->content.value == L"Minimized") value = ::vl::presentation::INativeWindow::WindowSizeState::Minimized; else
		if (jsonNode->content.value == L"Restored") value = ::vl::presentation::INativeWindow::WindowSizeState::Restored; else
		if (jsonNode->content.value == L"Maximized") value = ::vl::presentation::INativeWindow::WindowSizeState::Maximized; else
		CHECK_FAIL(ERROR_MESSAGE_PREFIX L"Unsupported enum value.");
	#undef ERROR_MESSAGE_PREFIX
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, ::vl::presentation::NativeCoordinate& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, ::vl::presentation::NativePoint& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, ::vl::presentation::NativeSize& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, ::vl::presentation::NativeRect& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, ::vl::presentation::NativeMargin& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, ::vl::presentation::FontProperties& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, vl::presentation::remoteprotocol::FontConfig& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, vl::presentation::remoteprotocol::ScreenConfig& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, vl::presentation::remoteprotocol::WindowSizingConfig& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

	void ConvertJsonToCustomType(vl::Ptr<vl::glr::json::JsonNode> node, vl::presentation::remoteprotocol::WindowShowing& value)
	{
		CHECK_FAIL(L"Not Implemented!");
	}

}
