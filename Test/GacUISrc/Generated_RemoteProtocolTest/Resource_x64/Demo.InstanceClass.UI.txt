================================(1/7)================================
module <constructor>demo::ClickMeTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class ClickMeTabConstructor
    {
        @cpp:Protected
        var self : ::demo::ClickMeTab* = null of (::demo::ClickMeTab*);

        @cpp:Protected
        var buttonClickMe : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-ClickMeTab>Initialize(<this> : ::demo::ClickMeTab*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "Home");
            }
            {
                (buttonClickMe = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonClickMe", buttonClickMe);
            }
            (<precompile>0 = buttonClickMe.BoundsComposition);
            {
                (<precompile>0.AlignmentToParent = {left : 10; top : 10; right : (-1); bottom : (-1);} of (::presentation::Margin));
            }
            {
                (buttonClickMe.Alt = "X");
            }
            {
                (buttonClickMe.Text = "Click Me!");
            }
            {
                self.AddChild(buttonClickMe);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (buttonClickMe.Text = "You have clicked!");
                };
                attach(buttonClickMe.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(2/7)================================
module <instance>demo::ClickMeTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:File("ClickMeTab")
    @cpp:Friend(typeof(ClickMeTabConstructor))
    class ClickMeTab : ::presentation::controls::GuiTabPage, ClickMeTabConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::ClickMeTab");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-ClickMeTab>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(3/7)================================
module <constructor>demo::DataGridTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DataGridTabConstructor
    {
        @cpp:Protected
        var self : ::demo::DataGridTab* = null of (::demo::DataGridTab*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiBindableDataGrid* = null of (::presentation::controls::GuiBindableDataGrid*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-DataGridTab>Initialize(<this> : ::demo::DataGridTab*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "DataGrid");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>0.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 3);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>2.Alt = "X");
            }
            {
                (<precompile>2.Text = "Add 3 Rows");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>4.Alt = "Y");
            }
            {
                (<precompile>4.Text = "Clear");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(1, 0, 1, 3);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiBindableDataGrid*)(::presentation::theme::ThemeName::ListView));
            }
            {
                (<precompile>6.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>6.VerticalAlwaysVisible = false);
            }
            (<precompile>10 = <precompile>6.BoundsComposition);
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>6.Alt = "Z");
            }
            (<precompile>7 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>7.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::DataItem^) <item>);
                    return item.Name;
                });
            }
            {
                (<precompile>7.Size = 120 of (::system::Int64));
            }
            {
                (<precompile>7.Text = "Name");
            }
            {
                var <collection> = <precompile>6.Columns;
                <collection>.Add(<precompile>7);
            }
            (<precompile>8 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>8.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::DataItem^) <item>);
                    return item.Title;
                });
            }
            {
                (<precompile>8.Size = 160 of (::system::Int64));
            }
            {
                (<precompile>8.Text = "Title");
            }
            {
                var <collection> = <precompile>6.Columns;
                <collection>.Add(<precompile>8);
            }
            (<precompile>9 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>9.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::DataItem^) <item>);
                    return item.Description;
                });
            }
            {
                (<precompile>9.Size = 300 of (::system::Int64));
            }
            {
                (<precompile>9.Text = "Description");
            }
            {
                var <collection> = <precompile>6.Columns;
                <collection>.Add(<precompile>9);
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <for-begin>i : ::system::Int64 = 1;
                        var <for-end>i : ::system::Int64 = 3;
                        var i = <for-begin>i;
                        while ((i <= <for-end>i))
                        {
                            {
                                self.itemSource.Add(new (DataItem^)(Sys::LoremIpsumTitle(12), Sys::LoremIpsumTitle(20), Sys::LoremIpsumSentence(40)));
                            }
                            (i = (i + 1));
                        }
                    }
                };
                attach(<precompile>2.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.itemSource.Clear();
                };
                attach(<precompile>4.Clicked, <event-handler>);
            }
            {
                (<precompile>6.ItemSource = self.itemSource);
            }
        }

        new ()
        {
        }
    }
}

================================(4/7)================================
module <instance>demo::DataGridTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:File("DataGridTab")
    @cpp:Friend(typeof(DataGridTabConstructor))
    class DataGridTab : ::presentation::controls::GuiTabPage, DataGridTabConstructor
    {
        var itemSource : observe DataItem^[] = {};

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DataGridTab");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DataGridTab>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(5/7)================================
module <constructor>demo::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class MainWindowConstructor
    {
        @cpp:Protected
        var self : ::demo::MainWindow* = null of (::demo::MainWindow*);

        @cpp:Protected
        var dialogQueryClose : ::presentation::controls::GuiMessageDialog* = null of (::presentation::controls::GuiMessageDialog*);

        @cpp:Protected
        var menuFileNew : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiToolstripMenuBar* = null of (::presentation::controls::GuiToolstripMenuBar*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiToolstripGroupContainer* = null of (::presentation::controls::GuiToolstripGroupContainer*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::GuiToolstripGroupContainer* = null of (::presentation::controls::GuiToolstripGroupContainer*);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>21 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>23 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>24 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>25 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>26 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>27 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>28 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>29 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>30 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>31 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>32 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>33 : ::demo::ClickMeTab* = null of (::demo::ClickMeTab*);

        @cpp:Protected
        var <precompile>34 : ::demo::DataGridTab* = null of (::demo::DataGridTab*);

        @cpp:Protected
        var <precompile>35 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-MainWindow>Initialize(<this> : ::demo::MainWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ClientSize = {x : 640; y : 480;} of (::presentation::Size));
            }
            (<precompile>35 = self.BoundsComposition);
            {
                (<precompile>35.PreferredMinSize = {x : 640; y : 480;} of (::presentation::Size));
            }
            {
                (self.Text = "Remote Protocol Test");
            }
            (dialogQueryClose = new (::presentation::controls::GuiMessageDialog*)());
            <this>.SetNamedObject("dialogQueryClose", dialogQueryClose);
            {
                (dialogQueryClose.Icon = IconQuestion of (::presentation::INativeDialogService::MessageBoxIcons));
            }
            {
                (dialogQueryClose.DefaultButton = DefaultSecond of (::presentation::INativeDialogService::MessageBoxDefaultButton));
            }
            {
                (dialogQueryClose.Input = DisplayOKCancel of (::presentation::INativeDialogService::MessageBoxButtonsInput));
            }
            {
                (dialogQueryClose.Text = "Do you want to exit?");
            }
            {
                self.AddComponent(dialogQueryClose);
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 1);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiToolstripMenuBar*)(::presentation::theme::ThemeName::MenuBar));
            }
            (<precompile>29 = <precompile>2.BoundsComposition);
            {
                (<precompile>29.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>3 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuBarButton));
            }
            {
                (<precompile>3.Text = "File");
            }
            (<precompile>4 = <precompile>3.EnsureToolstripSubMenu());
            {
                (<precompile>5 = new (::presentation::controls::GuiToolstripGroupContainer*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (menuFileNew = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
                <this>.SetNamedObject("menuFileNew", menuFileNew);
            }
            {
                (menuFileNew.Text = "New");
            }
            (<precompile>7 = menuFileNew.EnsureToolstripSubMenu());
            {
                (<precompile>8 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>8.Text = "Plain Text");
            }
            {
                <precompile>7.ToolstripItems.Add(<precompile>8);
            }
            {
                (<precompile>9 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>9.Text = "XML");
            }
            {
                <precompile>7.ToolstripItems.Add(<precompile>9);
            }
            {
                (<precompile>10 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>10.Text = "Json");
            }
            {
                <precompile>7.ToolstripItems.Add(<precompile>10);
            }
            {
                <precompile>6.ToolstripItems.Add(menuFileNew);
            }
            {
                (<precompile>11 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>11.Text = "Open ...");
            }
            {
                <precompile>6.ToolstripItems.Add(<precompile>11);
            }
            {
                <precompile>5.ToolstripItems.Add(<precompile>6);
            }
            {
                (<precompile>12 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>13 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>13.Text = "Save");
            }
            {
                <precompile>12.ToolstripItems.Add(<precompile>13);
            }
            {
                (<precompile>14 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>14.Text = "Save As ...");
            }
            {
                <precompile>12.ToolstripItems.Add(<precompile>14);
            }
            {
                <precompile>5.ToolstripItems.Add(<precompile>12);
            }
            {
                (<precompile>15 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>16 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>16.Text = "Exit");
            }
            {
                <precompile>15.ToolstripItems.Add(<precompile>16);
            }
            {
                <precompile>5.ToolstripItems.Add(<precompile>15);
            }
            {
                <precompile>4.ToolstripItems.Add(<precompile>5);
            }
            {
                <precompile>2.ToolstripItems.Add(<precompile>3);
            }
            {
                (<precompile>17 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuBarButton));
            }
            {
                (<precompile>17.Text = "Edit");
            }
            (<precompile>18 = <precompile>17.EnsureToolstripSubMenu());
            {
                (<precompile>19 = new (::presentation::controls::GuiToolstripGroupContainer*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>20 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>21 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>21.Text = "Undo");
            }
            {
                <precompile>20.ToolstripItems.Add(<precompile>21);
            }
            {
                (<precompile>22 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>22.Text = "Redo");
            }
            {
                <precompile>20.ToolstripItems.Add(<precompile>22);
            }
            {
                <precompile>19.ToolstripItems.Add(<precompile>20);
            }
            {
                (<precompile>23 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>24 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>24.Text = "Cut");
            }
            {
                <precompile>23.ToolstripItems.Add(<precompile>24);
            }
            {
                (<precompile>25 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>25.Text = "Copy");
            }
            {
                <precompile>23.ToolstripItems.Add(<precompile>25);
            }
            {
                (<precompile>26 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>26.Text = "Paste");
            }
            {
                <precompile>23.ToolstripItems.Add(<precompile>26);
            }
            {
                <precompile>19.ToolstripItems.Add(<precompile>23);
            }
            {
                (<precompile>27 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>28 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>28.Text = "Select All");
            }
            {
                <precompile>27.ToolstripItems.Add(<precompile>28);
            }
            {
                <precompile>19.ToolstripItems.Add(<precompile>27);
            }
            {
                <precompile>18.ToolstripItems.Add(<precompile>19);
            }
            {
                <precompile>2.ToolstripItems.Add(<precompile>17);
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>30 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>30.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>31 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (<precompile>33 = new (::demo::ClickMeTab*)());
            {
                (<precompile>33.Alt = "A");
            }
            {
                var <collection> = <precompile>31.Pages;
                <collection>.Add(<precompile>33);
            }
            (<precompile>34 = new (::demo::DataGridTab*)());
            {
                (<precompile>34.Alt = "B");
            }
            {
                var <collection> = <precompile>31.Pages;
                <collection>.Add(<precompile>34);
            }
            (<precompile>32 = <precompile>31.BoundsComposition);
            {
                (<precompile>32.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>30.AddChild(<precompile>31.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>30);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                (dialogQueryClose.Title = self.Text);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    GuiApplication::GetApplication().InvokeInMainThread(self, func () : (void)
                    {
                        self.Hide();
                    });
                };
                attach(<precompile>16.Clicked, <event-handler>);
            }
            {
                (<precompile>21.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Undo", true)));
            }
            {
                (<precompile>22.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Redo", true)));
            }
            {
                (<precompile>24.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Cut", true)));
            }
            {
                (<precompile>25.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Copy", true)));
            }
            {
                (<precompile>26.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Paste", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiRequestEventArgs*) : (::system::Void)
                {
                    if ((dialogQueryClose.ShowDialog() == INativeDialogService::MessageBoxButtonsOutput::SelectCancel))
                    {
                        (arguments.cancel = true);
                    }
                };
                attach(self.WindowClosing, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(6/7)================================
module <instance>demo::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:File("MainWindow")
    @cpp:Friend(typeof(MainWindowConstructor))
    class MainWindow : ::presentation::controls::GuiWindow, MainWindowConstructor
    {
        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::MainWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-MainWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(7/7)================================
module viewmodel;
using system::*;
using presentation::*;

namespace demo
{
    class DataItem
    {
        @cpp:Private
        var <prop>Name : string = "";

        func GetName() : (string)
        {
            return <prop>Name;
        }

        func SetName(<value> : string) : (void)
        {
            (<prop>Name = <value>);
        }

        prop Name : string{GetName, SetName}

        @cpp:Private
        var <prop>Title : string = "";

        func GetTitle() : (string)
        {
            return <prop>Title;
        }

        func SetTitle(<value> : string) : (void)
        {
            (<prop>Title = <value>);
        }

        prop Title : string{GetTitle, SetTitle}

        @cpp:Private
        var <prop>Description : string = "";

        func GetDescription() : (string)
        {
            return <prop>Description;
        }

        func SetDescription(<value> : string) : (void)
        {
            (<prop>Description = <value>);
        }

        prop Description : string{GetDescription, SetDescription}

        new (name : string, title : string, description : string)
        {
            (Name = name);
            (Title = title);
            (Description = description);
        }
    }
}

