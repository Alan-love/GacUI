================================(1/7)================================
module <constructor>demo::ClickMeTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class ClickMeTabConstructor
    {
        @cpp:Protected
        var self : ::demo::ClickMeTab* = null of (::demo::ClickMeTab*);

        @cpp:Protected
        var buttonClickMe : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-ClickMeTab>Initialize(<this> : ::demo::ClickMeTab*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "Home");
            }
            {
                (buttonClickMe = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonClickMe", buttonClickMe);
            }
            (<precompile>0 = buttonClickMe.BoundsComposition);
            {
                (<precompile>0.AlignmentToParent = {left : 10; top : 10; right : (-1); bottom : (-1);} of (::presentation::Margin));
            }
            {
                (buttonClickMe.Alt = "X");
            }
            {
                (buttonClickMe.Text = "Click Me!");
            }
            {
                self.AddChild(buttonClickMe);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (buttonClickMe.Text = "You have clicked!");
                };
                attach(buttonClickMe.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(2/7)================================
module <instance>demo::ClickMeTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:File("ClickMeTab")
    @cpp:Friend(typeof(ClickMeTabConstructor))
    class ClickMeTab : ::presentation::controls::GuiTabPage, ClickMeTabConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::ClickMeTab");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-ClickMeTab>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(3/7)================================
module <constructor>demo::DataGridTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DataGridTabConstructor
    {
        @cpp:Protected
        var self : ::demo::DataGridTab* = null of (::demo::DataGridTab*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiBindableDataGrid* = null of (::presentation::controls::GuiBindableDataGrid*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-DataGridTab>Initialize(<this> : ::demo::DataGridTab*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "DataGrid");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>0.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 3);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>2.Alt = "X");
            }
            {
                (<precompile>2.Text = "Add 3 Rows");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>4.Alt = "Y");
            }
            {
                (<precompile>4.Text = "Clear");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(1, 0, 1, 3);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiBindableDataGrid*)(::presentation::theme::ThemeName::ListView));
            }
            {
                (<precompile>6.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>6.VerticalAlwaysVisible = false);
            }
            (<precompile>10 = <precompile>6.BoundsComposition);
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>6.Alt = "Z");
            }
            (<precompile>7 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>7.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::DataItem^) <item>);
                    return item.Name;
                });
            }
            {
                (<precompile>7.Size = 120 of (::system::Int64));
            }
            {
                (<precompile>7.Text = "Name");
            }
            {
                var <collection> = <precompile>6.Columns;
                <collection>.Add(<precompile>7);
            }
            (<precompile>8 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>8.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::DataItem^) <item>);
                    return item.Title;
                });
            }
            {
                (<precompile>8.Size = 160 of (::system::Int64));
            }
            {
                (<precompile>8.Text = "Title");
            }
            {
                var <collection> = <precompile>6.Columns;
                <collection>.Add(<precompile>8);
            }
            (<precompile>9 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>9.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::DataItem^) <item>);
                    return item.Description;
                });
            }
            {
                (<precompile>9.Size = 300 of (::system::Int64));
            }
            {
                (<precompile>9.Text = "Description");
            }
            {
                var <collection> = <precompile>6.Columns;
                <collection>.Add(<precompile>9);
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <for-begin>i : ::system::Int64 = 1;
                        var <for-end>i : ::system::Int64 = 3;
                        var i = <for-begin>i;
                        while ((i <= <for-end>i))
                        {
                            {
                                self.itemSource.Add(new (DataItem^)(Sys::LoremIpsumTitle(12), Sys::LoremIpsumTitle(20), Sys::LoremIpsumSentence(40)));
                            }
                            (i = (i + 1));
                        }
                    }
                };
                attach(<precompile>2.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.itemSource.Clear();
                };
                attach(<precompile>4.Clicked, <event-handler>);
            }
            {
                (<precompile>6.ItemSource = self.itemSource);
            }
        }

        new ()
        {
        }
    }
}

================================(4/7)================================
module <instance>demo::DataGridTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:File("DataGridTab")
    @cpp:Friend(typeof(DataGridTabConstructor))
    class DataGridTab : ::presentation::controls::GuiTabPage, DataGridTabConstructor
    {
        var itemSource : observe DataItem^[] = {};

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DataGridTab");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DataGridTab>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(5/7)================================
module <constructor>demo::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class MainWindowConstructor
    {
        @cpp:Protected
        var self : ::demo::MainWindow* = null of (::demo::MainWindow*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::demo::ClickMeTab* = null of (::demo::ClickMeTab*);

        @cpp:Protected
        var <precompile>3 : ::demo::DataGridTab* = null of (::demo::DataGridTab*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-MainWindow>Initialize(<this> : ::demo::MainWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ClientSize = {x : 640; y : 480;} of (::presentation::Size));
            }
            (<precompile>4 = self.BoundsComposition);
            {
                (<precompile>4.PreferredMinSize = {x : 640; y : 480;} of (::presentation::Size));
            }
            {
                (self.Text = "Remote Protocol Test");
            }
            {
                (<precompile>0 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (<precompile>2 = new (::demo::ClickMeTab*)());
            {
                (<precompile>2.Alt = "A");
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>2);
            }
            (<precompile>3 = new (::demo::DataGridTab*)());
            {
                (<precompile>3.Alt = "B");
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>3);
            }
            (<precompile>1 = <precompile>0.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(<precompile>0);
            }
        }

        new ()
        {
        }
    }
}

================================(6/7)================================
module <instance>demo::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:File("MainWindow")
    @cpp:Friend(typeof(MainWindowConstructor))
    class MainWindow : ::presentation::controls::GuiWindow, MainWindowConstructor
    {
        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::MainWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-MainWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(7/7)================================
module viewmodel;
using system::*;
using presentation::*;

namespace demo
{
    class DataItem
    {
        @cpp:Private
        var <prop>Name : string = "";

        func GetName() : (string)
        {
            return <prop>Name;
        }

        func SetName(<value> : string) : (void)
        {
            (<prop>Name = <value>);
        }

        prop Name : string{GetName, SetName}

        @cpp:Private
        var <prop>Title : string = "";

        func GetTitle() : (string)
        {
            return <prop>Title;
        }

        func SetTitle(<value> : string) : (void)
        {
            (<prop>Title = <value>);
        }

        prop Title : string{GetTitle, SetTitle}

        @cpp:Private
        var <prop>Description : string = "";

        func GetDescription() : (string)
        {
            return <prop>Description;
        }

        func SetDescription(<value> : string) : (void)
        {
            (<prop>Description = <value>);
        }

        prop Description : string{GetDescription, SetDescription}

        new (name : string, title : string, description : string)
        {
            (Name = name);
            (Title = title);
            (Description = description);
        }
    }
}

