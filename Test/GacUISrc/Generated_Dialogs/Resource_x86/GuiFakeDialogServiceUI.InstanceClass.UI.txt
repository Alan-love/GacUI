================================(1/3)================================
module <constructor>gaclib_controls::MessageBoxWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class MessageBoxWindowConstructor
    {
        @cpp:Protected
        var ViewModel : ::presentation::IMessageBoxDialogViewModel^ = null of (::presentation::IMessageBoxDialogViewModel^);

        @cpp:Protected
        var self : ::gaclib_controls::MessageBoxWindow* = null of (::gaclib_controls::MessageBoxWindow*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-MessageBoxWindow>Initialize(<this> : ::gaclib_controls::MessageBoxWindow*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.IconVisible = false);
            }
            {
                (self.SizeBox = false);
            }
            {
                (self.MinimizedBox = false);
            }
            {
                (self.MaximizedBox = false);
            }
            {
                (self.ShowInTaskBar = false);
            }
            {
                (self.ClientSize = {x : 240; y : 120;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.PreferredMinSize = {x : 48; y : 48;} of (::presentation::Size));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>4 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>4.Stretch = true);
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                <precompile>1.AddChild(<precompile>3);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            (<precompile>7 = <precompile>6.BoundsComposition);
            {
                (<precompile>7.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                (<precompile>4.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "Images/None", true)).Image);
            }
            {
                (<precompile>6.Text = ViewModel.Text);
            }
            {
                (self.Text = ViewModel.Title);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(2/3)================================
module <instance>gaclib_controls::MessageBoxWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(MessageBoxWindowConstructor))
    class MessageBoxWindow : ::presentation::controls::GuiWindow, MessageBoxWindowConstructor
    {
        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        var <parameter>ViewModel : presentation::IMessageBoxDialogViewModel^ = null of (::presentation::IMessageBoxDialogViewModel^);

        func GetViewModel() : (presentation::IMessageBoxDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IMessageBoxDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IMessageBoxDialogViewModel^)
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::MessageBoxWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-MessageBoxWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(3/3)================================
module <localized-strings>gaclib_controls::DialogStrings;

namespace gaclib_controls
{
    interface IDialogStringsStrings
    {
        func Abort() : (::system::String);

        func Cancel() : (::system::String);

        func Continue() : (::system::String);

        func Ignore() : (::system::String);

        func No() : (::system::String);

        func OK() : (::system::String);

        func Retry() : (::system::String);

        func TryAgain() : (::system::String);

        func Yes() : (::system::String);
    }
}

namespace gaclib_controls
{
    class DialogStrings
    {
        static func <ls>First(<ls>formats : ::system::String{}) : (::system::String)
        {
            {
                var <for-enumerable><ls>format = <ls>formats of (::system::Enumerable^);
                var <for-enumerator><ls>format = <for-enumerable><ls>format.CreateEnumerator();
                while (<for-enumerator><ls>format.Next())
                {
                    var <ls>format = (cast (::system::String) <for-enumerator><ls>format.GetCurrent());
                    {
                        return <ls>format;
                    }
                }
            }
            return "";
        }

        static func Get(<ls>locale : ::system::Locale) : (IDialogStringsStrings^)
        {
            return new (IDialogStringsStrings^)
            {
                override func Abort() : (::system::String)
                {
                    return "Abort";
                }

                override func Cancel() : (::system::String)
                {
                    return "Cancel";
                }

                override func Continue() : (::system::String)
                {
                    return "Continue";
                }

                override func Ignore() : (::system::String)
                {
                    return "Ignore";
                }

                override func No() : (::system::String)
                {
                    return "No";
                }

                override func OK() : (::system::String)
                {
                    return "OK";
                }

                override func Retry() : (::system::String)
                {
                    return "Retry";
                }

                override func TryAgain() : (::system::String)
                {
                    return "Try Again";
                }

                override func Yes() : (::system::String)
                {
                    return "Yes";
                }
            };
        }

        new ()
        {
        }
    }
}

