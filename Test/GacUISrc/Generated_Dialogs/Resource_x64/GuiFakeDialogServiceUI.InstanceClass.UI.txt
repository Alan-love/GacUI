================================(1/11)================================
module <constructor>gaclib_controls::ColorComponentControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class ColorComponentControlConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

        @cpp:Protected
        var textBox : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var tracker : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-ColorComponentControl>Initialize(<this> : ::gaclib_controls::ColorComponentControl*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>5 = self.BoundsComposition);
            {
                (<precompile>5.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(1, 2);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Absolute; absolute : 48;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (textBox = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
            }
            (<precompile>2 = textBox.BoundsComposition);
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(textBox.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            {
                (tracker = new (::presentation::controls::GuiScroll*)(::presentation::theme::ThemeName::HTracker));
                tracker.SetPageSize(0);
            }
            {
                (tracker.BigMove = 16 of (::system::Int64));
            }
            {
                (tracker.SmallMove = 1 of (::system::Int64));
            }
            {
                (tracker.PageSize = 1 of (::system::Int64));
            }
            {
                (tracker.TotalSize = 256 of (::system::Int64));
            }
            (<precompile>4 = tracker.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>3.AddChild(tracker.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (string) <bind-cache>0.Value) of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gaclib_controls::ColorComponentControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorComponentControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = textBox.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (textBox.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var value = ((cast (int) textBox.Text) ?? (-1));
                    if ((value == (-1)))
                    {
                        return;
                    }
                    else if ((value < 0))
                    {
                        (tracker.Position = 0);
                    }
                    else if ((value > 255))
                    {
                        (tracker.Position = 255);
                    }
                    else
                    {
                        (tracker.Position = value);
                    }
                };
                attach(textBox.TextChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Position of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (tracker ?? null of (::presentation::controls::GuiScroll*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PositionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PositionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiScroll*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Value;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Value = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(2/11)================================
module <instance>gaclib_controls::ColorComponentControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(ColorComponentControlConstructor))
    class ColorComponentControl : ::presentation::controls::GuiCustomControl, ColorComponentControlConstructor
    {
        @cpp:Private
        var <prop>Value : int = 0;

        func GetValue() : (int)
        {
            return <prop>Value;
        }

        func SetValue(<value> : int) : (void)
        {
            if ((<prop>Value != <value>))
            {
                (<prop>Value = <value>);
                ValueChanged();
            }
        }

        event ValueChanged();

        prop Value : int{GetValue, SetValue : ValueChanged}

        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::ColorComponentControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-ColorComponentControl>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(3/11)================================
module <constructor>gaclib_controls::ColorDialogControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class ColorDialogControlConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

        @cpp:Protected
        var ViewModel : ::presentation::IColorDialogViewModel^ = null of (::presentation::IColorDialogViewModel^);

        @cpp:Protected
        var colorRed : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

        @cpp:Protected
        var colorGreen : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

        @cpp:Protected
        var colorBlue : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-ColorDialogControl>Initialize(<this> : ::gaclib_controls::ColorDialogControl*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            (<precompile>17 = self.BoundsComposition);
            {
                (<precompile>17.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(4, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(2, 0, 1, 1);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(3, 0, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(0, 1, 1, 1);
            }
            (colorRed = new (::gaclib_controls::ColorComponentControl*)());
            (<precompile>10 = colorRed.BoundsComposition);
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>9.AddChild(colorRed.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>9);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>11.SetSite(1, 1, 1, 1);
            }
            (colorGreen = new (::gaclib_controls::ColorComponentControl*)());
            (<precompile>12 = colorGreen.BoundsComposition);
            {
                (<precompile>12.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>11.AddChild(colorGreen.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>11);
            }
            (<precompile>13 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>13.SetSite(2, 1, 1, 1);
            }
            (colorBlue = new (::gaclib_controls::ColorComponentControl*)());
            (<precompile>14 = colorBlue.BoundsComposition);
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>13.AddChild(colorBlue.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>13);
            }
            (<precompile>15 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>15.PreferredMinSize = {x : 256;} of (::presentation::Size));
            }
            {
                <precompile>15.SetSite(3, 1, 1, 1);
            }
            (<precompile>16 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>15.OwnedElement = <precompile>16);
            }
            {
                <precompile>0.AddChild(<precompile>15);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Red();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Green();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Blue();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Color();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (colorRed.Value = (cast (int) ViewModel.Color.r));
            }
            {
                (colorGreen.Value = (cast (int) ViewModel.Color.g));
            }
            {
                (colorBlue.Value = (cast (int) ViewModel.Color.b));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>0_1 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>0_2 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.ReadColor() of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>0_1() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>0_2() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.colorRed.ValueChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>0_1 = (attach(<bind-cache>0.colorGreen.ValueChanged, <bind-callback>0_1) ?? null));
                            (<bind-handler>0_2 = (attach(<bind-cache>0.colorBlue.ValueChanged, <bind-callback>0_2) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.colorRed.ValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>0_1 is not null)
                            {
                                detach(<bind-cache>0.colorGreen.ValueChanged, <bind-handler>0_1);
                                (<bind-handler>0_1 = null);
                            }
                            if (<bind-handler>0_2 is not null)
                            {
                                detach(<bind-cache>0.colorBlue.ValueChanged, <bind-handler>0_2);
                                (<bind-handler>0_2 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>0_1 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>0_2 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>16.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>16.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(4/11)================================
module <instance>gaclib_controls::ColorDialogControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(ColorDialogControlConstructor))
    class ColorDialogControl : ::presentation::controls::GuiCustomControl, ColorDialogControlConstructor
    {
        func ReadColor() : (Color)
        {
            return {r : (cast (UInt8) colorRed.Value); g : (cast (UInt8) colorGreen.Value); b : (cast (UInt8) colorBlue.Value);};
        }

        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        var <parameter>ViewModel : presentation::IColorDialogViewModel^ = null of (::presentation::IColorDialogViewModel^);

        func GetViewModel() : (presentation::IColorDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IColorDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IColorDialogViewModel^)
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::ColorDialogControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-ColorDialogControl>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(5/11)================================
module <constructor>gaclib_controls::ColorDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class ColorDialogWindowConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::ColorDialogWindow* = null of (::gaclib_controls::ColorDialogWindow*);

        @cpp:Protected
        var ViewModel : ::presentation::IColorDialogViewModel^ = null of (::presentation::IColorDialogViewModel^);

        @cpp:Protected
        var colorControl : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-ColorDialogWindow>Initialize(<this> : ::gaclib_controls::ColorDialogWindow*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.IconVisible = false);
            }
            {
                (self.MinimizedBox = false);
            }
            {
                (self.MaximizedBox = false);
            }
            {
                (self.ShowInTaskBar = false);
            }
            {
                (self.ClientSize = {x : 240; y : 120;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 10; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 3);
            }
            (colorControl = new (::gaclib_controls::ColorDialogControl*)(ViewModel));
            (<precompile>2 = colorControl.BoundsComposition);
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(colorControl.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>5 = <precompile>4.BoundsComposition);
            {
                (<precompile>5.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(1, 2, 1, 1);
            }
            {
                (<precompile>7 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>8 = <precompile>7.BoundsComposition);
            {
                (<precompile>8.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>6.AddChild(<precompile>7.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>6);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogWindow* = null of (::gaclib_controls::ColorDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.OK();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (ViewModel.Confirmed = true);
                    (ViewModel.Color = colorControl.ReadColor());
                    self.Close();
                };
                attach(<precompile>4.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogWindow* = null of (::gaclib_controls::ColorDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Cancel();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Close();
                };
                attach(<precompile>7.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogWindow* = null of (::gaclib_controls::ColorDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.ColorDialogTitle();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(6/11)================================
module <instance>gaclib_controls::ColorDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(ColorDialogWindowConstructor))
    class ColorDialogWindow : ::presentation::controls::GuiWindow, ColorDialogWindowConstructor
    {
        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        var <parameter>ViewModel : presentation::IColorDialogViewModel^ = null of (::presentation::IColorDialogViewModel^);

        func GetViewModel() : (presentation::IColorDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IColorDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IColorDialogViewModel^)
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::ColorDialogWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-ColorDialogWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(7/11)================================
module <constructor>gaclib_controls::MessageBoxButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class MessageBoxButtonTemplateConstructor
    {
        @cpp:Protected
        var Action : ::presentation::IMessageBoxDialogAction^ = null of (::presentation::IMessageBoxDialogAction^);

        @cpp:Protected
        var self : ::gaclib_controls::MessageBoxButtonTemplate* = null of (::gaclib_controls::MessageBoxButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-MessageBoxButtonTemplate>Initialize(<this> : ::gaclib_controls::MessageBoxButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            (Action = <this>.Action);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>0 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>1 = <precompile>0.BoundsComposition);
            {
                (<precompile>1.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(<precompile>0.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::MessageBoxButtonTemplate* = null of (::gaclib_controls::MessageBoxButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.GetButtonText(Action.Button, <bind-cache>0.Strings) of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gaclib_controls::MessageBoxButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::MessageBoxButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    Action.PerformAction();
                    self.RelatedControlHost.Close();
                };
                attach(<precompile>0.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(8/11)================================
module <instance>gaclib_controls::MessageBoxButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(MessageBoxButtonTemplateConstructor))
    class MessageBoxButtonTemplate : ::presentation::templates::GuiControlTemplate, MessageBoxButtonTemplateConstructor
    {
        func GetButtonText(button : INativeDialogService::MessageBoxButtonsOutput, strings : IDialogStringsStrings^) : (string)
        {
            {
                var <switch>0 : ::presentation::INativeDialogService::MessageBoxButtonsOutput = button;
                if ((<switch>0 == SelectOK of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.OK();
                }
                else if ((<switch>0 == SelectCancel of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Cancel();
                }
                else if ((<switch>0 == SelectYes of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Yes();
                }
                else if ((<switch>0 == SelectNo of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.No();
                }
                else if ((<switch>0 == SelectRetry of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Retry();
                }
                else if ((<switch>0 == SelectAbort of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Abort();
                }
                else if ((<switch>0 == SelectIgnore of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Ignore();
                }
                else if ((<switch>0 == SelectTryAgain of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.TryAgain();
                }
                else if ((<switch>0 == SelectContinue of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Continue();
                }
                else
                {
                    return "";
                }
            }
        }

        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        var <parameter>Action : presentation::IMessageBoxDialogAction^ = null of (::presentation::IMessageBoxDialogAction^);

        func GetAction() : (presentation::IMessageBoxDialogAction^)
        {
            return <parameter>Action;
        }

        prop Action : presentation::IMessageBoxDialogAction^{GetAction}

        new* (<ctor-parameter>Action : presentation::IMessageBoxDialogAction^)
        {
            (<parameter>Action = <ctor-parameter>Action);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::MessageBoxButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-MessageBoxButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(9/11)================================
module <constructor>gaclib_controls::MessageBoxWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class MessageBoxWindowConstructor
    {
        @cpp:Protected
        var ViewModel : ::presentation::IMessageBoxDialogViewModel^ = null of (::presentation::IMessageBoxDialogViewModel^);

        @cpp:Protected
        var <precompile>0 : ::gaclib_controls::MessageBoxWindow* = null of (::gaclib_controls::MessageBoxWindow*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiRepeatStackComposition* = null of (::presentation::compositions::GuiRepeatStackComposition*);

        @cpp:Protected
        func <gaclib_controls-MessageBoxWindow>Initialize(<this> : ::gaclib_controls::MessageBoxWindow*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (<precompile>0.IconVisible = false);
            }
            {
                (<precompile>0.SizeBox = false);
            }
            {
                (<precompile>0.MinimizedBox = false);
            }
            {
                (<precompile>0.MaximizedBox = false);
            }
            {
                (<precompile>0.ShowInTaskBar = false);
            }
            {
                (<precompile>0.ClientSize = {x : 240; y : 120;} of (::presentation::Size));
            }
            (<precompile>1 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>1.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>1.BorderVisible = false);
            }
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 10; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>1.SetRowsAndColumns(3, 2);
                <precompile>1.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(0, 0, 1, 1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>3.BorderVisible = false);
            }
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>3.SetRowsAndColumns(3, 1);
                <precompile>3.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            (<precompile>5 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>5.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            (<precompile>6 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>6.PreferredMinSize = {x : 48; y : 48;} of (::presentation::Size));
            }
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>6.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>7 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>7.Stretch = true);
            }
            {
                (<precompile>6.OwnedElement = <precompile>7);
            }
            {
                <precompile>4.AddChild(<precompile>6);
            }
            {
                <precompile>3.AddChild(<precompile>4);
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            (<precompile>8 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>8.SetSite(0, 1, 1, 1);
            }
            (<precompile>9 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>9.BorderVisible = false);
            }
            {
                (<precompile>9.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>9.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>9.SetRowsAndColumns(3, 1);
                <precompile>9.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>11 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            (<precompile>12 = <precompile>11.BoundsComposition);
            {
                (<precompile>12.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>10.AddChild(<precompile>11.BoundsComposition);
            }
            {
                <precompile>9.AddChild(<precompile>10);
            }
            {
                <precompile>8.AddChild(<precompile>9);
            }
            {
                <precompile>1.AddChild(<precompile>8);
            }
            (<precompile>13 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>13.SetSite(2, 0, 1, 2);
            }
            (<precompile>14 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>14.BorderVisible = false);
            }
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>14.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>14.SetRowsAndColumns(1, 3);
                <precompile>14.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>14.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>14.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>14.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>15 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>15.SetSite(0, 1, 1, 1);
            }
            (<precompile>16 = new (::presentation::compositions::GuiRepeatStackComposition*)());
            {
                (<precompile>16.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTemplate*)
                {
                    {
                        if (<viewModel> is (::presentation::IMessageBoxDialogAction^))
                        {
                            return new (::gaclib_controls::MessageBoxButtonTemplate*)((cast (::presentation::IMessageBoxDialogAction^) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            {
                (<precompile>16.Padding = 5 of (::system::Int64));
            }
            {
                (<precompile>16.Direction = Horizontal of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>16.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>16.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>15.AddChild(<precompile>16);
            }
            {
                <precompile>14.AddChild(<precompile>15);
            }
            {
                <precompile>13.AddChild(<precompile>14);
            }
            {
                <precompile>1.AddChild(<precompile>13);
            }
            {
                <precompile>0.ContainerComposition.AddChild(<precompile>1);
            }
            {
                (<precompile>7.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "Images/None", true)).Image);
            }
            {
                (<precompile>11.Text = ViewModel.Text);
            }
            {
                (<precompile>16.ItemSource = ViewModel.Buttons);
            }
            {
                (<precompile>0.Text = ViewModel.Title);
            }
        }

        new ()
        {
        }
    }
}

================================(10/11)================================
module <instance>gaclib_controls::MessageBoxWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(MessageBoxWindowConstructor))
    class MessageBoxWindow : ::presentation::controls::GuiWindow, MessageBoxWindowConstructor
    {
        var <parameter>ViewModel : presentation::IMessageBoxDialogViewModel^ = null of (::presentation::IMessageBoxDialogViewModel^);

        func GetViewModel() : (presentation::IMessageBoxDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IMessageBoxDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IMessageBoxDialogViewModel^)
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::MessageBoxWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-MessageBoxWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(11/11)================================
module <localized-strings>gaclib_controls::DialogStrings;

namespace gaclib_controls
{
    interface IDialogStringsStrings
    {
        func Abort() : (::system::String);

        func Blue() : (::system::String);

        func Bold() : (::system::String);

        func Cancel() : (::system::String);

        func Color() : (::system::String);

        func ColorDialogTitle() : (::system::String);

        func Continue() : (::system::String);

        func FontDialogTitle() : (::system::String);

        func FontName() : (::system::String);

        func FontSize() : (::system::String);

        func Green() : (::system::String);

        func HAA() : (::system::String);

        func Ignore() : (::system::String);

        func Italic() : (::system::String);

        func No() : (::system::String);

        func OK() : (::system::String);

        func Red() : (::system::String);

        func Retry() : (::system::String);

        func TryAgain() : (::system::String);

        func Underline() : (::system::String);

        func VAA() : (::system::String);

        func Yes() : (::system::String);
    }
}

namespace gaclib_controls
{
    class DialogStrings
    {
        static func <ls>First(<ls>formats : ::system::String{}) : (::system::String)
        {
            {
                var <for-enumerable><ls>format = <ls>formats of (::system::Enumerable^);
                var <for-enumerator><ls>format = <for-enumerable><ls>format.CreateEnumerator();
                while (<for-enumerator><ls>format.Next())
                {
                    var <ls>format = (cast (::system::String) <for-enumerator><ls>format.GetCurrent());
                    {
                        return <ls>format;
                    }
                }
            }
            return "";
        }

        static func Get(<ls>locale : ::system::Locale) : (IDialogStringsStrings^)
        {
            return new (IDialogStringsStrings^)
            {
                override func Abort() : (::system::String)
                {
                    return "Abort";
                }

                override func Blue() : (::system::String)
                {
                    return "Blue:";
                }

                override func Bold() : (::system::String)
                {
                    return "Bold";
                }

                override func Cancel() : (::system::String)
                {
                    return "Cancel";
                }

                override func Color() : (::system::String)
                {
                    return "Color:";
                }

                override func ColorDialogTitle() : (::system::String)
                {
                    return "Choose Color";
                }

                override func Continue() : (::system::String)
                {
                    return "Continue";
                }

                override func FontDialogTitle() : (::system::String)
                {
                    return "Choose Font";
                }

                override func FontName() : (::system::String)
                {
                    return "Font:";
                }

                override func FontSize() : (::system::String)
                {
                    return "Size:";
                }

                override func Green() : (::system::String)
                {
                    return "Green:";
                }

                override func HAA() : (::system::String)
                {
                    return "Horizontally Antialias";
                }

                override func Ignore() : (::system::String)
                {
                    return "Ignore";
                }

                override func Italic() : (::system::String)
                {
                    return "Italic";
                }

                override func No() : (::system::String)
                {
                    return "No";
                }

                override func OK() : (::system::String)
                {
                    return "OK";
                }

                override func Red() : (::system::String)
                {
                    return "Red:";
                }

                override func Retry() : (::system::String)
                {
                    return "Retry";
                }

                override func TryAgain() : (::system::String)
                {
                    return "Try Again";
                }

                override func Underline() : (::system::String)
                {
                    return "Underline";
                }

                override func VAA() : (::system::String)
                {
                    return "Vertically Antialias";
                }

                override func Yes() : (::system::String)
                {
                    return "Yes";
                }
            };
        }

        new ()
        {
        }
    }
}

