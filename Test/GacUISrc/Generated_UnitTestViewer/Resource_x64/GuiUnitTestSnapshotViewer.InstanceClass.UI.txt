================================(1/4)================================
module <constructor>gaclib_controls::UnitTestSnapshotViewerWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class UnitTestSnapshotViewerWindowConstructor
    {
        @cpp:Protected
        var ViewModel : ::gaclib_controls::IUnitTestSnapshotViewerViewModel^ = null of (::gaclib_controls::IUnitTestSnapshotViewerViewModel^);

        @cpp:Protected
        var self : ::gaclib_controls::UnitTestSnapshotViewerWindow* = null of (::gaclib_controls::UnitTestSnapshotViewerWindow*);

        @cpp:Protected
        var treeViewFileNodes : ::presentation::controls::GuiBindableTreeView* = null of (::presentation::controls::GuiBindableTreeView*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiColumnSplitterComposition* = null of (::presentation::compositions::GuiColumnSplitterComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-UnitTestSnapshotViewerWindow>Initialize(<this> : ::gaclib_controls::UnitTestSnapshotViewerWindow*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.ClientSize = {x : 1920; y : 1080;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>0.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.SetRowsAndColumns(1, 2);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Absolute; absolute : 300;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiColumnSplitterComposition*)());
            {
                (<precompile>1.ColumnsToTheLeft = 1 of (::system::Int64));
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(0, 0, 1, 1);
            }
            {
                (treeViewFileNodes = new (::presentation::controls::GuiBindableTreeView*)(::presentation::theme::ThemeName::TreeView));
            }
            {
                (treeViewFileNodes.ChildrenProperty = func (<item> : ::system::Object) : (::system::Enumerable^)
                {
                    var item = (cast (IUnitTestSnapshotFileNode^) <item>);
                    return item.Children;
                });
            }
            {
                (treeViewFileNodes.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (IUnitTestSnapshotFileNode^) <item>);
                    return item.Name;
                });
            }
            (<precompile>3 = treeViewFileNodes.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (treeViewFileNodes.HorizontalAlwaysVisible = false);
            }
            {
                (treeViewFileNodes.VerticalAlwaysVisible = false);
            }
            {
                <precompile>2.AddChild(treeViewFileNodes.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::UnitTestSnapshotViewerWindow* = null of (::gaclib_controls::UnitTestSnapshotViewerWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.WindowTitle();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::UnitTestSnapshotViewerWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::UnitTestSnapshotViewerWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::UnitTestSnapshotViewerStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IUnitTestSnapshotViewerStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(2/4)================================
module <instance>gaclib_controls::UnitTestSnapshotViewerWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(UnitTestSnapshotViewerWindowConstructor))
    class UnitTestSnapshotViewerWindow : ::presentation::controls::GuiWindow, UnitTestSnapshotViewerWindowConstructor
    {
        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IUnitTestSnapshotViewerStringsStrings^ = ::gaclib_controls::UnitTestSnapshotViewerStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IUnitTestSnapshotViewerStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IUnitTestSnapshotViewerStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IUnitTestSnapshotViewerStringsStrings^{GetStrings, SetStrings : StringsChanged}

        var <parameter>ViewModel : gaclib_controls::IUnitTestSnapshotViewerViewModel^ = null of (::gaclib_controls::IUnitTestSnapshotViewerViewModel^);

        func GetViewModel() : (gaclib_controls::IUnitTestSnapshotViewerViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : gaclib_controls::IUnitTestSnapshotViewerViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : gaclib_controls::IUnitTestSnapshotViewerViewModel^)
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::UnitTestSnapshotViewerWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-UnitTestSnapshotViewerWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(3/4)================================
module <localized-strings>gaclib_controls::UnitTestSnapshotViewerStrings;

namespace gaclib_controls
{
    interface IUnitTestSnapshotViewerStringsStrings
    {
        func WindowTitle() : (::system::String);
    }
}

namespace gaclib_controls
{
    var <ls>UnitTestSnapshotViewerStrings : IUnitTestSnapshotViewerStringsStrings^[::system::Locale] = {};
}

namespace gaclib_controls
{
    class UnitTestSnapshotViewerStrings
    {
        static func <ls_en-US>BuildStrings(<ls>locale : ::system::Locale) : (::gaclib_controls::IUnitTestSnapshotViewerStringsStrings^)
        {
            return new (::gaclib_controls::IUnitTestSnapshotViewerStringsStrings^)
            {
                override func WindowTitle() : (::system::String)
                {
                    return "Unit Test Snapshot Viewer";
                }
            };
        }

        static func Install(<ls>locale : ::system::Locale, <ls>impl : IUnitTestSnapshotViewerStringsStrings^) : (void)
        {
            if (<ls>UnitTestSnapshotViewerStrings.Keys.Contains(<ls>locale))
            {
                raise (("Localized strings \"gaclib_controls::UnitTestSnapshotViewerStrings\" has already registered for locale \"" & <ls>locale) & "\".");
            }
            <ls>UnitTestSnapshotViewerStrings.Set(<ls>locale, <ls>impl);
        }

        static func Get(<ls>locale : ::system::Locale) : (IUnitTestSnapshotViewerStringsStrings^)
        {
            if (<ls>UnitTestSnapshotViewerStrings.Keys.Contains(<ls>locale))
            {
                return <ls>UnitTestSnapshotViewerStrings[<ls>locale];
            }
            return <ls>UnitTestSnapshotViewerStrings[(cast (::system::Locale) "en-US")];
        }

        new ()
        {
        }
    }
}

namespace gaclib_controls
{
    static
    {
        ::gaclib_controls::UnitTestSnapshotViewerStrings::Install((cast (::system::Locale) "en-US"), UnitTestSnapshotViewerStrings::<ls_en-US>BuildStrings((cast (::system::Locale) "en-US")));
    }
}

================================(4/4)================================
module viewmodel;
using system::*;
using presentation::*;

namespace gaclib_controls
{
    enum UnitTestSnapshotFileNodeType
    {
        Folder = 0,
        File = 1,
    }

    interface IUnitTestSnapshotFileNode
    {
        func GetNodeType() : (UnitTestSnapshotFileNodeType);

        prop NodeType : UnitTestSnapshotFileNodeType{GetNodeType}

        func GetName() : (string);

        prop Name : string{GetName}

        func GetChildren() : (IUnitTestSnapshotFileNode^{});

        prop Children : IUnitTestSnapshotFileNode^{}{GetChildren}

        func LoadContent() : (string);
    }

    interface IUnitTestSnapshotViewerViewModel
    {
        func GetRootNode() : (IUnitTestSnapshotFileNode^);

        prop RootNode : IUnitTestSnapshotFileNode^{GetRootNode}
    }
}

