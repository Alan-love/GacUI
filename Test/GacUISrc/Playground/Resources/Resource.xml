<Resource>
  <Instance name="ThemeResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::TestTheme" xmlns:x="testtheme::*">
      <ThemeTemplates Name="TestSkin">
      </ThemeTemplates>
    </Instance>
  </Instance>

  <Folder name="LargeImages" content="Link">../../../Resources/App/FullControlTest/Images/LargeImages.xml</Folder>
  <Folder name="SmallImages" content="Link">../../../Resources/App/FullControlTest/Images/SmallImages.xml</Folder>

  <Script name="ViewModelResource">
    <Workflow><![CDATA[
      module viewmodel;
      using system::*;
      using presentation::*;

      namespace demo
      {
        class RefreshItem
        {
          prop Name : string = "" {not observe}
          prop Title : string = "" {not observe}
          prop Sub1 : string = "One" {not observe}
          prop Sub2 : string = "Two" {not observe}
          prop Sub3 : string = "Three" {not observe}
          prop Selected : bool = false {not observe}
          prop LargeImage : GuiImageData^ = null {not observe}
          prop SmallImage : GuiImageData^ = null {not observe}
          prop Children : observe RefreshItem^[] = {} {const, not observe}
          prop DoNotUse : object = null {not observe}

          new (name:string, title:string)
          {
            Name = name;
            Title = title;
          }

          new (name:string, title:string, children:RefreshItem^{})
          {
            Name = name;
            Title = title;
            for (child in children)
            {
              Children.Add(child);
            }
          }
        }
      }
    ]]></Workflow>
  </Script>

  <Instance name="RefreshBindableTreeViewTabPageResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::RefreshBindableTreeViewTabPage">
      <ref.Members><![CDATA[
        var rootItem : RefreshItem^ = new RefreshItem^("", "", {
          new RefreshItem^("First", "1st", {
            new RefreshItem^("First (1)", "1st (1)")
            new RefreshItem^("Second (1)", "2nd (1)")
            new RefreshItem^("Third (1)", "3rd (1)")
          })
          new RefreshItem^("Second", "2nd", {
            new RefreshItem^("First (2)", "1st (2)")
            new RefreshItem^("Second (2)", "2nd (2)")
            new RefreshItem^("Third (2)", "3rd (2)")
          })
          new RefreshItem^("Third", "3rd")
          new RefreshItem^("Fourth", "4th")
        });
      ]]></ref.Members>
      <ref.Ctor><![CDATA[
        {
          rootItem.Children[0].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Task", true));
          rootItem.Children[1].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Reminder", true));
          rootItem.Children[2].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true));
          rootItem.Children[3].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true));

          rootItem.Children[0].Children[0].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Task", true));
          rootItem.Children[0].Children[1].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Reminder", true));
          rootItem.Children[0].Children[2].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true));

          rootItem.Children[1].Children[0].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Task", true));
          rootItem.Children[1].Children[1].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Reminder", true));
          rootItem.Children[1].Children[2].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true));
        }
      ]]></ref.Ctor>
      <TabPage ref.Name="self" Text="BindableTreeView">
        <Table CellPadding="5" BorderVisible="false" MinSizeLimitation="LimitToElementAndChildren" AlignmentToParent="left:5 top:5 right:5 bottom:5">
          <att.Rows>
            <_>composeType:MinSize</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Columns>
          <Cell Site="row:0 column:0">
            <Button Text="Use Name">
              <ev.Clicked-eval><![CDATA[
                {
                  treeView.TextProperty = func(value:object):string
                  {
                    return (cast (RefreshItem^) value).Name;
                  };
                }
              ]]></ev.Clicked-eval>
            </Button>
          </Cell>
          <Cell Site="row:0 column:1">
            <Button Text="Use Title">
              <ev.Clicked-eval><![CDATA[
                {
                  treeView.TextProperty = func(value:object):string
                  {
                    return (cast (RefreshItem^) value).Title;
                  };
                }
              ]]></ev.Clicked-eval>
            </Button>
          </Cell>
          <Cell Site="row:0 column:2">
            <Button Text="*First">
              <ev.Clicked-eval><![CDATA[
                {
                  var data = self.rootItem.Children[0];
                  data.Name = data.Name == "First" ? "One" : "First";
                  data.Title = data.Title == "1st" ? "One" : "1st";
                  treeView.NotifyNodeDataModified(data);
                }
              ]]></ev.Clicked-eval>
            </Button>
          </Cell>
          <Cell Site="row:0 column:3">
            <Button Text="*First/Second">
              <ev.Clicked-eval><![CDATA[
                {
                  var data = self.rootItem.Children[0].Children[1];
                  data.Name = data.Name == "Second (1)" ? "Two (1)" : "Second (1)";
                  data.Title = data.Title == "2nd (1)" ? "Two (1)" : "2nd (1)";
                  treeView.NotifyNodeDataModified(data);
                }
              ]]></ev.Clicked-eval>
            </Button>
          </Cell>
          <Cell Site="row:1 column:0 columnSpan:5">
            <BindableTreeView ref.Name="treeView" env.ItemType="demo::RefreshItem^">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <att.ItemSource-eval>self.rootItem</att.ItemSource-eval>
              <att.ReverseMappingProperty>DoNotUse</att.ReverseMappingProperty>
              <att.TextProperty>Name</att.TextProperty>
              <att.ImageProperty>SmallImage</att.ImageProperty>
              <att.ChildrenProperty>Children</att.ChildrenProperty>
            </BindableTreeView>
          </Cell>
        </Table>
      </TabPage>
    </Instance>
  </Instance>

  <Instance name="MainWindowResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::TestWindow" xmlns:demo="demo::*">
      <Window ref.Name="self" Text="MainWindow" ClientSize="x:640 y:480">
        <Tab>
          <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
          <att.Pages>
            <demo:RefreshBindableTreeViewTabPage/>
          </att.Pages>
        </Tab>
      </Window>
    </Instance>
  </Instance>
</Resource>